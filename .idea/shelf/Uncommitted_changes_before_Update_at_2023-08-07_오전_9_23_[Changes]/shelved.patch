Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.content.ContentProviderCompat.requireContext\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.example.a23_hf069.*\r\nimport okhttp3.*\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport java.time.LocalDate\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\n\r\nclass WantedFilteringFragment : Fragment() {\r\n\r\n    private val baseUrl =\r\n        \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=1&display=10\"\r\n    //완료 버튼\r\n    lateinit var complete_btn: Button\r\n    //지역,직종\r\n    lateinit var regioncl_btn: Button\r\n    lateinit var jobcl_btn: Button\r\n    lateinit var tv_jobcl_selected: TextView\r\n    lateinit var tv_regioncl_selected: TextView\r\n    //학력\r\n    lateinit var cbAllEdu: CheckBox // 학력무관\r\n    lateinit var cbHighEdu: CheckBox // 고졸\r\n    lateinit var cbUniv2: CheckBox // 대졸(2~3년)\r\n    lateinit var cbUniv4: CheckBox // 대졸(4년)\r\n    //경력\r\n    lateinit var cbAllCareer : CheckBox // 경력무관\r\n    lateinit var cbFresh : CheckBox // 신입\r\n    lateinit var cbExperienced : CheckBox // 경력\r\n    //마감일\r\n    lateinit var cbToday : CheckBox//오늘까지\r\n    lateinit var cbTomorrow : CheckBox//내일까지\r\n    lateinit var cb7days : CheckBox//일주일 이내\r\n    lateinit var cb30days : CheckBox//한달 이내\r\n    lateinit var cb60days : CheckBox//두달 이내\r\n\r\n    private lateinit var wantedList: List<Wanted>\r\n    private val sharedSelectionViewModel: SharedSelectionViewModel by activityViewModels() // 필터링된 리스트를 전달하는 viewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val rootView = inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n        return rootView\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        //완료 버튼 초기화\r\n        complete_btn = view.findViewById<Button>(R.id.complete_btn1)\r\n        //지역 선택 초기화\r\n        regioncl_btn = view.findViewById<Button>(R.id.regioncl_btn)\r\n        //직종 선택 초기화\r\n        jobcl_btn = view.findViewById<Button>(R.id.jobcl_btn)\r\n\r\n        complete_btn.setOnClickListener {\r\n            val wantedResultFragment = WantedResultFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedResultFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        jobcl_btn.setOnClickListener {\r\n            val jobSelectionFragment = JobWorkNetSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, jobSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        regioncl_btn.setOnClickListener {\r\n            val regionSelectionFragment = RegionSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        // 선택된 지역 정보를 나타낼 TextView 초기화\r\n        tv_regioncl_selected = view.findViewById(R.id.tv_regioncl_selected)\r\n\r\n        // 선택된 직종 정보를 나타낼 TextView 초기화\r\n        tv_jobcl_selected = view.findViewById(R.id.tv_jobcl_selected)\r\n\r\n        // ViewModel에서 선택된 지역 정보를 가져와서 TextView에 설정\r\n        val selectedRegion = sharedSelectionViewModel.selectedRegion\r\n        tv_regioncl_selected.text = selectedRegion\r\n\r\n        // ViewModel에서 선택된 직종 정보를 가져와서 TextView에 설정\r\n        val selectedJob = sharedSelectionViewModel.selectedJob\r\n        tv_jobcl_selected.text = selectedJob\r\n\r\n        // CheckBox 변수들을 초기화\r\n        cbAllCareer = view.findViewById(R.id.cb_c_1)\r\n        cbFresh = view.findViewById(R.id.cb_c_2)\r\n        cbExperienced = view.findViewById(R.id.cb_c_3)\r\n\r\n        cbAllEdu = view.findViewById(R.id.cb_e_1)\r\n        cbHighEdu = view.findViewById(R.id.cb_e_4)\r\n        cbUniv2 = view.findViewById(R.id.cb_e_5)\r\n        cbUniv4 = view.findViewById(R.id.cb_e_6)\r\n\r\n        cbToday = view.findViewById(R.id.cb_d_2)\r\n        cbTomorrow = view.findViewById(R.id.cb_d_3)\r\n        cb7days = view.findViewById(R.id.cb_d_4)\r\n        cb30days = view.findViewById(R.id.cb_d_5)\r\n        cb60days = view.findViewById(R.id.cb_d_6)\r\n\r\n        // 선택한 지역 혹은 직종에 해당하는 채용공고 리스트 가져오기\r\n        // ------ 지역 ----------------\r\n        fetchWantedList(\"region\",selectedRegion)\r\n\r\n        // ------ 직종 ----------------\r\n\r\n\r\n        // 각 CheckBox에 리스너를 등록하여 박스 선택시 이벤트를 처리\r\n        // ------ 경력 ----------------\r\n        cbAllCareer.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"career\",\"관계없음\")            }\r\n        }\r\n        cbFresh.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"career\",\"신입\")\r\n            }\r\n        }\r\n        cbExperienced.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"career\",\"경력\")            }\r\n        }\r\n\r\n        // ------ 학력 ----------------\r\n        cbAllEdu.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"edu\",\"학력무관\")            }\r\n        }\r\n\r\n        cbHighEdu.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"edu\",\"고졸\")            }\r\n        }\r\n        cbUniv2.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"edu\",\"대졸(2~3년)\")            }\r\n        }\r\n        cbUniv4.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"edu\",\"대졸(4년)\")            }\r\n        }\r\n        //-----------마감일------------------------\r\n        cbToday.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"closeDt\",\"today\")            }\r\n        }\r\n        cbTomorrow.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"closeDt\",\"tomorrow\")            }\r\n        }\r\n        cb7days.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"closeDt\",\"7days\")            }\r\n        }\r\n        cb30days.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"closeDt\",\"30days\")            }\r\n        }\r\n        cb60days.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                fetchWantedList(\"closeDt\",\"60days\")            }\r\n        }\r\n\r\n    }\r\n\r\n    // 카테고리와 키워드에 해당하는 채용공고 가져오기\r\n    private fun fetchWantedList(category:String?,keyword: String?){\r\n        val client = OkHttpClient()\r\n        val request = Request.Builder()\r\n            .url(\"$baseUrl\")\r\n            .build()\r\n        var result: List<Wanted> = emptyList()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                println(e.printStackTrace())\r\n            }\r\n\r\n            @RequiresApi(Build.VERSION_CODES.O)\r\n            override fun onResponse(call: Call, response: Response) {\r\n                if (response.isSuccessful) {\r\n                    val xmlString = response.body?.string()\r\n                    result = parseXmlResponse(xmlString) // parsing하기\r\n                    wantedList = result\r\n                    if (category == \"region\") {\r\n                        for(i in wantedList){\r\n                            if(keyword == i.region){\r\n                                println(i.region)\r\n                                println(i.company)\r\n                                println(i.title)\r\n                                println(\"______________________________\")\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                    // if문 region 종료\r\n\r\n//                    else if(category == \"job\"){\r\n//\r\n//                    }\r\n                    else if (category == \"edu\") {\r\n                        for(i in wantedList){\r\n                            if(keyword == i.minEdubg){\r\n                                println(i.minEdubg)\r\n                                println(i.company)\r\n                                println(i.title)\r\n                                println(\"______________________________\")\r\n\r\n                            }\r\n                        }\r\n                        val filteredList = wantedList.filter { it.minEdubg == keyword }\r\n                        sharedSelectionViewModel.edu_filterdList = filteredList // viewModel에 필터링된 리스트 저장\r\n                    }\r\n                    else if (category == \"career\") {\r\n                        for(i in wantedList){\r\n                            if(keyword == i.career){\r\n                                println(i.career)\r\n                                println(i.company)\r\n                                println(i.title)\r\n                                println(\"______________________________\")\r\n\r\n                            }\r\n                        }\r\n                        val filteredList = wantedList.filter { it.career == keyword }\r\n                        sharedSelectionViewModel.career_filterdList = filteredList // viewModel에 필터링된 리스트 저장\r\n\r\n\r\n                    } else if (category == \"closeDt\") {\r\n                        val formatter = DateTimeFormatter.ofPattern(\"yy-MM-dd\")\r\n\r\n                        val today = LocalDate.now()\r\n                        val formattedToday = formatter.format(today)\r\n                        val after1Day = formatter.format(today.plusDays(1))\r\n                        val after7Days = formatter.format(today.plusDays(7))\r\n                        val after30Days = formatter.format(today.plusMonths(1))\r\n                        val after60Days = formatter.format(today.plusMonths(2))\r\n\r\n                        fun parseDate(dateString: String): LocalDate? {\r\n                            return try {\r\n                                LocalDate.parse(dateString, formatter)\r\n                            } catch (e: Exception) {\r\n                                e.printStackTrace()\r\n                                null\r\n                            }\r\n                        }\r\n\r\n                        val todayDate = parseDate(formattedToday)\r\n                        val after1DayDate = parseDate(after1Day)\r\n                        val after7DaysDate = parseDate(after7Days)\r\n                        val after30DaysDate = parseDate(after30Days)\r\n                        val after60DaysDate = parseDate(after60Days)\r\n\r\n                        if (keyword == \"today\") { // 오늘까지인 공고 찾기 => 공고 마감일 = 오늘 날짜\r\n                            for (i in wantedList) {\r\n                                val a = i.closeDt\r\n                                // 한글과 공백을 제거하고 순수한 날짜 포맷만 추출\r\n                                val closeDt = a?.replace(Regex(\"[채용시까지\\\\s]\"), \"\")\r\n                                if (closeDt != null) {\r\n                                    val closeDtDate = parseDate(closeDt)\r\n                                    if (closeDtDate == todayDate) {\r\n                                        println(i.closeDt)\r\n                                        println(i.company)\r\n                                        println(i.title)\r\n                                        println(\"______________________________\")\r\n\r\n                                        val filteredList = wantedList.filter { it.closeDt == keyword }\r\n                                        sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (keyword == \"tomorrow\") { // 내일까지인 공고 찾기 => 공고 마감일 < 오늘 날짜 + 1\r\n                            for (i in wantedList) {\r\n                                val a = i.closeDt\r\n                                // 한글과 공백을 제거하고 순수한 날짜 포맷만 추출\r\n                                val closeDt = a?.replace(Regex(\"[채용시까지\\\\s]\"), \"\")\r\n                                if (closeDt != null) {\r\n                                    val closeDtDate = parseDate(closeDt)\r\n                                    if (closeDtDate == after1DayDate) {\r\n                                        println(i.closeDt)\r\n                                        println(i.company)\r\n                                        println(i.title)\r\n                                        println(\"______________________________\")\r\n\r\n                                        val filteredList = wantedList.filter { it.closeDt == keyword }\r\n                                        sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (keyword == \"7days\") { // 일주일 이내인 공고 찾기 => 공고 마감일 < 오늘 날짜 + 7\r\n                            for (i in wantedList) {\r\n                                val a = i.closeDt\r\n                                // 한글과 공백을 제거하고 순수한 날짜 포맷만 추출\r\n                                val closeDt = a?.replace(Regex(\"[채용시까지\\\\s]\"), \"\")\r\n                                if (closeDt != null) {\r\n                                    val closeDtDate = parseDate(closeDt)\r\n                                    todayDate?.let { today ->\r\n                                        after7DaysDate?.let { after7 ->\r\n                                            if (closeDtDate!! in todayDate..after7) {\r\n                                                println(i.closeDt)\r\n                                                println(i.company)\r\n                                                println(i.title)\r\n                                                println(\"______________________________\")\r\n\r\n                                                val filteredList = wantedList.filter { it.closeDt == keyword }\r\n                                                sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (keyword == \"30days\") { // 한달 이내인 공고 찾기 => 공고 마감일 < 오늘 날짜 + 30\r\n                            for (i in wantedList) {\r\n                                val a = i.closeDt\r\n                                // 한글과 공백을 제거하고 순수한 날짜 포맷만 추출\r\n                                val closeDt = a?.replace(Regex(\"[채용시까지\\\\s]\"), \"\")\r\n                                if (closeDt != null) {\r\n                                    val closeDtDate = parseDate(closeDt)\r\n                                    todayDate?.let { today ->\r\n                                        after30DaysDate?.let { after30 ->\r\n                                            if (closeDtDate!! in todayDate..after30) {\r\n                                                println(i.closeDt)\r\n                                                println(i.company)\r\n                                                println(i.title)\r\n                                                println(\"______________________________\")\r\n\r\n                                                val filteredList = wantedList.filter { it.closeDt == keyword }\r\n                                                sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else { // 두달 이내인 공고 찾기 => 공고 마감일 < 오늘 날짜 + 30\r\n                            for (i in wantedList) {\r\n                                val a = i.closeDt\r\n                                // 한글과 공백을 제거하고 순수한 날짜 포맷만 추출\r\n                                val closeDt = a?.replace(Regex(\"[채용시까지\\\\s]\"), \"\")\r\n                                if (closeDt != null) {\r\n                                    val closeDtDate = parseDate(closeDt)\r\n                                    todayDate?.let { today ->\r\n                                        after60DaysDate?.let { after60 ->\r\n                                            if (closeDtDate!! in todayDate..after60) {\r\n                                                println(i.closeDt)\r\n                                                println(i.company)\r\n                                                println(i.title)\r\n                                                println(\"______________________________\")\r\n\r\n                                                val filteredList = wantedList.filter { it.closeDt == keyword }\r\n                                                sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } //if문 closeDt 종료\r\n                } // if 응답이 성공적일때\r\n                else {\r\n                    showErrorToast()\r\n                } //if 응답 실패\r\n            } // onResponse 함수 종료\r\n\r\n        }) //callback\r\n\r\n    }\r\n\r\n    data class Wanted(\r\n        var wantedAuthNo: String? = null,\r\n        var company: String? = null,\r\n        var title: String? = null,\r\n        var salTpNm: String? = null,\r\n        var sal: String? = null,\r\n        var region: String? = null,\r\n        var holidayTpNm: String? = null,\r\n        var minEdubg: String? = null,\r\n        var career: String? = null,\r\n        var closeDt: String? = null,\r\n        var basicAddr: String? = null,\r\n        var detailAddr: String? = null\r\n    )\r\n\r\n    private fun parseXmlResponse(xmlResponse: String?): List<Wanted> {\r\n        val wantedList = mutableListOf<Wanted>()\r\n        val factory = XmlPullParserFactory.newInstance()\r\n        val xpp = factory.newPullParser()\r\n        xpp.setInput(StringReader(xmlResponse))\r\n\r\n        var eventType = xpp.eventType\r\n        var wantedAuthNo: String? = null\r\n        var company: String? = null\r\n        var title: String? = null\r\n        var salTpNm: String? = null\r\n        var sal: String? = null\r\n        var region: String? = null\r\n        var holidayTpNm: String? = null\r\n        var minEdubg: String? = null\r\n        var career: String? = null\r\n        var closeDt: String? = null\r\n        var basicAddr: String? = null\r\n        var detailAddr: String? = null\r\n\r\n        while (eventType != XmlPullParser.END_DOCUMENT) {\r\n            when (eventType) {\r\n                XmlPullParser.START_TAG -> {\r\n                    when (xpp.name) {\r\n                        \"wantedAuthNo\" -> wantedAuthNo = xpp.nextText()\r\n                        \"company\" -> company = xpp.nextText()\r\n                        \"title\" -> title = xpp.nextText()\r\n                        \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                        \"sal\" -> sal = xpp.nextText()\r\n                        \"region\" -> region = xpp.nextText()\r\n                        \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                        \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                        \"career\" -> career = xpp.nextText()\r\n                        \"closeDt\" -> closeDt = xpp.nextText()\r\n                        \"basicAddr\" -> basicAddr = xpp.nextText()\r\n                        \"detailAddr\" -> detailAddr = xpp.nextText()\r\n                    }\r\n                }\r\n\r\n                XmlPullParser.END_TAG -> {\r\n                    if (xpp.name == \"wanted\") {\r\n                        wantedList.add(Wanted(wantedAuthNo,company,title,salTpNm,sal, region, holidayTpNm, minEdubg, career, closeDt, basicAddr, detailAddr))\r\n                        wantedAuthNo = null\r\n                        company = null\r\n                        title = null\r\n                        salTpNm = null\r\n                        sal = null\r\n                        region = null\r\n                        holidayTpNm = null\r\n                        minEdubg = null\r\n                        career = null\r\n                        closeDt = null\r\n                        basicAddr = null\r\n                        detailAddr = null\r\n                    }\r\n                }\r\n            }\r\n            eventType = xpp.next()\r\n        } // while문 종료\r\n        return wantedList\r\n    }\r\n\r\n\r\n\r\n    private fun showErrorToast() {\r\n        Toast.makeText(requireContext(), \"Failed to fetch wanted list.\", Toast.LENGTH_SHORT).show()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1690989164000)
@@ -1,7 +1,6 @@
 package com.example.a23_hf069
 
 
-import android.content.Context
 import android.os.Build
 import android.os.Bundle
 import android.view.LayoutInflater
@@ -9,10 +8,8 @@
 import android.view.ViewGroup
 import android.widget.*
 import androidx.annotation.RequiresApi
-import androidx.core.content.ContentProviderCompat.requireContext
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.activityViewModels
-import androidx.lifecycle.ViewModelProvider
 import com.example.a23_hf069.*
 import okhttp3.*
 import org.xmlpull.v1.XmlPullParser
@@ -51,8 +48,9 @@
     lateinit var cb60days : CheckBox//두달 이내
 
     private lateinit var wantedList: List<Wanted>
-    private val sharedSelectionViewModel: SharedSelectionViewModel by activityViewModels() // 필터링된 리스트를 전달하는 viewModel
-
+    private val sharedSelectionViewModel: SharedSelectionViewModel by activityViewModels() // 필터링된 리스트를 전달하는 viewModel 객체 생성
+    lateinit var selectedRegion : String
+    lateinit var selectedJob : String
     override fun onCreateView(
         inflater: LayoutInflater,
         container: ViewGroup?,
@@ -72,30 +70,6 @@
         //직종 선택 초기화
         jobcl_btn = view.findViewById<Button>(R.id.jobcl_btn)
 
-        complete_btn.setOnClickListener {
-            val wantedResultFragment = WantedResultFragment()
-            requireActivity().supportFragmentManager.beginTransaction()
-                .replace(R.id.fl_container, wantedResultFragment)
-                .addToBackStack(null)
-                .commit()
-        }
-
-        jobcl_btn.setOnClickListener {
-            val jobSelectionFragment = JobWorkNetSelectionFragment()
-            requireActivity().supportFragmentManager.beginTransaction()
-                .replace(R.id.fl_container, jobSelectionFragment)
-                .addToBackStack(null)
-                .commit()
-        }
-
-        regioncl_btn.setOnClickListener {
-            val regionSelectionFragment = RegionSelectionFragment()
-            requireActivity().supportFragmentManager.beginTransaction()
-                .replace(R.id.fl_container, regionSelectionFragment)
-                .addToBackStack(null)
-                .commit()
-        }
-
         // 선택된 지역 정보를 나타낼 TextView 초기화
         tv_regioncl_selected = view.findViewById(R.id.tv_regioncl_selected)
 
@@ -103,13 +77,14 @@
         tv_jobcl_selected = view.findViewById(R.id.tv_jobcl_selected)
 
         // ViewModel에서 선택된 지역 정보를 가져와서 TextView에 설정
-        val selectedRegion = sharedSelectionViewModel.selectedRegion
+        selectedRegion = sharedSelectionViewModel.selectedRegion.toString()
         tv_regioncl_selected.text = selectedRegion
 
         // ViewModel에서 선택된 직종 정보를 가져와서 TextView에 설정
-        val selectedJob = sharedSelectionViewModel.selectedJob
+        selectedJob = sharedSelectionViewModel.selectedJob.toString()
         tv_jobcl_selected.text = selectedJob
 
+
         // CheckBox 변수들을 초기화
         cbAllCareer = view.findViewById(R.id.cb_c_1)
         cbFresh = view.findViewById(R.id.cb_c_2)
@@ -126,72 +101,86 @@
         cb30days = view.findViewById(R.id.cb_d_5)
         cb60days = view.findViewById(R.id.cb_d_6)
 
-        // 선택한 지역 혹은 직종에 해당하는 채용공고 리스트 가져오기
-        // ------ 지역 ----------------
-        fetchWantedList("region",selectedRegion)
+        // 완료 버튼이 눌렸을 때 지역,직종 변수 및 학력,경력,마감일 체크박스 확인 -> 선택된 조건에 해당하는 공고목록 가져와서 UI에 업데이트
+        complete_btn.setOnClickListener {
+
 
-        // ------ 직종 ----------------
+            // 선택한 지역이 있을 경우 필터링하기
+            if(selectedRegion != ""){
+                fetchWantedList("region","$selectedRegion")
+            }
+            // 선택한 직종이 있을 경우 필터링하기
 
+            // 학력 중 선택한 체크박스가 있을 경우 필터링하기
+            if(cbAllEdu.isChecked){
+                fetchWantedList("edu","학력무관")
+            }
+            if(cbHighEdu.isChecked){
+                fetchWantedList("edu","고졸")
+            }
+            if(cbUniv2.isChecked){
+                fetchWantedList("edu","대졸(2~3년)")
+            }
+            if(cbUniv4.isChecked){
+                fetchWantedList("edu","대졸4년")
+            }
 
-        // 각 CheckBox에 리스너를 등록하여 박스 선택시 이벤트를 처리
-        // ------ 경력 ----------------
-        cbAllCareer.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("career","관계없음")            }
-        }
-        cbFresh.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
+            // 경력 중 선택한 체크박스가 있을 경우 필터링하기
+            if(cbAllCareer.isChecked){
+                fetchWantedList("career","관계없음")
+            }
+            if(cbFresh.isChecked){
                 fetchWantedList("career","신입")
             }
-        }
-        cbExperienced.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("career","경력")            }
-        }
-
-        // ------ 학력 ----------------
-        cbAllEdu.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("edu","학력무관")            }
-        }
+            if(cbExperienced.isChecked){
+                fetchWantedList("career","경력")
+            }
 
-        cbHighEdu.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("edu","고졸")            }
-        }
-        cbUniv2.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("edu","대졸(2~3년)")            }
-        }
-        cbUniv4.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("edu","대졸(4년)")            }
-        }
-        //-----------마감일------------------------
-        cbToday.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("closeDt","today")            }
-        }
-        cbTomorrow.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("closeDt","tomorrow")            }
-        }
-        cb7days.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("closeDt","7days")            }
+            // 마감일 중 선택한 체크박스가 있을 경우 필터링하기
+            if(cbToday.isChecked){
+                fetchWantedList("closeDt","today")
+            }
+            if(cbTomorrow.isChecked){
+                fetchWantedList("closeDt","tomorrow")
+            }
+            if(cb7days.isChecked){
+                fetchWantedList("closeDt","7days")
+            }
+            if(cb30days.isChecked){
+                fetchWantedList("closeDt","30days")
+            }
+            if(cb60days.isChecked){
+                fetchWantedList("closeDt","60days")
+            }
+
+            // 선택된 조건들을 반영한 sharedSelectionViewModel 속 리스트들을 반영한 리스트뷰 화면으로 전환
+            val wantedResultFragment = WantedResultFragment()
+            requireActivity().supportFragmentManager.beginTransaction()
+                .replace(R.id.fl_container, wantedResultFragment)
+                .addToBackStack(null)
+                .commit()
+        } // complete_btn 리스너 종료
+
+        // 지역선택 버튼 눌렸을 때 지역선택 화면으로 전환
+        regioncl_btn.setOnClickListener {
+            val regionSelectionFragment = RegionSelectionFragment()
+            requireActivity().supportFragmentManager.beginTransaction()
+                .replace(R.id.fl_container, regionSelectionFragment)
+                .addToBackStack(null)
+                .commit()
         }
-        cb30days.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("closeDt","30days")            }
-        }
-        cb60days.setOnCheckedChangeListener { _, isChecked ->
-            if (isChecked) {
-                fetchWantedList("closeDt","60days")            }
-        }
 
+        // 직종선택 버튼 눌렸을 때 직종선택 화면으로 전환
+        jobcl_btn.setOnClickListener {
+            val jobSelectionFragment = JobWorkNetSelectionFragment()
+            requireActivity().supportFragmentManager.beginTransaction()
+                .replace(R.id.fl_container, jobSelectionFragment)
+                .addToBackStack(null)
+                .commit()
+        }
     }
 
-    // 카테고리와 키워드에 해당하는 채용공고 가져오기
+    // 카테고리와 키워드에 해당하는 채용공고 가져와서 sharedSelectionViewModel의 리스트에 저장
     private fun fetchWantedList(category:String?,keyword: String?){
         val client = OkHttpClient()
         val request = Request.Builder()
@@ -219,8 +208,8 @@
 
                             }
                         }
-
-
+                        val filteredList = wantedList.filter { it.region == keyword }
+                        sharedSelectionViewModel.updateFilteredList(category, filteredList)
                     }
                     // if문 region 종료
 
@@ -238,7 +227,7 @@
                             }
                         }
                         val filteredList = wantedList.filter { it.minEdubg == keyword }
-                        sharedSelectionViewModel.edu_filterdList = filteredList // viewModel에 필터링된 리스트 저장
+                        sharedSelectionViewModel.updateFilteredList(category, filteredList)
                     }
                     else if (category == "career") {
                         for(i in wantedList){
@@ -251,10 +240,9 @@
                             }
                         }
                         val filteredList = wantedList.filter { it.career == keyword }
-                        sharedSelectionViewModel.career_filterdList = filteredList // viewModel에 필터링된 리스트 저장
-
-
-                    } else if (category == "closeDt") {
+                        sharedSelectionViewModel.updateFilteredList(category, filteredList)
+                    }
+                    else if (category == "closeDt") {
                         val formatter = DateTimeFormatter.ofPattern("yy-MM-dd")
 
                         val today = LocalDate.now()
@@ -293,7 +281,7 @@
                                         println("______________________________")
 
                                         val filteredList = wantedList.filter { it.closeDt == keyword }
-                                        sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장
+                                        sharedSelectionViewModel.updateFilteredList(category, filteredList)
                                     }
                                 }
                             }
@@ -311,7 +299,7 @@
                                         println("______________________________")
 
                                         val filteredList = wantedList.filter { it.closeDt == keyword }
-                                        sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장
+                                        sharedSelectionViewModel.updateFilteredList(category, filteredList)
                                     }
                                 }
                             }
@@ -331,7 +319,7 @@
                                                 println("______________________________")
 
                                                 val filteredList = wantedList.filter { it.closeDt == keyword }
-                                                sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장
+                                                sharedSelectionViewModel.updateFilteredList(category, filteredList)
                                             }
                                         }
                                     }
@@ -353,7 +341,7 @@
                                                 println("______________________________")
 
                                                 val filteredList = wantedList.filter { it.closeDt == keyword }
-                                                sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장
+                                                sharedSelectionViewModel.updateFilteredList(category, filteredList)
                                             }
                                         }
                                     }
@@ -375,7 +363,7 @@
                                                 println("______________________________")
 
                                                 val filteredList = wantedList.filter { it.closeDt == keyword }
-                                                sharedSelectionViewModel.closeDt_filterdList = filteredList // viewModel에 필터링된 리스트 저장
+                                                sharedSelectionViewModel.updateFilteredList(category, filteredList)
                                             }
                                         }
                                     }
@@ -386,12 +374,12 @@
                 } // if 응답이 성공적일때
                 else {
                     showErrorToast()
-                } //if 응답 실패
+                } //if 응답 실패일때
             } // onResponse 함수 종료
 
-        }) //callback
+        }) //callback 종료
 
-    }
+    } // fetchWantedList 함수 종료
 
     data class Wanted(
         var wantedAuthNo: String? = null,
Index: app/src/main/java/com/example/a23_hf069/WantedResultFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ListView\r\nimport android.widget.TextView\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\n\r\n\r\nclass WantedResultFragment : Fragment() {\r\n    private lateinit var listView: ListView\r\n    //viewModel 생성 (단, var로 선언하면 안됨)\r\n    private val sharedSelectionViewModel: SharedSelectionViewModel by activityViewModels()\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // ListView를 보여줄 레이아웃 파일을 연결\r\n        val rootView = inflater.inflate(R.layout.fragment_wanted_result, container, false)\r\n        listView = rootView.findViewById(R.id.listView)\r\n        return rootView\r\n    }\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        updateWantedList()\r\n    }\r\n\r\n    // ListView에 표시될 채용공고 목록을 업데이트하는 함수\r\n    fun updateWantedList() {\r\n        // 리스트뷰 어댑터를 해제하여 초기화\r\n        listView.adapter = null\r\n\r\n        val filteredList = mutableListOf<WantedFilteringFragment.Wanted>()\r\n\r\n        filteredList.addAll(sharedSelectionViewModel.region_filteredList)\r\n        filteredList.addAll(sharedSelectionViewModel.edu_filterdList)\r\n        filteredList.addAll(sharedSelectionViewModel.career_filterdList)\r\n        filteredList.addAll(sharedSelectionViewModel.closeDt_filterdList)\r\n\r\n        val adapter = WantedListAdapter(requireContext(), filteredList)\r\n        listView.adapter = adapter\r\n    }\r\n\r\n    class WantedListAdapter(context: Context, private val wantedList: List<WantedFilteringFragment.Wanted>) :\r\n        ArrayAdapter<WantedFilteringFragment.Wanted>(context, R.layout.wanted_list_item, wantedList) {\r\n\r\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n            var itemView = convertView\r\n            if (itemView == null) {\r\n                val inflater = context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\r\n                itemView = inflater.inflate(R.layout.wanted_list_item, parent, false)\r\n            }\r\n\r\n            val titleTextView: TextView = itemView?.findViewById(R.id.tv_title) ?: throw NullPointerException(\"tv_title not found in the layout\")\r\n            val companyTextView: TextView = itemView?.findViewById(R.id.tv_company) ?: throw NullPointerException(\"tv_company not found in the layout\")\r\n            val closeDtTextView: TextView = itemView?.findViewById(R.id.tv_any) ?: throw NullPointerException(\"tv_any not found in the layout\")\r\n\r\n            val currentItem = wantedList[position]\r\n            titleTextView.text = currentItem.title\r\n            companyTextView.text = currentItem.company\r\n            closeDtTextView.text = currentItem.closeDt\r\n\r\n            return itemView\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedResultFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedResultFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedResultFragment.kt	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ b/app/src/main/java/com/example/a23_hf069/WantedResultFragment.kt	(date 1690990020000)
@@ -10,6 +10,7 @@
 import android.widget.TextView
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.activityViewModels
+import androidx.lifecycle.Observer
 
 
 class WantedResultFragment : Fragment() {
@@ -24,30 +25,18 @@
     ): View? {
         // ListView를 보여줄 레이아웃 파일을 연결
         val rootView = inflater.inflate(R.layout.fragment_wanted_result, container, false)
-        listView = rootView.findViewById(R.id.listView)
         return rootView
     }
 
-
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        updateWantedList()
-    }
-
-    // ListView에 표시될 채용공고 목록을 업데이트하는 함수
-    fun updateWantedList() {
-        // 리스트뷰 어댑터를 해제하여 초기화
-        listView.adapter = null
-
-        val filteredList = mutableListOf<WantedFilteringFragment.Wanted>()
-
-        filteredList.addAll(sharedSelectionViewModel.region_filteredList)
-        filteredList.addAll(sharedSelectionViewModel.edu_filterdList)
-        filteredList.addAll(sharedSelectionViewModel.career_filterdList)
-        filteredList.addAll(sharedSelectionViewModel.closeDt_filterdList)
-
-        val adapter = WantedListAdapter(requireContext(), filteredList)
-        listView.adapter = adapter
+        listView = view.findViewById(R.id.listView)
+        // LiveData를 관찰하여 데이터 변경이 있을 때마다 UI 업데이트를 수행합니다.
+        sharedSelectionViewModel.region_filteredList.observe(viewLifecycleOwner, Observer { filteredList ->
+            val adapter = WantedListAdapter(requireContext(), filteredList)
+            listView.adapter = adapter
+            adapter.notifyDataSetChanged()
+        })
     }
 
     class WantedListAdapter(context: Context, private val wantedList: List<WantedFilteringFragment.Wanted>) :
@@ -62,7 +51,7 @@
 
             val titleTextView: TextView = itemView?.findViewById(R.id.tv_title) ?: throw NullPointerException("tv_title not found in the layout")
             val companyTextView: TextView = itemView?.findViewById(R.id.tv_company) ?: throw NullPointerException("tv_company not found in the layout")
-            val closeDtTextView: TextView = itemView?.findViewById(R.id.tv_any) ?: throw NullPointerException("tv_any not found in the layout")
+            val closeDtTextView: TextView = itemView?.findViewById(R.id.tv_closeDt) ?: throw NullPointerException("tv_any not found in the layout")
 
             val currentItem = wantedList[position]
             titleTextView.text = currentItem.title
Index: app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport androidx.lifecycle.ViewModel\r\n\r\nclass SharedSelectionViewModel : ViewModel() {\r\n    var selectedJob: String? = null\r\n    var selectedRegion: String? = null\r\n    var region_filteredList: List<WantedFilteringFragment.Wanted> = emptyList()\r\n    var edu_filterdList: List<WantedFilteringFragment.Wanted> = emptyList()\r\n    var career_filterdList: List<WantedFilteringFragment.Wanted> = emptyList()\r\n    var closeDt_filterdList: List<WantedFilteringFragment.Wanted> = emptyList()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt b/app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt
--- a/app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ b/app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt	(date 1690990370000)
@@ -1,12 +1,33 @@
 package com.example.a23_hf069
 
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
 
 class SharedSelectionViewModel : ViewModel() {
-    var selectedJob: String? = null
-    var selectedRegion: String? = null
-    var region_filteredList: List<WantedFilteringFragment.Wanted> = emptyList()
-    var edu_filterdList: List<WantedFilteringFragment.Wanted> = emptyList()
-    var career_filterdList: List<WantedFilteringFragment.Wanted> = emptyList()
-    var closeDt_filterdList: List<WantedFilteringFragment.Wanted> = emptyList()
+    var selectedJob: String? = ""
+    var selectedRegion: String? = ""
+
+    private val _region_filteredList = MutableLiveData<List<WantedFilteringFragment.Wanted>>()
+    val region_filteredList: LiveData<List<WantedFilteringFragment.Wanted>> get() = _region_filteredList
+
+    private val _edu_filteredList = MutableLiveData<List<WantedFilteringFragment.Wanted>>()
+    val edu_filteredList: LiveData<List<WantedFilteringFragment.Wanted>> get() = _edu_filteredList
+
+    private val _career_filteredList = MutableLiveData<List<WantedFilteringFragment.Wanted>>()
+    val career_filteredList: LiveData<List<WantedFilteringFragment.Wanted>> get() = _career_filteredList
+
+    private val _closeDt_filteredList = MutableLiveData<List<WantedFilteringFragment.Wanted>>()
+    val closeDt_filteredList: LiveData<List<WantedFilteringFragment.Wanted>> get() = _closeDt_filteredList
+
+    // 필터링된 리스트들을 업데이트하는 함수
+    fun updateFilteredList(category: String, filteredList: List<WantedFilteringFragment.Wanted>) {
+        when (category) {
+            "region" -> _region_filteredList.value = filteredList
+            "edu" -> _edu_filteredList.value = filteredList
+            "career" -> _career_filteredList.value = filteredList
+            "closeDt" -> _closeDt_filteredList.value = filteredList
+        }
+    }
+
 }
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오전_12_44_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오전_12_44_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오전_12_44_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오전_12_44_[Changes]/shelved.patch	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,117 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport okhttp3.*\r\nimport java.io.IOException\r\n\r\nclass ResumeChangeActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"15.165.160.71\" // Replace with your IP address.\r\n    private var userId: String = \"\" // User ID\r\n    private var resumeListNum: Int = -1\r\n    private lateinit var editResumeTitle: EditText\r\n    private lateinit var editTextAcademic: EditText\r\n    private lateinit var editTextCareer: EditText\r\n    private lateinit var editTextIntroduction: EditText\r\n    private lateinit var editTextCertificate: EditText\r\n    private lateinit var editTextEducation: EditText\r\n    private lateinit var editTextDesire: EditText\r\n    private lateinit var buttonSubmit1: Button\r\n    private lateinit var buttonSubmit2: Button\r\n\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_resume_change)\r\n\r\n// Get user ID\r\n        resumeListNum = intent.getIntExtra(\"resumeListNum\", -1)\r\n        userId = intent.getStringExtra(\"userId\") ?: \"\"\r\n\r\n        val textID = findViewById<TextView>(R.id.tvchID)\r\n        textID.text = userId\r\n\r\n        editTextAcademic = findViewById(R.id.edtchAcademic)\r\n        editResumeTitle = findViewById(R.id.edtchTitle)\r\n        editTextCareer = findViewById(R.id.edtchCareer)\r\n        editTextIntroduction = findViewById(R.id.edtchIntroduction)\r\n        editTextCertificate = findViewById(R.id.edtchCertificate)\r\n        editTextEducation = findViewById(R.id.edtchEducation)\r\n        editTextDesire = findViewById(R.id.edtchDesire)\r\n        buttonSubmit1 = findViewById(R.id.buttonchSubmit_temporary)\r\n        buttonSubmit2 = findViewById(R.id.buttonchSubmit_complete)\r\n\r\n        buttonSubmit1.setOnClickListener { // 임시 저장\r\n            val personal_id = userId\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 중\"\r\n\r\n            sendResumeData(\r\n                personal_id,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 임시저장되었습니다\", Toast.LENGTH_SHORT).show()\r\n        }\r\n\r\n        buttonSubmit2.setOnClickListener { // 작성완료\r\n            val personal_id = userId\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 완료\"\r\n\r\n            sendResumeData(\r\n                personal_id,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 작성완료되었습니다\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    private fun sendResumeData(\r\n        personal_id: String,\r\n        resume_title: String,\r\n        resume_academic: String,\r\n        resume_career: String,\r\n        resume_introduction: String,\r\n        resume_certificate: String,\r\n        resume_learning: String,\r\n        resume_desire: String,\r\n        resume_complete: String\r\n    ) {\r\n        val url = \"http://$IP_ADDRESS/android_resume_write_php.php\" // URL of the hosting server with PHP script\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val formBody = FormBody.Builder()\r\n            .add(\"personal_id\", personal_id) // ID\r\n            .add(\"resume_title\", resume_title) // Title\r\n            .add(\"resume_academic\", resume_academic) // Education\r\n            .add(\"resume_career\", resume_career) // Career\r\n            .add(\"resume_introduction\", resume_introduction) // Introduction\r\n            .add(\"resume_certificate\", resume_certificate) // Certification\r\n            .add(\"resume_learning\", resume_learning) // Education history\r\n            .add(\"resume_desire\", resume_desire) // Desired job position\r\n            .add(\"resume_complete\", resume_complete)\r\n            .build()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .post(formBody)\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n// Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n// Handle request success\r\n                val responseData = response.body?.string()\r\n            }\r\n        })\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt b/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt
---- a/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt	(revision ce2b0dccf4cda2dcf5293e2f68902070ce4490fe)
-+++ b/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt	(date 1690299845182)
-@@ -8,6 +8,9 @@
- import android.widget.TextView
- import android.widget.Toast
- import okhttp3.*
-+import org.json.JSONArray
-+import org.json.JSONException
-+import org.json.JSONObject
- import java.io.IOException
- 
- class ResumeChangeActivity : AppCompatActivity() {
-@@ -34,7 +37,7 @@
-         userId = intent.getStringExtra("userId") ?: ""
- 
-         val textID = findViewById<TextView>(R.id.tvchID)
--        textID.text = userId
-+        textID.text = resumeListNum.toString()
- 
-         editTextAcademic = findViewById(R.id.edtchAcademic)
-         editResumeTitle = findViewById(R.id.edtchTitle)
-@@ -97,6 +100,9 @@
- 
-             Toast.makeText(this, "이력서가 작성완료되었습니다", Toast.LENGTH_SHORT).show()
-         }
-+
-+        // 이력서 아이템 데이터 불러오기
-+        getResumeItemData(resumeListNum)
-     }
- 
-     private fun sendResumeData(
-@@ -143,4 +149,56 @@
-             }
-         })
-     }
-+
-+    private fun getResumeItemData(resumeListNum: Int) {
-+        val url = "http://$IP_ADDRESS/android_resume_change.php" // 데이터를 불러올 PHP 스크립트의 주소
-+
-+        val client = OkHttpClient()
-+
-+        val formBody = FormBody.Builder()
-+            .add("resumeListNum", resumeListNum.toString()) // 이력서 아이템의 resumeListNum 값을 전달
-+            .build()
-+
-+        val request = Request.Builder()
-+            .url(url)
-+            .post(formBody)
-+            .build()
-+
-+        client.newCall(request).enqueue(object : okhttp3.Callback {
-+            override fun onFailure(call: Call, e: IOException) {
-+                // Handle request failure
-+                e.printStackTrace()
-+            }
-+
-+            override fun onResponse(call: Call, response: Response) {
-+                val responseData = response.body?.string()
-+                // 이력서 아이템 데이터를 파싱하여 UI 업데이트
-+                runOnUiThread {
-+                    handleResumeItemData(responseData)
-+                }
-+            }
-+        })
-+    }
-+
-+    // 이력서 아이템 데이터를 처리하는 함수 추가
-+    private fun handleResumeItemData(responseData: String?) {
-+        try {
-+            val jsonArray = JSONArray(responseData) // JSONArray로 파싱
-+            if (jsonArray.length() > 0) {
-+                val resumeItemData = jsonArray.getJSONObject(0) // 첫 번째 JSONObject를 가져옴
-+                // 여기서 이력서 아이템 데이터를 파싱하여 UI에 표시하는 작업을 수행하면 됩니다.
-+                // 예를 들어, 다음과 같이 각 EditText에 데이터를 설정할 수 있습니다.
-+                editResumeTitle.setText(resumeItemData.optString("resumeTitle", ""))
-+                editTextAcademic.setText(resumeItemData.optString("resumeAcademic", ""))
-+                editTextCareer.setText(resumeItemData.optString("resumeCareer", ""))
-+                editTextIntroduction.setText(resumeItemData.optString("resumeIntroduction", ""))
-+                editTextCertificate.setText(resumeItemData.optString("resumeCertificate", ""))
-+                editTextEducation.setText(resumeItemData.optString("resumeLearning", ""))
-+                editTextDesire.setText(resumeItemData.optString("resumeDesire", ""))
-+            }
-+        } catch (e: JSONException) {
-+            // JSON 파싱 오류 처리
-+            e.printStackTrace()
-+        }
-+    }
- }
-\ No newline at end of file
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision ce2b0dccf4cda2dcf5293e2f68902070ce4490fe)
-+++ b/.idea/misc.xml	(date 1690296814206)
-@@ -1,7 +1,7 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="17" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오후_10_13_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오후_10_13_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오후_10_13_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오후_10_13_[Changes]/shelved.patch	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,2999 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,123 +0,0 @@
--Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
--+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689770913472)
--@@ -19,7 +19,7 @@
-- 
-- 
-- class P_loginFragment : Fragment() { //개인로그인
---    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
--+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
-- 
--     private var TAG = "phptest" // phptest log 찍으려는 용도
--     private lateinit var id_text_input_edit_text: EditText // id
--Index: app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.util.Xml\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ListView\r\nimport android.widget.Toast\r\nimport com.github.kittinunf.fuel.core.FuelManager\r\nimport com.github.kittinunf.fuel.core.extensions.authentication\r\nimport com.github.kittinunf.fuel.httpGet\r\nimport com.github.kittinunf.result.Result\r\nimport okhttp3.OkHttpClient\r\nimport org.json.JSONObject\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserException\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport org.w3c.dom.Document\r\nimport org.w3c.dom.Node\r\nimport org.w3c.dom.NodeList\r\nimport org.w3c.dom.Element\r\nimport javax.xml.parsers.DocumentBuilderFactory\r\n\r\nclass RegionFragment1 : Fragment() {\r\n\r\n    // API 인증키\r\n    val apiKey = \"WNLJYZLM2VZXTT2TZA9XR2VR1HK\"\r\n    val regionUrl = \"http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1\"\r\n\r\n    // 지역 대분류 리스트 (시/도)\r\n    private var superRegionList = mutableListOf<String>()\r\n    // 지역 중분류 리스트 (시/군/구)\r\n    private var middleRegionList = mutableListOf<String>()\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Fragment의 레이아웃 인플레이션\r\n        val rootView = inflater.inflate(R.layout.fragment_region, container, false)\r\n\r\n        // 지역 정보 리스트에 담기\r\n        fetchSRegionNames()\r\n        //fetchMRegionNames()\r\n\r\n        // ListView를 찾고, 어댑터 설정\r\n        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)\r\n        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)\r\n        listView1.adapter = adapter1\r\n        listView2.adapter = adapter2\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchSRegionNames() {\r\n        val params = listOf(\"returnType\" to \"XML\", \"target\" to \"CMCD\", \"authKey\" to apiKey, \"dtlGb\" to \"1\")\r\n\r\n        val request = Request.Builder()\r\n            .url(\"$regionUrl?${params.joinToString(\"&\")}\")\r\n            .get()\r\n            .header(\"Authorization\", \"Bearer $apiKey\")\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                println(e.message)\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (response.isSuccessful && responseData != null) {\r\n                    println(\"API 응답 데이터: $responseData\")\r\n                    try {\r\n                        val superRegionList = parseXmlResponse(responseData)\r\n                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김\r\n                        // TODO: 원하는 작업 수행\r\n                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리\r\n                        requireActivity().runOnUiThread {\r\n                            updateUIWithRegionData(superRegionList)\r\n                        }\r\n                    } catch (e: XmlPullParserException) {\r\n                        println(e.message)\r\n                    }\r\n                } else {\r\n                    println(\"서버 응답 실패: ${response.code}\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun parseXmlResponse(xmlData: String): List<String> {\r\n        superRegionList = mutableListOf<String>()\r\n        try {\r\n            val parser = Xml.newPullParser()\r\n            parser.setInput(StringReader(xmlData))\r\n\r\n            var eventType = parser.eventType\r\n            var currentRegionName: String? = null\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\") {\r\n                            currentRegionName = parser.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\" && currentRegionName != null) {\r\n                            superRegionList.add(currentRegionName)\r\n                            currentRegionName = null\r\n                        }\r\n                    }\r\n                }\r\n\r\n                eventType = parser.next()\r\n            }\r\n        } catch (e: XmlPullParserException) {\r\n            println(\"${e.message}\")\r\n        } catch (e: IOException) {\r\n            println(\"${e.message}\")\r\n        }\r\n\r\n        return superRegionList\r\n    }\r\n\r\n\r\n    private fun updateUIWithRegionData(superRegionList: List<String>) {\r\n        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        listView1.adapter = adapter1\r\n\r\n        // 시/도 버튼 클릭 시 이벤트 처리\r\n        listView1.setOnItemClickListener { _, _, position, _ ->\r\n            val item = superRegionList[position]\r\n            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가\r\n        }\r\n    }\r\n\r\n//    private fun fetchMRegionNames() {\r\n//        val workplaceUrl = \"http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do\"\r\n//        val params = listOf(\"returnType\" to \"JSON\", \"authKey\" to apiKey, \"callTp\" to \"L\")\r\n//\r\n//        FuelManager.instance.get(workplaceUrl, params)\r\n//            .authentication().bearer(apiKey)\r\n//            .responseString { _, _, result ->\r\n//                when (result) {\r\n//                    is Result.Success -> {\r\n//                        val responseData = result.get()\r\n//                        val jsonObject = JSONObject(responseData)\r\n//                        val workplaces = jsonObject.getJSONArray(\"dhsOpenEmpInfo\")\r\n//                        middleRegionList = mutableListOf<String>()\r\n//\r\n//                        for (i in 0 until workplaces.length()) {\r\n//                            val workplace = workplaces.getJSONObject(i)\r\n//                            //val workplaceName = workplace.getString(\"wkpl_nm\")\r\n//                            val jurisdictionLv2 = workplace.getString(\"wkpl_juris_lv2_nm\")\r\n//                            middleRegionList.add(\"$jurisdictionLv2\")\r\n//                        }\r\n//\r\n//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김\r\n//                        // TODO: 원하는 작업 수행\r\n//                    }\r\n//                    is Result.Failure -> {\r\n//                        println(\"근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.\")\r\n//                    }\r\n//                }\r\n//            }\r\n//    }\r\n\r\n\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
----- a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
--+++ b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(date 1689777993051)
--@@ -9,10 +9,6 @@
-- import android.widget.ArrayAdapter
-- import android.widget.ListView
-- import android.widget.Toast
---import com.github.kittinunf.fuel.core.FuelManager
---import com.github.kittinunf.fuel.core.extensions.authentication
---import com.github.kittinunf.fuel.httpGet
---import com.github.kittinunf.result.Result
-- import okhttp3.OkHttpClient
-- import org.json.JSONObject
-- import okhttp3.*
--Index: app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport okhttp3.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONException\r\nimport java.io.IOException\r\n\r\nclass ResumeFragment : Fragment() {\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n    private lateinit var userId: String // 사용자 아이디\r\n\r\n    private lateinit var buttonSubmit: Button\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var dataAdapter: DataAdapter\r\n    private val dataList: MutableList<Data> = mutableListOf()  // DB에서 가져온 데이터 리스트\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view = inflater.inflate(R.layout.fragment_resume, container, false)\r\n\r\n        // 사용자 아이디 받아오기\r\n        if (arguments != null) {\r\n            userId = arguments?.getString(\"userId\", \"\") ?: \"\"\r\n        }\r\n\r\n        val textID = view.findViewById<TextView>(R.id.tvID1)\r\n        textID.text = userId\r\n\r\n        // RecyclerView 초기화\r\n        recyclerView = view.findViewById(R.id.recyclerviewResume)\r\n        recyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n        dataAdapter = DataAdapter(dataList)\r\n        recyclerView.adapter = dataAdapter\r\n\r\n        // PHP 파일 URL\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_php.php\"\r\n\r\n        // HTTP 요청 보내기\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (responseData != null) {\r\n                    // 응답 데이터 처리\r\n                    handleResponseData(responseData)\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n\r\n        buttonSubmit = view.findViewById<Button>(R.id.buttonSubmit)\r\n        buttonSubmit.setOnClickListener {\r\n            val intent = Intent(requireContext(), ResumeWriteActivity::class.java)\r\n            intent.putExtra(\"userId\", userId)\r\n            startActivity(intent)\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    private fun handleResponseData(responseData: String) {\r\n        try {\r\n            // JSON 데이터 파싱\r\n            val jsonArray = JSONArray(responseData)\r\n            for (i in 0 until jsonArray.length()) {\r\n                val jsonObject = jsonArray.getJSONObject(i)\r\n                val resumeTitle = jsonObject.getString(\"resumeTitle\")\r\n                val writeStatus = jsonObject.getString(\"writeStatus\")\r\n                val data = Data(resumeTitle, writeStatus)\r\n                dataList.add(data)\r\n            }\r\n\r\n            // RecyclerView 갱신\r\n            dataAdapter.notifyDataSetChanged()\r\n        } catch (e: JSONException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n\r\ndata class Data(val resumeTitle: String, val writeStatus: String)\r\n\r\nclass DataAdapter(private val dataList: List<Data>) :\r\n    RecyclerView.Adapter<DataAdapter.ViewHolder>() {\r\n\r\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val textViewTitle: TextView = itemView.findViewById(R.id.tvResumeTitle)\r\n        val textViewStatus: TextView = itemView.findViewById(R.id.tvWriteStatus)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.resume_item, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val data = dataList[position]\r\n        holder.textViewTitle.text = data.resumeTitle\r\n        holder.textViewStatus.text = data.writeStatus\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return dataList.size\r\n    }\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
--+++ b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(date 1689778749490)
--@@ -13,12 +13,12 @@
-- import okhttp3.*
-- import org.json.JSONArray
-- import org.json.JSONException
--+import org.json.JSONObject
-- import java.io.IOException
-- 
-- class ResumeFragment : Fragment() {
---    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
--+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
--     private lateinit var userId: String // 사용자 아이디
---
--     private lateinit var buttonSubmit: Button
--     private lateinit var recyclerView: RecyclerView
--     private lateinit var dataAdapter: DataAdapter
--@@ -42,11 +42,15 @@
--         recyclerView.adapter = dataAdapter
-- 
--         // PHP 파일 URL
---        val phpUrl = "http://$IP_ADDRESS/android_resume_php.php"
--+        val phpUrl = "http://$IP_ADDRESS/android_resume2.php"
-- 
---        // HTTP 요청 보내기
--+        val requestBody = FormBody.Builder()
--+            .add("personal_id", userId)
--+            .build()
--+
--         val request = Request.Builder()
--             .url(phpUrl)
--+            .post(requestBody)
--             .build()
-- 
--         val client = OkHttpClient()
--@@ -77,18 +81,32 @@
-- 
--     private fun handleResponseData(responseData: String) {
--         try {
---            // JSON 데이터 파싱
---            val jsonArray = JSONArray(responseData)
---            for (i in 0 until jsonArray.length()) {
---                val jsonObject = jsonArray.getJSONObject(i)
---                val resumeTitle = jsonObject.getString("resumeTitle")
---                val writeStatus = jsonObject.getString("writeStatus")
--+            val jsonObject = JSONObject(responseData)
--+            // cnt1_result와 cnt2_result 값 추출
--+            val cnt1Result = jsonObject.getInt("cnt1_result")
--+            val cnt2Result = jsonObject.getInt("cnt2_result")
--+
--+            // UI 업데이트를 메인 스레드에서 수행
--+            requireActivity().runOnUiThread {
--+                val resumeTemCnt = requireView().findViewById<TextView>(R.id.textView_resume_temporary_count)
--+                val resumeComCnt = requireView().findViewById<TextView>(R.id.textView_resume_complete_count)
--+                resumeTemCnt.text = cnt1Result.toString()
--+                resumeComCnt.text = cnt2Result.toString()
--+            }
--+
--+            val dataArray = jsonObject.getJSONArray("data")
--+            for (i in 0 until dataArray.length()) {
--+                val dataObject = dataArray.getJSONObject(i)
--+                val resumeTitle = dataObject.getString("resume_title")
--+                val writeStatus = dataObject.getString("resume_complete")
--                 val data = Data(resumeTitle, writeStatus)
--                 dataList.add(data)
--             }
-- 
--             // RecyclerView 갱신
---            dataAdapter.notifyDataSetChanged()
--+            requireActivity().runOnUiThread {
--+                dataAdapter.notifyDataSetChanged()
--+            }
--         } catch (e: JSONException) {
--             e.printStackTrace()
--         }
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,1323 +0,0 @@
--Index: app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedFilteredFragment : Fragment() {\r\n    private lateinit var jobListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)\r\n\r\n        // UI 요소 초기화\r\n        jobListView = view.findViewById(R.id.jobListView)\r\n        prevButton = view.findViewById(R.id.prevButton)\r\n        nextButton = view.findViewById(R.id.nextButton)\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // API 호출 후 필터링된 값 출력\r\n        fetchJobData()\r\n        //추가예정\r\n        \r\n        return view\r\n    }\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter2(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity2.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity2 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity2::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(date 1689769772000)
--@@ -1,261 +1,261 @@
---package com.example.a23_hf069
---
---import android.content.Context
---import android.content.Intent
---import android.os.AsyncTask
---import android.os.Bundle
---import android.view.LayoutInflater
---import android.view.View
---import android.view.ViewGroup
---import android.widget.*
---import androidx.appcompat.app.AppCompatActivity
---import androidx.fragment.app.Fragment
---import org.xmlpull.v1.XmlPullParser
---import org.xmlpull.v1.XmlPullParserFactory
---import java.io.InputStream
---import java.net.HttpURLConnection
---import java.net.URL
---
---class WantedFilteredFragment : Fragment() {
---    private lateinit var jobListView: ListView
---    private lateinit var jobList: List<Job>
---    private lateinit var prevButton: Button
---    private lateinit var nextButton: Button
---    private var currentPage = 1
---
---    override fun onCreateView(
---        inflater: LayoutInflater,
---        container: ViewGroup?,
---        savedInstanceState: Bundle?
---    ): View? {
---        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
---
---        // UI 요소 초기화
---        jobListView = view.findViewById(R.id.jobListView)
---        prevButton = view.findViewById(R.id.prevButton)
---        nextButton = view.findViewById(R.id.nextButton)
---
---        // 이전 페이지 버튼 클릭 이벤트 처리
---        prevButton.setOnClickListener {
---            if (currentPage > 1) {
---                currentPage -= 1
---                fetchJobData()
---            }
---        }
---
---        // 다음 페이지 버튼 클릭 이벤트 처리
---        nextButton.setOnClickListener {
---            currentPage += 1
---            fetchJobData()
---        }
---
---        // API 호출 후 필터링된 값 출력
---        fetchJobData()
---        //추가예정
---        
---        return view
---    }
---
---    private fun fetchJobData() {
---        val url =
---            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
---        FetchJobData().execute(url)
---    }
---
---    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
---        override fun doInBackground(vararg urls: String): List<Job> {
---            val urlString = urls[0]
---            var result: List<Job> = emptyList()
---            var connection: HttpURLConnection? = null
---
---            try {
---                val url = URL(urlString)
---                connection = url.openConnection() as HttpURLConnection
---                connection.requestMethod = "GET"
---                connection.readTimeout = 15 * 1000
---                connection.connectTimeout = 15 * 1000
---
---                val responseCode = connection.responseCode
---                if (responseCode == HttpURLConnection.HTTP_OK) {
---                    val inputStream = connection.inputStream
---                    result = parseXml(inputStream)
---                }
---            } catch (e: Exception) {
---                e.printStackTrace()
---            } finally {
---                connection?.disconnect()
---            }
---
---            return result
---        }
---
---        private fun parseXml(inputStream: InputStream): List<Job> {
---            val jobList = mutableListOf<Job>()
---            val factory = XmlPullParserFactory.newInstance()
---            val xpp = factory.newPullParser()
---            xpp.setInput(inputStream, null)
---
---            var eventType = xpp.eventType
---            var company: String? = null // 회사명
---            var title: String? = null // 채용제목
---            var salTpNm: String? = null // 임금형태
---            var sal: String? = null // 급여
---            var region: String? = null // 근무지역
---            var holidayTpNm: String? = null // 근무형태
---            var minEdubg: String? = null // 최소학력
---            var career: String? = null // 경력
---            var closeDt: String? = null // 마감일자
---            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
---            var jobsCd: String? = null // 직종코드
---
---            while (eventType != XmlPullParser.END_DOCUMENT) {
---                when (eventType) {
---                    XmlPullParser.START_TAG -> {
---                        when (xpp.name) {
---                            "company" -> company = xpp.nextText()
---                            "title" -> title = xpp.nextText()
---                            "salTpNm" -> salTpNm = xpp.nextText()
---                            "sal" -> sal = xpp.nextText()
---                            "region" -> region = xpp.nextText()
---                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
---                            "minEdubg" -> minEdubg = xpp.nextText()
---                            "career" -> career = xpp.nextText()
---                            "closeDt" -> closeDt = xpp.nextText()
---                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
---                            "jobsCd" -> jobsCd = xpp.nextText()
---                        }
---                    }
---                    XmlPullParser.END_TAG -> {
---                        if (xpp.name == "wanted") {
---                            company?.let { c ->
---                                title?.let { t ->
---                                    jobList.add(
---                                        Job(
---                                            c, t, salTpNm, sal, region, holidayTpNm,
---                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
---                                        )
---                                    )
---                                }
---                            }
---                            company = null
---                            title = null
---                            salTpNm = null
---                            sal = null
---                            region = null
---                            holidayTpNm = null
---                            minEdubg = null
---                            career = null
---                            closeDt = null
---                            wantedMobileInfoUrl = null
---                            jobsCd = null
---                        }
---                    }
---                }
---                eventType = xpp.next()
---            }
---
---            return jobList
---        }
---
---        override fun onPostExecute(result: List<Job>) {
---            jobList = result
---            showJobList()
---        }
---    }
---
---    private fun showJobList() {
---        val adapter = CustomAdapter2(requireActivity(), jobList)
---        jobListView.adapter = adapter
---
---        jobListView.setOnItemClickListener { _, _, position, _ ->
---            val job = jobList[position]
---            val intent = JobDetailActivity2.newIntent(requireContext(), job)
---            startActivity(intent)
---        }
---    }
---}
---
---class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
---    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
---
---    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
---        val view =
---            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
---
---        val job = jobList[position]
---
---        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
---        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
---        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
---
---        titleTextView.text = job.title
---        companyTextView.text = job.company
---        regionContTextView.text = job.region
---
---        return view
---    }
---}
---
---class JobDetailActivity2 : AppCompatActivity() {
---    private lateinit var backButton: ImageView
---    private lateinit var company: TextView // 회사명
---    private lateinit var title: TextView // 제목
---    private lateinit var salTpNm: TextView // 임금형태
---    private lateinit var sal: TextView // 급여
---    private lateinit var region: TextView // 근무지역
---    private lateinit var holidayTpNm: TextView // 근무형태
---    private lateinit var minEdubg: TextView // 최소학력
---    private lateinit var career: TextView // 경력
---    private lateinit var closeDt: TextView // 마감일자
---    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
---    private lateinit var jobsCd: TextView // 직종코드
---
---    companion object {
---        private const val JOB_EXTRA = "job"
---
---        fun newIntent(context2: Context, job: Job): Intent {
---            return Intent(context2, JobDetailActivity2::class.java).apply {
---                putExtra(JOB_EXTRA, job)
---            }
---        }
---    }
---
---    override fun onCreate(savedInstanceState: Bundle?) {
---        super.onCreate(savedInstanceState)
---        setContentView(R.layout.activity_job_detail)
---
---        // 기본 툴바 숨기기
---        supportActionBar?.hide()
---
---        backButton = findViewById(R.id.backButton)
---        company = findViewById(R.id.company)
---        title = findViewById(R.id.title)
---        salTpNm = findViewById(R.id.salTpNm)
---        sal = findViewById(R.id.sal)
---        region = findViewById(R.id.region)
---        holidayTpNm = findViewById(R.id.holidayTpNm)
---        minEdubg = findViewById(R.id.minEdubg)
---        career = findViewById(R.id.career)
---        closeDt = findViewById(R.id.closeDt)
---        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
---        jobsCd = findViewById(R.id.jobsCd)
---
---        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
---
---        company.text = job?.company
---        title.text = job?.title
---        salTpNm.text = job?.salTpNm
---        sal.text = job?.sal
---        region.text = job?.region
---        holidayTpNm.text = job?.holidayTpNm
---        minEdubg.text = job?.minEdubg
---        career.text = job?.career
---        closeDt.text = job?.closeDt
---        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
---        jobsCd.text = job?.jobsCd
---
---        backButton.setOnClickListener {
---            onBackPressed()
---        }
---    }
---}
--\ No newline at end of file
--+//package com.example.a23_hf069
--+//
--+//import android.content.Context
--+//import android.content.Intent
--+//import android.os.AsyncTask
--+//import android.os.Bundle
--+//import android.view.LayoutInflater
--+//import android.view.View
--+//import android.view.ViewGroup
--+//import android.widget.*
--+//import androidx.appcompat.app.AppCompatActivity
--+//import androidx.fragment.app.Fragment
--+//import org.xmlpull.v1.XmlPullParser
--+//import org.xmlpull.v1.XmlPullParserFactory
--+//import java.io.InputStream
--+//import java.net.HttpURLConnection
--+//import java.net.URL
--+//
--+//class WantedFilteredFragment : Fragment() {
--+//    private lateinit var jobListView: ListView
--+//    private lateinit var jobList: List<Job>
--+//    private lateinit var prevButton: Button
--+//    private lateinit var nextButton: Button
--+//    private var currentPage = 1
--+//
--+//    override fun onCreateView(
--+//        inflater: LayoutInflater,
--+//        container: ViewGroup?,
--+//        savedInstanceState: Bundle?
--+//    ): View? {
--+//        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
--+//
--+//        // UI 요소 초기화
--+//        jobListView = view.findViewById(R.id.jobListView)
--+//        prevButton = view.findViewById(R.id.prevButton)
--+//        nextButton = view.findViewById(R.id.nextButton)
--+//
--+//        // 이전 페이지 버튼 클릭 이벤트 처리
--+//        prevButton.setOnClickListener {
--+//            if (currentPage > 1) {
--+//                currentPage -= 1
--+//                fetchJobData()
--+//            }
--+//        }
--+//
--+//        // 다음 페이지 버튼 클릭 이벤트 처리
--+//        nextButton.setOnClickListener {
--+//            currentPage += 1
--+//            fetchJobData()
--+//        }
--+//
--+//        // API 호출 후 필터링된 값 출력
--+//        fetchJobData()
--+//        //추가예정
--+//
--+//        return view
--+//    }
--+//
--+//    private fun fetchJobData() {
--+//        val url =
--+//            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
--+//        FetchJobData().execute(url)
--+//    }
--+//
--+//    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
--+//        override fun doInBackground(vararg urls: String): List<Job> {
--+//            val urlString = urls[0]
--+//            var result: List<Job> = emptyList()
--+//            var connection: HttpURLConnection? = null
--+//
--+//            try {
--+//                val url = URL(urlString)
--+//                connection = url.openConnection() as HttpURLConnection
--+//                connection.requestMethod = "GET"
--+//                connection.readTimeout = 15 * 1000
--+//                connection.connectTimeout = 15 * 1000
--+//
--+//                val responseCode = connection.responseCode
--+//                if (responseCode == HttpURLConnection.HTTP_OK) {
--+//                    val inputStream = connection.inputStream
--+//                    result = parseXml(inputStream)
--+//                }
--+//            } catch (e: Exception) {
--+//                e.printStackTrace()
--+//            } finally {
--+//                connection?.disconnect()
--+//            }
--+//
--+//            return result
--+//        }
--+//
--+//        private fun parseXml(inputStream: InputStream): List<Job> {
--+//            val jobList = mutableListOf<Job>()
--+//            val factory = XmlPullParserFactory.newInstance()
--+//            val xpp = factory.newPullParser()
--+//            xpp.setInput(inputStream, null)
--+//
--+//            var eventType = xpp.eventType
--+//            var company: String? = null // 회사명
--+//            var title: String? = null // 채용제목
--+//            var salTpNm: String? = null // 임금형태
--+//            var sal: String? = null // 급여
--+//            var region: String? = null // 근무지역
--+//            var holidayTpNm: String? = null // 근무형태
--+//            var minEdubg: String? = null // 최소학력
--+//            var career: String? = null // 경력
--+//            var closeDt: String? = null // 마감일자
--+//            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
--+//            var jobsCd: String? = null // 직종코드
--+//
--+//            while (eventType != XmlPullParser.END_DOCUMENT) {
--+//                when (eventType) {
--+//                    XmlPullParser.START_TAG -> {
--+//                        when (xpp.name) {
--+//                            "company" -> company = xpp.nextText()
--+//                            "title" -> title = xpp.nextText()
--+//                            "salTpNm" -> salTpNm = xpp.nextText()
--+//                            "sal" -> sal = xpp.nextText()
--+//                            "region" -> region = xpp.nextText()
--+//                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
--+//                            "minEdubg" -> minEdubg = xpp.nextText()
--+//                            "career" -> career = xpp.nextText()
--+//                            "closeDt" -> closeDt = xpp.nextText()
--+//                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
--+//                            "jobsCd" -> jobsCd = xpp.nextText()
--+//                        }
--+//                    }
--+//                    XmlPullParser.END_TAG -> {
--+//                        if (xpp.name == "wanted") {
--+//                            company?.let { c ->
--+//                                title?.let { t ->
--+//                                    jobList.add(
--+//                                        Job(
--+//                                            c, t, salTpNm, sal, region, holidayTpNm,
--+//                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
--+//                                        )
--+//                                    )
--+//                                }
--+//                            }
--+//                            company = null
--+//                            title = null
--+//                            salTpNm = null
--+//                            sal = null
--+//                            region = null
--+//                            holidayTpNm = null
--+//                            minEdubg = null
--+//                            career = null
--+//                            closeDt = null
--+//                            wantedMobileInfoUrl = null
--+//                            jobsCd = null
--+//                        }
--+//                    }
--+//                }
--+//                eventType = xpp.next()
--+//            }
--+//
--+//            return jobList
--+//        }
--+//
--+//        override fun onPostExecute(result: List<Job>) {
--+//            jobList = result
--+//            showJobList()
--+//        }
--+//    }
--+//
--+//    private fun showJobList() {
--+//        val adapter = CustomAdapter2(requireActivity(), jobList)
--+//        jobListView.adapter = adapter
--+//
--+//        jobListView.setOnItemClickListener { _, _, position, _ ->
--+//            val job = jobList[position]
--+//            val intent = JobDetailActivity2.newIntent(requireContext(), job)
--+//            startActivity(intent)
--+//        }
--+//    }
--+//}
--+//
--+//class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
--+//    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
--+//
--+//    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
--+//        val view =
--+//            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
--+//
--+//        val job = jobList[position]
--+//
--+//        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
--+//        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
--+//        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
--+//
--+//        titleTextView.text = job.title
--+//        companyTextView.text = job.company
--+//        regionContTextView.text = job.region
--+//
--+//        return view
--+//    }
--+//}
--+//
--+//class JobDetailActivity2 : AppCompatActivity() {
--+//    private lateinit var backButton: ImageView
--+//    private lateinit var company: TextView // 회사명
--+//    private lateinit var title: TextView // 제목
--+//    private lateinit var salTpNm: TextView // 임금형태
--+//    private lateinit var sal: TextView // 급여
--+//    private lateinit var region: TextView // 근무지역
--+//    private lateinit var holidayTpNm: TextView // 근무형태
--+//    private lateinit var minEdubg: TextView // 최소학력
--+//    private lateinit var career: TextView // 경력
--+//    private lateinit var closeDt: TextView // 마감일자
--+//    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
--+//    private lateinit var jobsCd: TextView // 직종코드
--+//
--+//    companion object {
--+//        private const val JOB_EXTRA = "job"
--+//
--+//        fun newIntent(context2: Context, job: Job): Intent {
--+//            return Intent(context2, JobDetailActivity2::class.java).apply {
--+//                putExtra(JOB_EXTRA, job)
--+//            }
--+//        }
--+//    }
--+//
--+//    override fun onCreate(savedInstanceState: Bundle?) {
--+//        super.onCreate(savedInstanceState)
--+//        setContentView(R.layout.activity_job_detail)
--+//
--+//        // 기본 툴바 숨기기
--+//        supportActionBar?.hide()
--+//
--+//        backButton = findViewById(R.id.backButton)
--+//        company = findViewById(R.id.company)
--+//        title = findViewById(R.id.title)
--+//        salTpNm = findViewById(R.id.salTpNm)
--+//        sal = findViewById(R.id.sal)
--+//        region = findViewById(R.id.region)
--+//        holidayTpNm = findViewById(R.id.holidayTpNm)
--+//        minEdubg = findViewById(R.id.minEdubg)
--+//        career = findViewById(R.id.career)
--+//        closeDt = findViewById(R.id.closeDt)
--+//        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
--+//        jobsCd = findViewById(R.id.jobsCd)
--+//
--+//        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
--+//
--+//        company.text = job?.company
--+//        title.text = job?.title
--+//        salTpNm.text = job?.salTpNm
--+//        sal.text = job?.sal
--+//        region.text = job?.region
--+//        holidayTpNm.text = job?.holidayTpNm
--+//        minEdubg.text = job?.minEdubg
--+//        career.text = job?.career
--+//        closeDt.text = job?.closeDt
--+//        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
--+//        jobsCd.text = job?.jobsCd
--+//
--+//        backButton.setOnClickListener {
--+//            onBackPressed()
--+//        }
--+//    }
--+//}
--\ No newline at end of file
--Index: app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.util.Xml\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ListView\r\nimport android.widget.Toast\r\nimport com.github.kittinunf.fuel.core.FuelManager\r\nimport com.github.kittinunf.fuel.core.extensions.authentication\r\nimport com.github.kittinunf.fuel.httpGet\r\nimport com.github.kittinunf.result.Result\r\nimport okhttp3.OkHttpClient\r\nimport org.json.JSONObject\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserException\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport org.w3c.dom.Document\r\nimport org.w3c.dom.Node\r\nimport org.w3c.dom.NodeList\r\nimport org.w3c.dom.Element\r\nimport javax.xml.parsers.DocumentBuilderFactory\r\n\r\nclass RegionFragment1 : Fragment() {\r\n\r\n    // API 인증키\r\n    val apiKey = \"WNLJYZLM2VZXTT2TZA9XR2VR1HK\"\r\n    val regionUrl = \"http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1\"\r\n\r\n    // 지역 대분류 리스트 (시/도)\r\n    private var superRegionList = mutableListOf<String>()\r\n    // 지역 중분류 리스트 (시/군/구)\r\n    private var middleRegionList = mutableListOf<String>()\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Fragment의 레이아웃 인플레이션\r\n        val rootView = inflater.inflate(R.layout.fragment_region, container, false)\r\n\r\n        // 지역 정보 리스트에 담기\r\n        fetchSRegionNames()\r\n        //fetchMRegionNames()\r\n\r\n        // ListView를 찾고, 어댑터 설정\r\n        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)\r\n        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)\r\n        listView1.adapter = adapter1\r\n        listView2.adapter = adapter2\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchSRegionNames() {\r\n        val params = listOf(\"returnType\" to \"XML\", \"target\" to \"CMCD\", \"authKey\" to apiKey, \"dtlGb\" to \"1\")\r\n\r\n        val request = Request.Builder()\r\n            .url(\"$regionUrl?${params.joinToString(\"&\")}\")\r\n            .get()\r\n            .header(\"Authorization\", \"Bearer $apiKey\")\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                println(e.message)\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (response.isSuccessful && responseData != null) {\r\n                    println(\"API 응답 데이터: $responseData\")\r\n                    try {\r\n                        val superRegionList = parseXmlResponse(responseData)\r\n                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김\r\n                        // TODO: 원하는 작업 수행\r\n                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리\r\n                        requireActivity().runOnUiThread {\r\n                            updateUIWithRegionData(superRegionList)\r\n                        }\r\n                    } catch (e: XmlPullParserException) {\r\n                        println(e.message)\r\n                    }\r\n                } else {\r\n                    println(\"서버 응답 실패: ${response.code}\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun parseXmlResponse(xmlData: String): List<String> {\r\n        superRegionList = mutableListOf<String>()\r\n        try {\r\n            val parser = Xml.newPullParser()\r\n            parser.setInput(StringReader(xmlData))\r\n\r\n            var eventType = parser.eventType\r\n            var currentRegionName: String? = null\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\") {\r\n                            currentRegionName = parser.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\" && currentRegionName != null) {\r\n                            superRegionList.add(currentRegionName)\r\n                            currentRegionName = null\r\n                        }\r\n                    }\r\n                }\r\n\r\n                eventType = parser.next()\r\n            }\r\n        } catch (e: XmlPullParserException) {\r\n            println(\"${e.message}\")\r\n        } catch (e: IOException) {\r\n            println(\"${e.message}\")\r\n        }\r\n\r\n        return superRegionList\r\n    }\r\n\r\n\r\n    private fun updateUIWithRegionData(superRegionList: List<String>) {\r\n        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        listView1.adapter = adapter1\r\n\r\n        // 시/도 버튼 클릭 시 이벤트 처리\r\n        listView1.setOnItemClickListener { _, _, position, _ ->\r\n            val item = superRegionList[position]\r\n            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가\r\n        }\r\n    }\r\n\r\n//    private fun fetchMRegionNames() {\r\n//        val workplaceUrl = \"http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do\"\r\n//        val params = listOf(\"returnType\" to \"JSON\", \"authKey\" to apiKey, \"callTp\" to \"L\")\r\n//\r\n//        FuelManager.instance.get(workplaceUrl, params)\r\n//            .authentication().bearer(apiKey)\r\n//            .responseString { _, _, result ->\r\n//                when (result) {\r\n//                    is Result.Success -> {\r\n//                        val responseData = result.get()\r\n//                        val jsonObject = JSONObject(responseData)\r\n//                        val workplaces = jsonObject.getJSONArray(\"dhsOpenEmpInfo\")\r\n//                        middleRegionList = mutableListOf<String>()\r\n//\r\n//                        for (i in 0 until workplaces.length()) {\r\n//                            val workplace = workplaces.getJSONObject(i)\r\n//                            //val workplaceName = workplace.getString(\"wkpl_nm\")\r\n//                            val jurisdictionLv2 = workplace.getString(\"wkpl_juris_lv2_nm\")\r\n//                            middleRegionList.add(\"$jurisdictionLv2\")\r\n//                        }\r\n//\r\n//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김\r\n//                        // TODO: 원하는 작업 수행\r\n//                    }\r\n//                    is Result.Failure -> {\r\n//                        println(\"근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.\")\r\n//                    }\r\n//                }\r\n//            }\r\n//    }\r\n\r\n\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
----- a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(date 1689769910000)
--@@ -1,187 +1,187 @@
---package com.example.a23_hf069
---
---import android.os.Bundle
---import android.util.Xml
---import androidx.fragment.app.Fragment
---import android.view.LayoutInflater
---import android.view.View
---import android.view.ViewGroup
---import android.widget.ArrayAdapter
---import android.widget.ListView
---import android.widget.Toast
---import com.github.kittinunf.fuel.core.FuelManager
---import com.github.kittinunf.fuel.core.extensions.authentication
---import com.github.kittinunf.fuel.httpGet
---import com.github.kittinunf.result.Result
---import okhttp3.OkHttpClient
---import org.json.JSONObject
---import okhttp3.*
---import org.json.JSONException
---import org.xmlpull.v1.XmlPullParser
---import org.xmlpull.v1.XmlPullParserException
---import java.io.IOException
---import java.io.StringReader
---import androidx.appcompat.app.AppCompatActivity
---import android.util.Log
---import android.widget.Button
---import org.w3c.dom.Document
---import org.w3c.dom.Node
---import org.w3c.dom.NodeList
---import org.w3c.dom.Element
---import javax.xml.parsers.DocumentBuilderFactory
---
---class RegionFragment1 : Fragment() {
---
---    // API 인증키
---    val apiKey = "WNLJYZLM2VZXTT2TZA9XR2VR1HK"
---    val regionUrl = "http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1"
---
---    // 지역 대분류 리스트 (시/도)
---    private var superRegionList = mutableListOf<String>()
---    // 지역 중분류 리스트 (시/군/구)
---    private var middleRegionList = mutableListOf<String>()
---    override fun onCreateView(
---        inflater: LayoutInflater, container: ViewGroup?,
---        savedInstanceState: Bundle?
---    ): View? {
---        // Fragment의 레이아웃 인플레이션
---        val rootView = inflater.inflate(R.layout.fragment_region, container, false)
---
---        // 지역 정보 리스트에 담기
---        fetchSRegionNames()
---        //fetchMRegionNames()
---
---        // ListView를 찾고, 어댑터 설정
---        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)
---        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)
---        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
---        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)
---        listView1.adapter = adapter1
---        listView2.adapter = adapter2
---
---
---        return rootView
---    }
---
---    private fun fetchSRegionNames() {
---        val params = listOf("returnType" to "XML", "target" to "CMCD", "authKey" to apiKey, "dtlGb" to "1")
---
---        val request = Request.Builder()
---            .url("$regionUrl?${params.joinToString("&")}")
---            .get()
---            .header("Authorization", "Bearer $apiKey")
---            .build()
---
---        val client = OkHttpClient()
---        client.newCall(request).enqueue(object : Callback {
---            override fun onFailure(call: Call, e: IOException) {
---                println(e.message)
---            }
---
---            override fun onResponse(call: Call, response: Response) {
---                val responseData = response.body?.string()
---                if (response.isSuccessful && responseData != null) {
---                    println("API 응답 데이터: $responseData")
---                    try {
---                        val superRegionList = parseXmlResponse(responseData)
---                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김
---                        // TODO: 원하는 작업 수행
---                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리
---                        requireActivity().runOnUiThread {
---                            updateUIWithRegionData(superRegionList)
---                        }
---                    } catch (e: XmlPullParserException) {
---                        println(e.message)
---                    }
---                } else {
---                    println("서버 응답 실패: ${response.code}")
---                }
---            }
---        })
---    }
---
---    private fun parseXmlResponse(xmlData: String): List<String> {
---        superRegionList = mutableListOf<String>()
---        try {
---            val parser = Xml.newPullParser()
---            parser.setInput(StringReader(xmlData))
---
---            var eventType = parser.eventType
---            var currentRegionName: String? = null
---
---            while (eventType != XmlPullParser.END_DOCUMENT) {
---                when (eventType) {
---                    XmlPullParser.START_TAG -> {
---                        val tagName = parser.name
---
---                        if (tagName == "regionNm") {
---                            currentRegionName = parser.nextText()
---                        }
---                    }
---                    XmlPullParser.END_TAG -> {
---                        val tagName = parser.name
---
---                        if (tagName == "regionNm" && currentRegionName != null) {
---                            superRegionList.add(currentRegionName)
---                            currentRegionName = null
---                        }
---                    }
---                }
---
---                eventType = parser.next()
---            }
---        } catch (e: XmlPullParserException) {
---            println("${e.message}")
---        } catch (e: IOException) {
---            println("${e.message}")
---        }
---
---        return superRegionList
---    }
---
---
---    private fun updateUIWithRegionData(superRegionList: List<String>) {
---        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)
---        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
---        listView1.adapter = adapter1
---
---        // 시/도 버튼 클릭 시 이벤트 처리
---        listView1.setOnItemClickListener { _, _, position, _ ->
---            val item = superRegionList[position]
---            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가
---        }
---    }
---
---//    private fun fetchMRegionNames() {
---//        val workplaceUrl = "http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do"
---//        val params = listOf("returnType" to "JSON", "authKey" to apiKey, "callTp" to "L")
--+//package com.example.a23_hf069
--+//
--+//import android.os.Bundle
--+//import android.util.Xml
--+//import androidx.fragment.app.Fragment
--+//import android.view.LayoutInflater
--+//import android.view.View
--+//import android.view.ViewGroup
--+//import android.widget.ArrayAdapter
--+//import android.widget.ListView
--+//import android.widget.Toast
--+//import com.github.kittinunf.fuel.core.FuelManager
--+//import com.github.kittinunf.fuel.core.extensions.authentication
--+//import com.github.kittinunf.fuel.httpGet
--+//import com.github.kittinunf.result.Result
--+//import okhttp3.OkHttpClient
--+//import org.json.JSONObject
--+//import okhttp3.*
--+//import org.json.JSONException
--+//import org.xmlpull.v1.XmlPullParser
--+//import org.xmlpull.v1.XmlPullParserException
--+//import java.io.IOException
--+//import java.io.StringReader
--+//import androidx.appcompat.app.AppCompatActivity
--+//import android.util.Log
--+//import android.widget.Button
--+//import org.w3c.dom.Document
--+//import org.w3c.dom.Node
--+//import org.w3c.dom.NodeList
--+//import org.w3c.dom.Element
--+//import javax.xml.parsers.DocumentBuilderFactory
--+//
--+//class RegionFragment1 : Fragment() {
--+//
--+//    // API 인증키
--+//    val apiKey = "WNLJYZLM2VZXTT2TZA9XR2VR1HK"
--+//    val regionUrl = "http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1"
--+//
--+//    // 지역 대분류 리스트 (시/도)
--+//    private var superRegionList = mutableListOf<String>()
--+//    // 지역 중분류 리스트 (시/군/구)
--+//    private var middleRegionList = mutableListOf<String>()
--+//    override fun onCreateView(
--+//        inflater: LayoutInflater, container: ViewGroup?,
--+//        savedInstanceState: Bundle?
--+//    ): View? {
--+//        // Fragment의 레이아웃 인플레이션
--+//        val rootView = inflater.inflate(R.layout.fragment_region, container, false)
--+//
--+//        // 지역 정보 리스트에 담기
--+//        fetchSRegionNames()
--+//        //fetchMRegionNames()
--+//
--+//        // ListView를 찾고, 어댑터 설정
--+//        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)
--+//        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)
--+//        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
--+//        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)
--+//        listView1.adapter = adapter1
--+//        listView2.adapter = adapter2
-- //
---//        FuelManager.instance.get(workplaceUrl, params)
---//            .authentication().bearer(apiKey)
---//            .responseString { _, _, result ->
---//                when (result) {
---//                    is Result.Success -> {
---//                        val responseData = result.get()
---//                        val jsonObject = JSONObject(responseData)
---//                        val workplaces = jsonObject.getJSONArray("dhsOpenEmpInfo")
---//                        middleRegionList = mutableListOf<String>()
-- //
---//                        for (i in 0 until workplaces.length()) {
---//                            val workplace = workplaces.getJSONObject(i)
---//                            //val workplaceName = workplace.getString("wkpl_nm")
---//                            val jurisdictionLv2 = workplace.getString("wkpl_juris_lv2_nm")
---//                            middleRegionList.add("$jurisdictionLv2")
---//                        }
--+//        return rootView
--+//    }
-- //
---//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김
--+//    private fun fetchSRegionNames() {
--+//        val params = listOf("returnType" to "XML", "target" to "CMCD", "authKey" to apiKey, "dtlGb" to "1")
--+//
--+//        val request = Request.Builder()
--+//            .url("$regionUrl?${params.joinToString("&")}")
--+//            .get()
--+//            .header("Authorization", "Bearer $apiKey")
--+//            .build()
--+//
--+//        val client = OkHttpClient()
--+//        client.newCall(request).enqueue(object : Callback {
--+//            override fun onFailure(call: Call, e: IOException) {
--+//                println(e.message)
--+//            }
--+//
--+//            override fun onResponse(call: Call, response: Response) {
--+//                val responseData = response.body?.string()
--+//                if (response.isSuccessful && responseData != null) {
--+//                    println("API 응답 데이터: $responseData")
--+//                    try {
--+//                        val superRegionList = parseXmlResponse(responseData)
--+//                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김
-- //                        // TODO: 원하는 작업 수행
--+//                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리
--+//                        requireActivity().runOnUiThread {
--+//                            updateUIWithRegionData(superRegionList)
--+//                        }
--+//                    } catch (e: XmlPullParserException) {
--+//                        println(e.message)
--+//                    }
--+//                } else {
--+//                    println("서버 응답 실패: ${response.code}")
--+//                }
--+//            }
--+//        })
--+//    }
--+//
--+//    private fun parseXmlResponse(xmlData: String): List<String> {
--+//        superRegionList = mutableListOf<String>()
--+//        try {
--+//            val parser = Xml.newPullParser()
--+//            parser.setInput(StringReader(xmlData))
--+//
--+//            var eventType = parser.eventType
--+//            var currentRegionName: String? = null
--+//
--+//            while (eventType != XmlPullParser.END_DOCUMENT) {
--+//                when (eventType) {
--+//                    XmlPullParser.START_TAG -> {
--+//                        val tagName = parser.name
--+//
--+//                        if (tagName == "regionNm") {
--+//                            currentRegionName = parser.nextText()
--+//                        }
-- //                    }
---//                    is Result.Failure -> {
---//                        println("근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.")
--+//                    XmlPullParser.END_TAG -> {
--+//                        val tagName = parser.name
--+//
--+//                        if (tagName == "regionNm" && currentRegionName != null) {
--+//                            superRegionList.add(currentRegionName)
--+//                            currentRegionName = null
--+//                        }
-- //                    }
-- //                }
--+//
--+//                eventType = parser.next()
-- //            }
--+//        } catch (e: XmlPullParserException) {
--+//            println("${e.message}")
--+//        } catch (e: IOException) {
--+//            println("${e.message}")
--+//        }
--+//
--+//        return superRegionList
-- //    }
---
---
---}
--\ No newline at end of file
--+//
--+//
--+//    private fun updateUIWithRegionData(superRegionList: List<String>) {
--+//        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)
--+//        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
--+//        listView1.adapter = adapter1
--+//
--+//        // 시/도 버튼 클릭 시 이벤트 처리
--+//        listView1.setOnItemClickListener { _, _, position, _ ->
--+//            val item = superRegionList[position]
--+//            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가
--+//        }
--+//    }
--+//
--+////    private fun fetchMRegionNames() {
--+////        val workplaceUrl = "http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do"
--+////        val params = listOf("returnType" to "JSON", "authKey" to apiKey, "callTp" to "L")
--+////
--+////        FuelManager.instance.get(workplaceUrl, params)
--+////            .authentication().bearer(apiKey)
--+////            .responseString { _, _, result ->
--+////                when (result) {
--+////                    is Result.Success -> {
--+////                        val responseData = result.get()
--+////                        val jsonObject = JSONObject(responseData)
--+////                        val workplaces = jsonObject.getJSONArray("dhsOpenEmpInfo")
--+////                        middleRegionList = mutableListOf<String>()
--+////
--+////                        for (i in 0 until workplaces.length()) {
--+////                            val workplace = workplaces.getJSONObject(i)
--+////                            //val workplaceName = workplace.getString("wkpl_nm")
--+////                            val jurisdictionLv2 = workplace.getString("wkpl_juris_lv2_nm")
--+////                            middleRegionList.add("$jurisdictionLv2")
--+////                        }
--+////
--+////                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김
--+////                        // TODO: 원하는 작업 수행
--+////                    }
--+////                    is Result.Failure -> {
--+////                        println("근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.")
--+////                    }
--+////                }
--+////            }
--+////    }
--+//
--+//
--+//}
--\ No newline at end of file
--Index: app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport androidx.viewpager.widget.ViewPager\r\nimport com.google.android.material.tabs.TabLayout\r\nimport kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*\r\n\r\nclass WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {\r\n    private lateinit var filter: Button\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var viewPager: ViewPager\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_list, container, false)\r\n\r\n        val adapter = PagerAdapter(childFragmentManager)\r\n        adapter.addFragment(WantedRequestingFragment(), \"즉시지원\")\r\n        adapter.addFragment(WantedWorkNetFragment(), \"워크넷 채용공고\")\r\n\r\n        viewPager = view.findViewById<ViewPager>(R.id.viewpager01)\r\n        viewPager.adapter = adapter\r\n\r\n        tabLayout = view.findViewById<TabLayout>(R.id.tablayout01)\r\n        tabLayout.setupWithViewPager(viewPager)\r\n        tabLayout.addOnTabSelectedListener(this)\r\n\r\n        filter = view.findViewById<Button>(R.id.conditionButton)\r\n        filter.setOnClickListener() {\r\n            val fragment1 = WantedFilteringFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, fragment1)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        searchContent = view.findViewById<EditText>(R.id.searchContent)\r\n        searchContent.setOnTouchListener { _, _ ->\r\n            val currentTab = tabLayout.selectedTabPosition\r\n            if (currentTab == 1) {\r\n                val wantedWorkNetSearchFragment = WantedWorkNetSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedWorkNetSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"워크넷 채용공고 검색\"\r\n            } else if (currentTab == 0) {\r\n                val wantedRequestingSearchFragment = WantedRequestingSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedRequestingSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n            }\r\n            true\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    override fun onTabSelected(tab: TabLayout.Tab?) {\r\n        val currentTab = tab?.position\r\n        if (currentTab == 1) {\r\n            searchContent.hint = \"워크넷 채용공고 검색\"\r\n        } else if (currentTab == 0) {\r\n            searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n        }\r\n    }\r\n\r\n    override fun onTabUnselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n\r\n    override fun onTabReselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(date 1689769956000)
--@@ -12,7 +12,7 @@
-- import android.widget.EditText
-- import androidx.viewpager.widget.ViewPager
-- import com.google.android.material.tabs.TabLayout
---import kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*
--+//import kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*
-- 
-- class WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {
--     private lateinit var filter: Button
--@@ -38,13 +38,13 @@
--         tabLayout.addOnTabSelectedListener(this)
-- 
--         filter = view.findViewById<Button>(R.id.conditionButton)
---        filter.setOnClickListener() {
---            val fragment1 = WantedFilteringFragment()
---            requireActivity().supportFragmentManager.beginTransaction()
---                .replace(R.id.fl_container, fragment1)
---                .addToBackStack(null)
---                .commit()
---        }
--+//        filter.setOnClickListener() {
--+//            val fragment1 = WantedFilteringFragment()
--+//            requireActivity().supportFragmentManager.beginTransaction()
--+//                .replace(R.id.fl_container, fragment1)
--+//                .addToBackStack(null)
--+//                .commit()
--+//        }
-- 
--         searchContent = view.findViewById<EditText>(R.id.searchContent)
--         searchContent.setOnTouchListener { _, _ ->
--Index: app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.KeyEvent\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.net.URLEncoder\r\n\r\nclass WantedWorkNetSearchFragment : Fragment() {\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var searchButton: Button\r\n    private lateinit var searchListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private var currentPage = 1\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        val rootView = inflater.inflate(R.layout.fragment_wanted_work_net_search, container, false)\r\n\r\n        searchContent = rootView.findViewById(R.id.searchContent)\r\n        searchListView = rootView.findViewById(R.id.searchListView)\r\n        prevButton = rootView.findViewById(R.id.prevButton)\r\n        nextButton = rootView.findViewById(R.id.nextButton)\r\n\r\n        searchContent.setOnKeyListener { _, keyCode, event ->\r\n            if (event.action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {\r\n                fetchJobDataWithSearch()\r\n                return@setOnKeyListener true\r\n            }\r\n            return@setOnKeyListener false\r\n        }\r\n\r\n        val closeButton = rootView.findViewById<ImageButton>(R.id.backButton)\r\n        closeButton.setOnClickListener {\r\n            requireActivity().onBackPressed()\r\n        }\r\n\r\n        prevButton.visibility = View.GONE\r\n        nextButton.visibility = View.GONE\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobDataWithSearch()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobDataWithSearch()\r\n        }\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchJobDataWithSearch() {\r\n        val searchKeyword = searchContent.text.toString().trim()\r\n\r\n        if (searchKeyword.isNotEmpty()) {\r\n            val encodedKeyword = URLEncoder.encode(searchKeyword, \"UTF-8\")\r\n            val url = \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10&keyword=$encodedKeyword\"\r\n            FetchJobData().execute(url)\r\n        } else {\r\n            // 검색어가 비어있을 때 처리할 내용\r\n        }\r\n    }\r\n\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            if (currentPage > 1 && result.isEmpty()) {\r\n                // nextButton을 누른 후에 빈 리스트가 반환된 경우, \"마지막 페이지입니다\" 토스트 메시지를 표시합니다.\r\n                Toast.makeText(requireContext(), \"마지막 페이지입니다\", Toast.LENGTH_SHORT).show()\r\n                currentPage -= 1 // 이전 페이지로 돌아갑니다.\r\n                nextButton.isEnabled = false // nextButton을 비활성화합니다.\r\n            } else {\r\n                jobList = result\r\n                showJobList()\r\n\r\n                if (searchContent.text.toString().trim().isEmpty()) {\r\n                    // EditText에 입력값이 없을 때\r\n                    prevButton.visibility = View.GONE\r\n                    nextButton.visibility = View.GONE\r\n                } else {\r\n                    // EditText에 입력값이 있을 때\r\n                    if (currentPage > 1 || jobList.size >= 10) {\r\n                        prevButton.visibility = View.VISIBLE\r\n                    } else {\r\n                        prevButton.visibility = View.GONE\r\n                    }\r\n                    nextButton.visibility = View.VISIBLE\r\n                }\r\n\r\n                nextButton.isEnabled = true // nextButton을 활성화합니다.\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter(this, jobList)\r\n        searchListView.adapter = adapter\r\n\r\n        searchListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(date 1689770542000)
--@@ -205,7 +205,7 @@
--     }
-- 
--     private fun showJobList() {
---        val adapter = CustomAdapter(this, jobList)
--+        val adapter = CustomAdapter(this,jobList)
--         searchListView.adapter = adapter
-- 
--         searchListView.setOnItemClickListener { _, _, position, _ ->
--Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\nimport kotlinx.android.synthetic.main.activity_job_detail.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689769772000)
--@@ -1,169 +1,169 @@
---package com.example.a23_hf069
---
---import android.content.Intent
---import android.os.Bundle
---import android.view.LayoutInflater
---import android.view.View
---import android.view.ViewGroup
---import android.widget.Button
---import androidx.appcompat.app.AppCompatActivity
---import androidx.fragment.app.Fragment
---import androidx.fragment.app.setFragmentResult
---import kotlinx.android.synthetic.main.activity_job_detail.*
---import kotlinx.android.synthetic.main.fragment_wanted_filtering.*
---import kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*
---
---
---class WantedFilteringFragment : Fragment()  {
---    lateinit var region_btn: Button
---
---    lateinit var edu_btn1 : Button
---    lateinit var edu_btn2 : Button
---    lateinit var edu_btn3 : Button
---    lateinit var edu_btn4 : Button
---    lateinit var edu_btn5 : Button
---    lateinit var edu_btn6 : Button
---
---    lateinit var career_btn1 : Button
---    lateinit var career_btn2 : Button
---    lateinit var career_btn3 : Button
---
---    lateinit var closeDt_btn1 : Button
---    lateinit var closeDt_btn2 : Button
---    lateinit var closeDt_btn3 : Button
---    lateinit var closeDt_btn4 : Button
---    lateinit var closeDt_btn5 : Button
---    lateinit var closeDt_btn6 : Button
---
---    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
---    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
---    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
---
---    private val selectedEducationList: MutableSet<Int> = mutableSetOf()
---    private val selectedCareerList: MutableSet<Int> = mutableSetOf()
---    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()
---
---    lateinit var complete_btn1 : Button //완료버튼
---
---    // 화면 띄우기
---    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
---        inflater: LayoutInflater,
---        container: ViewGroup?,
---        savedInstanceState: Bundle?
---
---    ): View? {
---        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)
---    }
---
---    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
---        super.onViewCreated(view, savedInstanceState)
---        //지역
---        region_btn = view.findViewById<Button>(R.id.region_btn)
---
---        //학력 체크
---        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체
---        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교
---        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교
---        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교
---        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)
---        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)
---
---        //경력 체크
---        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체
---        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입
---        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력
---
---        //마감일 체크
---        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)
---        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)
---        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)
---        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)
---        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)
---        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)
---
---
---       /* region_btn.setOnClickListener {
---            val regionFragment = RegionFragment()
---            requireActivity().supportFragmentManager.beginTransaction()
---                .replace(R.id.fl_container, regionFragment)
---                .addToBackStack(null)
---                .commit()
---        }
---*/
---        // 학력 버튼 클릭 리스너
---        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체
---        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교
---        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교
---        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교
---        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)
---        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)
---
---        // 경력 버튼 클릭 리스너
---        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체
---        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입
---        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력
---
---        // 마감일 버튼 클릭 리스너
---        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체
---        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내
---        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내
---        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내
---        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내
---        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내
---
---    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
---        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)
---        complete_btn1.setOnClickListener {
---            val wantedFilteredFragment = WantedFilteredFragment()
---            requireActivity().supportFragmentManager.beginTransaction()
---                .replace(R.id.fl_container, wantedFilteredFragment)
---                .addToBackStack(null)
---                .commit()
---        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
---    }
---
---    private fun SelectedEducation(selected: Int) {
---        if (selectedEducation == 0 || selected > selectedEducation) {
---            selectedEducation = selected
---            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
---            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
---                // 0번과 같은 결과
---
---
---            }
---        }
---        filterItems()
---    }
---
---    private fun SelectedCareer(selected: Int) {
---        if (selectedCareer == 0 || selected > selectedCareer) {
---            selectedCareer = selected
---        }
---        filterItems()
---    }
---
---    private fun SelectedCloseDate(selected: Int) {
---        if (selectedCloseDate == 0 || selected > selectedCloseDate) {
---            selectedCloseDate = selected
---        }
---        filterItems()
---    }
---
---    private fun filterItems() {
---        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)
---        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
---        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
---        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
---
---        // 세 리스트에서 중복되는 값들을 찾습니다.
---        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
---
---        for (item in intersectedItems) {
---            println(item)
---            // 필요한 처리를 수행합니다.
---        }
---    }
---
---
---
---    }
--\ No newline at end of file
--+//package com.example.a23_hf069
--+//
--+//import android.content.Intent
--+//import android.os.Bundle
--+//import android.view.LayoutInflater
--+//import android.view.View
--+//import android.view.ViewGroup
--+//import android.widget.Button
--+//import androidx.appcompat.app.AppCompatActivity
--+//import androidx.fragment.app.Fragment
--+//import androidx.fragment.app.setFragmentResult
--+//import kotlinx.android.synthetic.main.activity_job_detail.*
--+//import kotlinx.android.synthetic.main.fragment_wanted_filtering.*
--+//import kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*
--+//
--+//
--+//class WantedFilteringFragment : Fragment()  {
--+//    lateinit var region_btn: Button
--+//
--+//    lateinit var edu_btn1 : Button
--+//    lateinit var edu_btn2 : Button
--+//    lateinit var edu_btn3 : Button
--+//    lateinit var edu_btn4 : Button
--+//    lateinit var edu_btn5 : Button
--+//    lateinit var edu_btn6 : Button
--+//
--+//    lateinit var career_btn1 : Button
--+//    lateinit var career_btn2 : Button
--+//    lateinit var career_btn3 : Button
--+//
--+//    lateinit var closeDt_btn1 : Button
--+//    lateinit var closeDt_btn2 : Button
--+//    lateinit var closeDt_btn3 : Button
--+//    lateinit var closeDt_btn4 : Button
--+//    lateinit var closeDt_btn5 : Button
--+//    lateinit var closeDt_btn6 : Button
--+//
--+//    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
--+//    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
--+//    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
--+//
--+//    private val selectedEducationList: MutableSet<Int> = mutableSetOf()
--+//    private val selectedCareerList: MutableSet<Int> = mutableSetOf()
--+//    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()
--+//
--+//    lateinit var complete_btn1 : Button //완료버튼
--+//
--+//    // 화면 띄우기
--+//    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
--+//        inflater: LayoutInflater,
--+//        container: ViewGroup?,
--+//        savedInstanceState: Bundle?
--+//
--+//    ): View? {
--+//        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)
--+//    }
--+//
--+//    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--+//        super.onViewCreated(view, savedInstanceState)
--+//        //지역
--+//        region_btn = view.findViewById<Button>(R.id.region_btn)
--+//
--+//        //학력 체크
--+//        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체
--+//        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교
--+//        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교
--+//        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교
--+//        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)
--+//        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)
--+//
--+//        //경력 체크
--+//        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체
--+//        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입
--+//        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력
--+//
--+//        //마감일 체크
--+//        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)
--+//        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)
--+//        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)
--+//        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)
--+//        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)
--+//        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)
--+//
--+//
--+//       /* region_btn.setOnClickListener {
--+//            val regionFragment = RegionFragment()
--+//            requireActivity().supportFragmentManager.beginTransaction()
--+//                .replace(R.id.fl_container, regionFragment)
--+//                .addToBackStack(null)
--+//                .commit()
--+//        }
--+//*/
--+//        // 학력 버튼 클릭 리스너
--+//        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체
--+//        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교
--+//        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교
--+//        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교
--+//        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)
--+//        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)
--+//
--+//        // 경력 버튼 클릭 리스너
--+//        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체
--+//        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입
--+//        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력
--+//
--+//        // 마감일 버튼 클릭 리스너
--+//        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체
--+//        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내
--+//        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내
--+//        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내
--+//        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내
--+//        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내
--+//
--+//    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
--+//        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)
--+//        complete_btn1.setOnClickListener {
--+//            val wantedFilteredFragment = WantedFilteredFragment()
--+//            requireActivity().supportFragmentManager.beginTransaction()
--+//                .replace(R.id.fl_container, wantedFilteredFragment)
--+//                .addToBackStack(null)
--+//                .commit()
--+//        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
--+//    }
--+//
--+//    private fun SelectedEducation(selected: Int) {
--+//        if (selectedEducation == 0 || selected > selectedEducation) {
--+//            selectedEducation = selected
--+//            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
--+//            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
--+//                // 0번과 같은 결과
--+//
--+//
--+//            }
--+//        }
--+//        filterItems()
--+//    }
--+//
--+//    private fun SelectedCareer(selected: Int) {
--+//        if (selectedCareer == 0 || selected > selectedCareer) {
--+//            selectedCareer = selected
--+//        }
--+//        filterItems()
--+//    }
--+//
--+//    private fun SelectedCloseDate(selected: Int) {
--+//        if (selectedCloseDate == 0 || selected > selectedCloseDate) {
--+//            selectedCloseDate = selected
--+//        }
--+//        filterItems()
--+//    }
--+//
--+//    private fun filterItems() {
--+//        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)
--+//        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
--+//        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
--+//        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
--+//
--+//        // 세 리스트에서 중복되는 값들을 찾습니다.
--+//        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
--+//
--+//        for (item in intersectedItems) {
--+//            println(item)
--+//            // 필요한 처리를 수행합니다.
--+//        }
--+//    }
--+//
--+//
--+//
--+//    }
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,343 +0,0 @@
--Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\n\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 4acb2686690de835ef2c01370537fdfbb3963fa6)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689772807216)
--@@ -1,18 +1,33 @@
-- package com.example.a23_hf069
-- 
--+import android.content.Context
-- import android.content.Intent
--+import android.os.AsyncTask
-- import android.os.Bundle
-- import android.view.LayoutInflater
-- import android.view.View
-- import android.view.ViewGroup
--+import android.widget.ArrayAdapter
-- import android.widget.Button
--+import android.widget.ImageView
--+import android.widget.ListView
--+import android.widget.TextView
-- import androidx.appcompat.app.AppCompatActivity
--+import androidx.core.content.ContentProviderCompat.requireContext
--+import androidx.core.content.ContextCompat.startActivity
-- import androidx.fragment.app.Fragment
-- import androidx.fragment.app.setFragmentResult
---
--+import org.xmlpull.v1.XmlPullParser
--+import org.xmlpull.v1.XmlPullParserFactory
--+import java.io.InputStream
--+import java.net.HttpURLConnection
--+import java.net.URL
-- 
-- 
-- class WantedFilteringFragment : Fragment()  {
--+    private lateinit var jobList: List<Job>
--+    private lateinit var jobListView: ListView
--+
--     lateinit var region_btn: Button
-- 
--     lateinit var edu_btn1 : Button
--@@ -34,7 +49,7 @@
--     lateinit var closeDt_btn6 : Button
-- 
--     private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
---    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
--+    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력
--     private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
-- 
--     private val selectedEducationList: MutableSet<Int> = mutableSetOf()
--@@ -44,7 +59,7 @@
--     lateinit var complete_btn1 : Button //완료버튼
-- 
--     // 화면 띄우기
---    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
--+    override fun onCreateView( // onCreateView 함수 오버라이드
--         inflater: LayoutInflater,
--         container: ViewGroup?,
--         savedInstanceState: Bundle?
--@@ -126,8 +141,7 @@
--             // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
--             if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
--                 // 0번과 같은 결과
---
---
--+                selectedEducationList.add(0)
--             }
--         }
--         filterItems()
--@@ -153,15 +167,247 @@
--         val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
--         val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
-- 
--+        //각각의 리스트에 담긴 Int형의 데이터들을 String 타입으로 변환
--+        val convertedEducationList = filteredEducationList.map { value ->
--+            when (value) {
--+                0 -> "00"
--+                1 -> "01"
--+                2 -> "02"
--+                3 -> "03"
--+                4 -> "04"
--+                5 -> "05"
--+                else -> {}
--+            }
--+        }
--+        val convertedCareerList = filteredCareerList.map { value ->
--+            when (value) {
--+                0 -> "N"
--+                1 -> "E"
--+                2 -> "Z"
--+
--+                else -> {}
--+                } // 나머지 값은 그대로 문자열로 변환
--+            }
--+        }
--+        val convertedCloseDateList = filteredCloseDateList.map { value ->
--+            when (value) {
--+                0 -> "00"
--+                1 -> "N"
--+                // 추가적인 변환 규칙이 필요한 경우에는 추가하면 됩니다.
--+                else -> value.toString() // 나머지 값은 그대로 문자열로 변환
--+            }
--+        }
--+
--+
--+        //각각의 리스트에서 추출된 값을 파싱된 xml파일과 대조 -> 리스트에 담기 -> 중복 건 찾기
--+
--+
--+
--         // 세 리스트에서 중복되는 값들을 찾습니다.
---        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
--+        //val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
-- 
---        for (item in intersectedItems) {
--+        /*for (item in intersectedItems) {
--             println(item)
--             // 필요한 처리를 수행합니다.
--+        }*/
--+
--+
--+    //워크넷 api 채용목록 xml파일 parsing하는 코드
--+    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
--+        override fun doInBackground(vararg urls: String): List<Job> {
--+            val urlString = urls[0]
--+            var result: List<Job> = emptyList()
--+            var connection: HttpURLConnection? = null
--+
--+            try {
--+                val url = URL(urlString)
--+                connection = url.openConnection() as HttpURLConnection
--+                connection.requestMethod = "GET"
--+                connection.readTimeout = 15 * 1000
--+                connection.connectTimeout = 15 * 1000
--+
--+                val responseCode = connection.responseCode
--+                if (responseCode == HttpURLConnection.HTTP_OK) {
--+                    val inputStream = connection.inputStream
--+                    result = parseXml(inputStream)
--+                }
--+            } catch (e: Exception) {
--+                e.printStackTrace()
--+            } finally {
--+                connection?.disconnect()
--+            }
--+
--+            return result
--+        }
--+
--+        private fun parseXml(inputStream: InputStream): List<Job> {
--+            val jobList = mutableListOf<Job>()
--+            val factory = XmlPullParserFactory.newInstance()
--+            val xpp = factory.newPullParser()
--+            xpp.setInput(inputStream, null)
--+
--+            var eventType = xpp.eventType
--+            var company: String? = null // 회사명
--+            var title: String? = null // 채용제목
--+            var salTpNm: String? = null // 임금형태
--+            var sal: String? = null // 급여
--+            var region: String? = null // 근무지역
--+            var holidayTpNm: String? = null // 근무형태
--+            var minEdubg: String? = null // 최소학력
--+            var career: String? = null // 경력
--+            var closeDt: String? = null // 마감일자
--+            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
--+            var jobsCd: String? = null // 직종코드
--+
--+            while (eventType != XmlPullParser.END_DOCUMENT) {
--+                when (eventType) {
--+                    XmlPullParser.START_TAG -> {
--+                        when (xpp.name) {
--+                            "company" -> company = xpp.nextText()
--+                            "title" -> title = xpp.nextText()
--+                            "salTpNm" -> salTpNm = xpp.nextText()
--+                            "sal" -> sal = xpp.nextText()
--+                            "region" -> region = xpp.nextText()
--+                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
--+                            "minEdubg" -> minEdubg = xpp.nextText()
--+                            "career" -> career = xpp.nextText()
--+                            "closeDt" -> closeDt = xpp.nextText()
--+                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
--+                            "jobsCd" -> jobsCd = xpp.nextText()
--+                        }
--+                    }
--+                    XmlPullParser.END_TAG -> {
--+                        if (xpp.name == "wanted") {
--+                            company?.let { c ->
--+                                title?.let { t ->
--+                                    jobList.add(
--+                                        Job(
--+                                            c, t, salTpNm, sal, region, holidayTpNm,
--+                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
--+                                        )
--+                                    )
--+                                }
--+                            }
--+                            company = null
--+                            title = null
--+                            salTpNm = null
--+                            sal = null
--+                            region = null
--+                            holidayTpNm = null
--+                            minEdubg = null
--+                            career = null
--+                            closeDt = null
--+                            wantedMobileInfoUrl = null
--+                            jobsCd = null
--+                        }
--+                    }
--+                }
--+                eventType = xpp.next()
--+            }
--+
--+            return jobList
--+        }
--+
--+        override fun onPostExecute(result: List<Job>) {
--+            jobList = result
--+            showJobList()
--         }
--     }
-- 
--+    private fun showJobList() {
--+        val adapter = CustomAdapter2(requireActivity(), jobList)
--+        jobListView.adapter = adapter
-- 
--+        jobListView.setOnItemClickListener { _, _, position, _ ->
--+            val job = jobList[position]
--+            val intent = JobDetailActivity2.newIntent(requireContext(), job)
--+            startActivity(intent)
--+        }
--+    }
--+}
--+
--+class CustomAdapter3(private val context3: Context, private val jobList: List<Job>) :
--+    ArrayAdapter<Job>(context3, R.layout.job_item, jobList) {
--+
--+    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
--+        val view =
--+            convertView ?: LayoutInflater.from(context3).inflate(R.layout.job_item, parent, false)
--+
--+        val job = jobList[position]
--+
--+        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
--+        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
--+        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
--+
--+        titleTextView.text = job.title
--+        companyTextView.text = job.company
--+        regionContTextView.text = job.region
--+
--+        return view
--+    }
--+}
--+
--+class JobDetailActivity3 : AppCompatActivity() {
--+    private lateinit var backButton: ImageView
--+    private lateinit var company: TextView // 회사명
--+    private lateinit var title: TextView // 제목
--+    private lateinit var salTpNm: TextView // 임금형태
--+    private lateinit var sal: TextView // 급여
--+    private lateinit var region: TextView // 근무지역
--+    private lateinit var holidayTpNm: TextView // 근무형태
--+    private lateinit var minEdubg: TextView // 최소학력
--+    private lateinit var career: TextView // 경력
--+    private lateinit var closeDt: TextView // 마감일자
--+    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
--+    private lateinit var jobsCd: TextView // 직종코드
--+
--+    companion object {
--+        private const val JOB_EXTRA = "job"
--+
--+        fun newIntent(context2: Context, job: Job): Intent {
--+            return Intent(context2, JobDetailActivity2::class.java).apply {
--+                putExtra(JOB_EXTRA, job)
--+            }
--+        }
--+    }
--+
--+    override fun onCreate(savedInstanceState: Bundle?) {
--+        super.onCreate(savedInstanceState)
--+        setContentView(R.layout.activity_job_detail)
--+
--+        // 기본 툴바 숨기기
--+        supportActionBar?.hide()
--+
--+        backButton = findViewById(R.id.backButton)
--+        company = findViewById(R.id.company)
--+        title = findViewById(R.id.title)
--+        salTpNm = findViewById(R.id.salTpNm)
--+        sal = findViewById(R.id.sal)
--+        region = findViewById(R.id.region)
--+        holidayTpNm = findViewById(R.id.holidayTpNm)
--+        minEdubg = findViewById(R.id.minEdubg)
--+        career = findViewById(R.id.career)
--+        closeDt = findViewById(R.id.closeDt)
--+        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
--+        jobsCd = findViewById(R.id.jobsCd)
--+
--+        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
--+
--+        company.text = job?.company
--+        title.text = job?.title
--+        salTpNm.text = job?.salTpNm
--+        sal.text = job?.sal
--+        region.text = job?.region
--+        holidayTpNm.text = job?.holidayTpNm
--+        minEdubg.text = job?.minEdubg
--+        career.text = job?.career
--+        closeDt.text = job?.closeDt
--+        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
--+        jobsCd.text = job?.jobsCd
--+
--+        backButton.setOnClickListener {
--+            onBackPressed()
--+        }
--+    }
-- 
--     }
--\ No newline at end of file
--Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 4acb2686690de835ef2c01370537fdfbb3963fa6)
--+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689770942657)
--@@ -19,7 +19,7 @@
-- 
-- 
-- class P_loginFragment : Fragment() { //개인로그인
---    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
--+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
-- 
--     private var TAG = "phptest" // phptest log 찍으려는 용도
--     private lateinit var id_text_input_edit_text: EditText // id
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__11_50__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__11_50__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__11_50__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__11_50__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]" date="1689778289343" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-19 오후 11:50 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__9_42__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__9_42__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__9_42__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__9_42__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]" date="1689770586086" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-19 오후 9:42 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20__12_02__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20__12_02__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20__12_02__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20__12_02__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]" date="1689778945766" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-20 오전 12:02 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_12__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_12__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_12__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_12__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]" date="1689772441867" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-19 오후 10:12 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_24__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_24__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_24__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_24__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]" date="1689773051970" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-19 오후 10:24 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,1031 +0,0 @@
--Index: app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>//package com.example.a23_hf069\r\n//\r\n//import android.content.Context\r\n//import android.content.Intent\r\n//import android.os.AsyncTask\r\n//import android.os.Bundle\r\n//import android.view.LayoutInflater\r\n//import android.view.View\r\n//import android.view.ViewGroup\r\n//import android.widget.*\r\n//import androidx.appcompat.app.AppCompatActivity\r\n//import androidx.fragment.app.Fragment\r\n//import org.xmlpull.v1.XmlPullParser\r\n//import org.xmlpull.v1.XmlPullParserFactory\r\n//import java.io.InputStream\r\n//import java.net.HttpURLConnection\r\n//import java.net.URL\r\n//\r\n//class WantedFilteredFragment : Fragment() {\r\n//    private lateinit var jobListView: ListView\r\n//    private lateinit var jobList: List<Job>\r\n//    private lateinit var prevButton: Button\r\n//    private lateinit var nextButton: Button\r\n//    private var currentPage = 1\r\n//\r\n//    override fun onCreateView(\r\n//        inflater: LayoutInflater,\r\n//        container: ViewGroup?,\r\n//        savedInstanceState: Bundle?\r\n//    ): View? {\r\n//        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)\r\n//\r\n//        // UI 요소 초기화\r\n//        jobListView = view.findViewById(R.id.jobListView)\r\n//        prevButton = view.findViewById(R.id.prevButton)\r\n//        nextButton = view.findViewById(R.id.nextButton)\r\n//\r\n//        // 이전 페이지 버튼 클릭 이벤트 처리\r\n//        prevButton.setOnClickListener {\r\n//            if (currentPage > 1) {\r\n//                currentPage -= 1\r\n//                fetchJobData()\r\n//            }\r\n//        }\r\n//\r\n//        // 다음 페이지 버튼 클릭 이벤트 처리\r\n//        nextButton.setOnClickListener {\r\n//            currentPage += 1\r\n//            fetchJobData()\r\n//        }\r\n//\r\n//        // API 호출 후 필터링된 값 출력\r\n//        fetchJobData()\r\n//        //추가예정\r\n//\r\n//        return view\r\n//    }\r\n//\r\n//    private fun fetchJobData() {\r\n//        val url =\r\n//            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n//        FetchJobData().execute(url)\r\n//    }\r\n//\r\n//    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n//        override fun doInBackground(vararg urls: String): List<Job> {\r\n//            val urlString = urls[0]\r\n//            var result: List<Job> = emptyList()\r\n//            var connection: HttpURLConnection? = null\r\n//\r\n//            try {\r\n//                val url = URL(urlString)\r\n//                connection = url.openConnection() as HttpURLConnection\r\n//                connection.requestMethod = \"GET\"\r\n//                connection.readTimeout = 15 * 1000\r\n//                connection.connectTimeout = 15 * 1000\r\n//\r\n//                val responseCode = connection.responseCode\r\n//                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n//                    val inputStream = connection.inputStream\r\n//                    result = parseXml(inputStream)\r\n//                }\r\n//            } catch (e: Exception) {\r\n//                e.printStackTrace()\r\n//            } finally {\r\n//                connection?.disconnect()\r\n//            }\r\n//\r\n//            return result\r\n//        }\r\n//\r\n//        private fun parseXml(inputStream: InputStream): List<Job> {\r\n//            val jobList = mutableListOf<Job>()\r\n//            val factory = XmlPullParserFactory.newInstance()\r\n//            val xpp = factory.newPullParser()\r\n//            xpp.setInput(inputStream, null)\r\n//\r\n//            var eventType = xpp.eventType\r\n//            var company: String? = null // 회사명\r\n//            var title: String? = null // 채용제목\r\n//            var salTpNm: String? = null // 임금형태\r\n//            var sal: String? = null // 급여\r\n//            var region: String? = null // 근무지역\r\n//            var holidayTpNm: String? = null // 근무형태\r\n//            var minEdubg: String? = null // 최소학력\r\n//            var career: String? = null // 경력\r\n//            var closeDt: String? = null // 마감일자\r\n//            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n//            var jobsCd: String? = null // 직종코드\r\n//\r\n//            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n//                when (eventType) {\r\n//                    XmlPullParser.START_TAG -> {\r\n//                        when (xpp.name) {\r\n//                            \"company\" -> company = xpp.nextText()\r\n//                            \"title\" -> title = xpp.nextText()\r\n//                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n//                            \"sal\" -> sal = xpp.nextText()\r\n//                            \"region\" -> region = xpp.nextText()\r\n//                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n//                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n//                            \"career\" -> career = xpp.nextText()\r\n//                            \"closeDt\" -> closeDt = xpp.nextText()\r\n//                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n//                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n//                        }\r\n//                    }\r\n//                    XmlPullParser.END_TAG -> {\r\n//                        if (xpp.name == \"wanted\") {\r\n//                            company?.let { c ->\r\n//                                title?.let { t ->\r\n//                                    jobList.add(\r\n//                                        Job(\r\n//                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n//                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n//                                        )\r\n//                                    )\r\n//                                }\r\n//                            }\r\n//                            company = null\r\n//                            title = null\r\n//                            salTpNm = null\r\n//                            sal = null\r\n//                            region = null\r\n//                            holidayTpNm = null\r\n//                            minEdubg = null\r\n//                            career = null\r\n//                            closeDt = null\r\n//                            wantedMobileInfoUrl = null\r\n//                            jobsCd = null\r\n//                        }\r\n//                    }\r\n//                }\r\n//                eventType = xpp.next()\r\n//            }\r\n//\r\n//            return jobList\r\n//        }\r\n//\r\n//        override fun onPostExecute(result: List<Job>) {\r\n//            jobList = result\r\n//            showJobList()\r\n//        }\r\n//    }\r\n//\r\n//    private fun showJobList() {\r\n//        val adapter = CustomAdapter2(requireActivity(), jobList)\r\n//        jobListView.adapter = adapter\r\n//\r\n//        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n//            val job = jobList[position]\r\n//            val intent = JobDetailActivity2.newIntent(requireContext(), job)\r\n//            startActivity(intent)\r\n//        }\r\n//    }\r\n//}\r\n//\r\n//class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :\r\n//    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {\r\n//\r\n//    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n//        val view =\r\n//            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)\r\n//\r\n//        val job = jobList[position]\r\n//\r\n//        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n//        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n//        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n//\r\n//        titleTextView.text = job.title\r\n//        companyTextView.text = job.company\r\n//        regionContTextView.text = job.region\r\n//\r\n//        return view\r\n//    }\r\n//}\r\n//\r\n//class JobDetailActivity2 : AppCompatActivity() {\r\n//    private lateinit var backButton: ImageView\r\n//    private lateinit var company: TextView // 회사명\r\n//    private lateinit var title: TextView // 제목\r\n//    private lateinit var salTpNm: TextView // 임금형태\r\n//    private lateinit var sal: TextView // 급여\r\n//    private lateinit var region: TextView // 근무지역\r\n//    private lateinit var holidayTpNm: TextView // 근무형태\r\n//    private lateinit var minEdubg: TextView // 최소학력\r\n//    private lateinit var career: TextView // 경력\r\n//    private lateinit var closeDt: TextView // 마감일자\r\n//    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n//    private lateinit var jobsCd: TextView // 직종코드\r\n//\r\n//    companion object {\r\n//        private const val JOB_EXTRA = \"job\"\r\n//\r\n//        fun newIntent(context2: Context, job: Job): Intent {\r\n//            return Intent(context2, JobDetailActivity2::class.java).apply {\r\n//                putExtra(JOB_EXTRA, job)\r\n//            }\r\n//        }\r\n//    }\r\n//\r\n//    override fun onCreate(savedInstanceState: Bundle?) {\r\n//        super.onCreate(savedInstanceState)\r\n//        setContentView(R.layout.activity_job_detail)\r\n//\r\n//        // 기본 툴바 숨기기\r\n//        supportActionBar?.hide()\r\n//\r\n//        backButton = findViewById(R.id.backButton)\r\n//        company = findViewById(R.id.company)\r\n//        title = findViewById(R.id.title)\r\n//        salTpNm = findViewById(R.id.salTpNm)\r\n//        sal = findViewById(R.id.sal)\r\n//        region = findViewById(R.id.region)\r\n//        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n//        minEdubg = findViewById(R.id.minEdubg)\r\n//        career = findViewById(R.id.career)\r\n//        closeDt = findViewById(R.id.closeDt)\r\n//        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n//        jobsCd = findViewById(R.id.jobsCd)\r\n//\r\n//        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n//\r\n//        company.text = job?.company\r\n//        title.text = job?.title\r\n//        salTpNm.text = job?.salTpNm\r\n//        sal.text = job?.sal\r\n//        region.text = job?.region\r\n//        holidayTpNm.text = job?.holidayTpNm\r\n//        minEdubg.text = job?.minEdubg\r\n//        career.text = job?.career\r\n//        closeDt.text = job?.closeDt\r\n//        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n//        jobsCd.text = job?.jobsCd\r\n//\r\n//        backButton.setOnClickListener {\r\n//            onBackPressed()\r\n//        }\r\n//    }\r\n//}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(date 1689777975732)
--@@ -1,261 +1,260 @@
---//package com.example.a23_hf069
---//
---//import android.content.Context
---//import android.content.Intent
---//import android.os.AsyncTask
---//import android.os.Bundle
---//import android.view.LayoutInflater
---//import android.view.View
---//import android.view.ViewGroup
---//import android.widget.*
---//import androidx.appcompat.app.AppCompatActivity
---//import androidx.fragment.app.Fragment
---//import org.xmlpull.v1.XmlPullParser
---//import org.xmlpull.v1.XmlPullParserFactory
---//import java.io.InputStream
---//import java.net.HttpURLConnection
---//import java.net.URL
---//
---//class WantedFilteredFragment : Fragment() {
---//    private lateinit var jobListView: ListView
---//    private lateinit var jobList: List<Job>
---//    private lateinit var prevButton: Button
---//    private lateinit var nextButton: Button
---//    private var currentPage = 1
---//
---//    override fun onCreateView(
---//        inflater: LayoutInflater,
---//        container: ViewGroup?,
---//        savedInstanceState: Bundle?
---//    ): View? {
---//        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
---//
---//        // UI 요소 초기화
---//        jobListView = view.findViewById(R.id.jobListView)
---//        prevButton = view.findViewById(R.id.prevButton)
---//        nextButton = view.findViewById(R.id.nextButton)
---//
---//        // 이전 페이지 버튼 클릭 이벤트 처리
---//        prevButton.setOnClickListener {
---//            if (currentPage > 1) {
---//                currentPage -= 1
---//                fetchJobData()
---//            }
---//        }
---//
---//        // 다음 페이지 버튼 클릭 이벤트 처리
---//        nextButton.setOnClickListener {
---//            currentPage += 1
---//            fetchJobData()
---//        }
---//
---//        // API 호출 후 필터링된 값 출력
---//        fetchJobData()
---//        //추가예정
---//
---//        return view
---//    }
---//
---//    private fun fetchJobData() {
---//        val url =
---//            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
---//        FetchJobData().execute(url)
---//    }
---//
---//    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
---//        override fun doInBackground(vararg urls: String): List<Job> {
---//            val urlString = urls[0]
---//            var result: List<Job> = emptyList()
---//            var connection: HttpURLConnection? = null
---//
---//            try {
---//                val url = URL(urlString)
---//                connection = url.openConnection() as HttpURLConnection
---//                connection.requestMethod = "GET"
---//                connection.readTimeout = 15 * 1000
---//                connection.connectTimeout = 15 * 1000
---//
---//                val responseCode = connection.responseCode
---//                if (responseCode == HttpURLConnection.HTTP_OK) {
---//                    val inputStream = connection.inputStream
---//                    result = parseXml(inputStream)
---//                }
---//            } catch (e: Exception) {
---//                e.printStackTrace()
---//            } finally {
---//                connection?.disconnect()
---//            }
---//
---//            return result
---//        }
---//
---//        private fun parseXml(inputStream: InputStream): List<Job> {
---//            val jobList = mutableListOf<Job>()
---//            val factory = XmlPullParserFactory.newInstance()
---//            val xpp = factory.newPullParser()
---//            xpp.setInput(inputStream, null)
---//
---//            var eventType = xpp.eventType
---//            var company: String? = null // 회사명
---//            var title: String? = null // 채용제목
---//            var salTpNm: String? = null // 임금형태
---//            var sal: String? = null // 급여
---//            var region: String? = null // 근무지역
---//            var holidayTpNm: String? = null // 근무형태
---//            var minEdubg: String? = null // 최소학력
---//            var career: String? = null // 경력
---//            var closeDt: String? = null // 마감일자
---//            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
---//            var jobsCd: String? = null // 직종코드
---//
---//            while (eventType != XmlPullParser.END_DOCUMENT) {
---//                when (eventType) {
---//                    XmlPullParser.START_TAG -> {
---//                        when (xpp.name) {
---//                            "company" -> company = xpp.nextText()
---//                            "title" -> title = xpp.nextText()
---//                            "salTpNm" -> salTpNm = xpp.nextText()
---//                            "sal" -> sal = xpp.nextText()
---//                            "region" -> region = xpp.nextText()
---//                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
---//                            "minEdubg" -> minEdubg = xpp.nextText()
---//                            "career" -> career = xpp.nextText()
---//                            "closeDt" -> closeDt = xpp.nextText()
---//                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
---//                            "jobsCd" -> jobsCd = xpp.nextText()
---//                        }
---//                    }
---//                    XmlPullParser.END_TAG -> {
---//                        if (xpp.name == "wanted") {
---//                            company?.let { c ->
---//                                title?.let { t ->
---//                                    jobList.add(
---//                                        Job(
---//                                            c, t, salTpNm, sal, region, holidayTpNm,
---//                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
---//                                        )
---//                                    )
---//                                }
---//                            }
---//                            company = null
---//                            title = null
---//                            salTpNm = null
---//                            sal = null
---//                            region = null
---//                            holidayTpNm = null
---//                            minEdubg = null
---//                            career = null
---//                            closeDt = null
---//                            wantedMobileInfoUrl = null
---//                            jobsCd = null
---//                        }
---//                    }
---//                }
---//                eventType = xpp.next()
---//            }
---//
---//            return jobList
---//        }
---//
---//        override fun onPostExecute(result: List<Job>) {
---//            jobList = result
---//            showJobList()
---//        }
---//    }
---//
---//    private fun showJobList() {
---//        val adapter = CustomAdapter2(requireActivity(), jobList)
---//        jobListView.adapter = adapter
---//
---//        jobListView.setOnItemClickListener { _, _, position, _ ->
---//            val job = jobList[position]
---//            val intent = JobDetailActivity2.newIntent(requireContext(), job)
---//            startActivity(intent)
---//        }
---//    }
---//}
---//
---//class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
---//    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
---//
---//    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
---//        val view =
---//            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
---//
---//        val job = jobList[position]
---//
---//        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
---//        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
---//        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
---//
---//        titleTextView.text = job.title
---//        companyTextView.text = job.company
---//        regionContTextView.text = job.region
---//
---//        return view
---//    }
---//}
---//
---//class JobDetailActivity2 : AppCompatActivity() {
---//    private lateinit var backButton: ImageView
---//    private lateinit var company: TextView // 회사명
---//    private lateinit var title: TextView // 제목
---//    private lateinit var salTpNm: TextView // 임금형태
---//    private lateinit var sal: TextView // 급여
---//    private lateinit var region: TextView // 근무지역
---//    private lateinit var holidayTpNm: TextView // 근무형태
---//    private lateinit var minEdubg: TextView // 최소학력
---//    private lateinit var career: TextView // 경력
---//    private lateinit var closeDt: TextView // 마감일자
---//    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
---//    private lateinit var jobsCd: TextView // 직종코드
---//
---//    companion object {
---//        private const val JOB_EXTRA = "job"
---//
---//        fun newIntent(context2: Context, job: Job): Intent {
---//            return Intent(context2, JobDetailActivity2::class.java).apply {
---//                putExtra(JOB_EXTRA, job)
---//            }
---//        }
---//    }
---//
---//    override fun onCreate(savedInstanceState: Bundle?) {
---//        super.onCreate(savedInstanceState)
---//        setContentView(R.layout.activity_job_detail)
---//
---//        // 기본 툴바 숨기기
---//        supportActionBar?.hide()
---//
---//        backButton = findViewById(R.id.backButton)
---//        company = findViewById(R.id.company)
---//        title = findViewById(R.id.title)
---//        salTpNm = findViewById(R.id.salTpNm)
---//        sal = findViewById(R.id.sal)
---//        region = findViewById(R.id.region)
---//        holidayTpNm = findViewById(R.id.holidayTpNm)
---//        minEdubg = findViewById(R.id.minEdubg)
---//        career = findViewById(R.id.career)
---//        closeDt = findViewById(R.id.closeDt)
---//        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
---//        jobsCd = findViewById(R.id.jobsCd)
---//
---//        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
---//
---//        company.text = job?.company
---//        title.text = job?.title
---//        salTpNm.text = job?.salTpNm
---//        sal.text = job?.sal
---//        region.text = job?.region
---//        holidayTpNm.text = job?.holidayTpNm
---//        minEdubg.text = job?.minEdubg
---//        career.text = job?.career
---//        closeDt.text = job?.closeDt
---//        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
---//        jobsCd.text = job?.jobsCd
---//
---//        backButton.setOnClickListener {
---//            onBackPressed()
---//        }
---//    }
---//}
--\ No newline at end of file
--+package com.example.a23_hf069
--+
--+import android.content.Context
--+import android.content.Intent
--+import android.os.AsyncTask
--+import android.os.Bundle
--+import android.view.LayoutInflater
--+import android.view.View
--+import android.view.ViewGroup
--+import android.widget.*
--+import androidx.appcompat.app.AppCompatActivity
--+import androidx.fragment.app.Fragment
--+import org.xmlpull.v1.XmlPullParser
--+import org.xmlpull.v1.XmlPullParserFactory
--+import java.io.InputStream
--+import java.net.HttpURLConnection
--+import java.net.URL
--+
--+class WantedFilteredFragment : Fragment() {
--+    private lateinit var jobListView: ListView
--+    private lateinit var jobList: List<Job>
--+    private lateinit var prevButton: Button
--+    private lateinit var nextButton: Button
--+    private var currentPage = 1
--+
--+    override fun onCreateView(
--+        inflater: LayoutInflater,
--+        container: ViewGroup?,
--+        savedInstanceState: Bundle?
--+    ): View? {
--+        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
--+
--+        // UI 요소 초기화
--+        jobListView = view.findViewById(R.id.jobListView)
--+        prevButton = view.findViewById(R.id.prevButton)
--+        nextButton = view.findViewById(R.id.nextButton)
--+
--+        // 이전 페이지 버튼 클릭 이벤트 처리
--+        prevButton.setOnClickListener {
--+            if (currentPage > 1) {
--+                currentPage -= 1
--+                fetchJobData()
--+            }
--+        }
--+
--+        // 다음 페이지 버튼 클릭 이벤트 처리
--+        nextButton.setOnClickListener {
--+            currentPage += 1
--+            fetchJobData()
--+        }
--+
--+        // WantedFilteringFragment.kt에서 argument를 넘겨받아 필터링된 데이터 출력
--+        //fetchJobData()
--+
--+        return view
--+    }
--+
--+    private fun fetchJobData() {
--+        val url =
--+            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
--+        FetchJobData().execute(url)
--+    }
--+
--+    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
--+        override fun doInBackground(vararg urls: String): List<Job> {
--+            val urlString = urls[0]
--+            var result: List<Job> = emptyList()
--+            var connection: HttpURLConnection? = null
--+
--+            try {
--+                val url = URL(urlString)
--+                connection = url.openConnection() as HttpURLConnection
--+                connection.requestMethod = "GET"
--+                connection.readTimeout = 15 * 1000
--+                connection.connectTimeout = 15 * 1000
--+
--+                val responseCode = connection.responseCode
--+                if (responseCode == HttpURLConnection.HTTP_OK) {
--+                    val inputStream = connection.inputStream
--+                    result = parseXml(inputStream)
--+                }
--+            } catch (e: Exception) {
--+                e.printStackTrace()
--+            } finally {
--+                connection?.disconnect()
--+            }
--+
--+            return result
--+        }
--+
--+        private fun parseXml(inputStream: InputStream): List<Job> {
--+            val jobList = mutableListOf<Job>()
--+            val factory = XmlPullParserFactory.newInstance()
--+            val xpp = factory.newPullParser()
--+            xpp.setInput(inputStream, null)
--+
--+            var eventType = xpp.eventType
--+            var company: String? = null // 회사명
--+            var title: String? = null // 채용제목
--+            var salTpNm: String? = null // 임금형태
--+            var sal: String? = null // 급여
--+            var region: String? = null // 근무지역
--+            var holidayTpNm: String? = null // 근무형태
--+            var minEdubg: String? = null // 최소학력
--+            var career: String? = null // 경력
--+            var closeDt: String? = null // 마감일자
--+            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
--+            var jobsCd: String? = null // 직종코드
--+
--+            while (eventType != XmlPullParser.END_DOCUMENT) {
--+                when (eventType) {
--+                    XmlPullParser.START_TAG -> {
--+                        when (xpp.name) {
--+                            "company" -> company = xpp.nextText()
--+                            "title" -> title = xpp.nextText()
--+                            "salTpNm" -> salTpNm = xpp.nextText()
--+                            "sal" -> sal = xpp.nextText()
--+                            "region" -> region = xpp.nextText()
--+                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
--+                            "minEdubg" -> minEdubg = xpp.nextText()
--+                            "career" -> career = xpp.nextText()
--+                            "closeDt" -> closeDt = xpp.nextText()
--+                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
--+                            "jobsCd" -> jobsCd = xpp.nextText()
--+                        }
--+                    }
--+                    XmlPullParser.END_TAG -> {
--+                        if (xpp.name == "wanted") {
--+                            company?.let { c ->
--+                                title?.let { t ->
--+                                    jobList.add(
--+                                        Job(
--+                                            c, t, salTpNm, sal, region, holidayTpNm,
--+                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
--+                                        )
--+                                    )
--+                                }
--+                            }
--+                            company = null
--+                            title = null
--+                            salTpNm = null
--+                            sal = null
--+                            region = null
--+                            holidayTpNm = null
--+                            minEdubg = null
--+                            career = null
--+                            closeDt = null
--+                            wantedMobileInfoUrl = null
--+                            jobsCd = null
--+                        }
--+                    }
--+                }
--+                eventType = xpp.next()
--+            }
--+
--+            return jobList
--+        }
--+
--+        override fun onPostExecute(result: List<Job>) {
--+            jobList = result
--+            showJobList()
--+        }
--+    }
--+
--+    private fun showJobList() {
--+        val adapter = CustomAdapter2(requireActivity(), jobList)
--+        jobListView.adapter = adapter
--+
--+        jobListView.setOnItemClickListener { _, _, position, _ ->
--+            val job = jobList[position]
--+            val intent = JobDetailActivity2.newIntent(requireContext(), job)
--+            startActivity(intent)
--+        }
--+    }
--+}
--+
--+class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
--+    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
--+
--+    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
--+        val view =
--+            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
--+
--+        val job = jobList[position]
--+
--+        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
--+        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
--+        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
--+
--+        titleTextView.text = job.title
--+        companyTextView.text = job.company
--+        regionContTextView.text = job.region
--+
--+        return view
--+    }
--+}
--+
--+class JobDetailActivity2 : AppCompatActivity() {
--+    private lateinit var backButton: ImageView
--+    private lateinit var company: TextView // 회사명
--+    private lateinit var title: TextView // 제목
--+    private lateinit var salTpNm: TextView // 임금형태
--+    private lateinit var sal: TextView // 급여
--+    private lateinit var region: TextView // 근무지역
--+    private lateinit var holidayTpNm: TextView // 근무형태
--+    private lateinit var minEdubg: TextView // 최소학력
--+    private lateinit var career: TextView // 경력
--+    private lateinit var closeDt: TextView // 마감일자
--+    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
--+    private lateinit var jobsCd: TextView // 직종코드
--+
--+    companion object {
--+        private const val JOB_EXTRA = "job"
--+
--+        fun newIntent(context2: Context, job: Job): Intent {
--+            return Intent(context2, JobDetailActivity2::class.java).apply {
--+                putExtra(JOB_EXTRA, job)
--+            }
--+        }
--+    }
--+
--+    override fun onCreate(savedInstanceState: Bundle?) {
--+        super.onCreate(savedInstanceState)
--+        setContentView(R.layout.activity_job_detail)
--+
--+        // 기본 툴바 숨기기
--+        supportActionBar?.hide()
--+
--+        backButton = findViewById(R.id.backButton)
--+        company = findViewById(R.id.company)
--+        title = findViewById(R.id.title)
--+        salTpNm = findViewById(R.id.salTpNm)
--+        sal = findViewById(R.id.sal)
--+        region = findViewById(R.id.region)
--+        holidayTpNm = findViewById(R.id.holidayTpNm)
--+        minEdubg = findViewById(R.id.minEdubg)
--+        career = findViewById(R.id.career)
--+        closeDt = findViewById(R.id.closeDt)
--+        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
--+        jobsCd = findViewById(R.id.jobsCd)
--+
--+        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
--+
--+        company.text = job?.company
--+        title.text = job?.title
--+        salTpNm.text = job?.salTpNm
--+        sal.text = job?.sal
--+        region.text = job?.region
--+        holidayTpNm.text = job?.holidayTpNm
--+        minEdubg.text = job?.minEdubg
--+        career.text = job?.career
--+        closeDt.text = job?.closeDt
--+        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
--+        jobsCd.text = job?.jobsCd
--+
--+        backButton.setOnClickListener {
--+            onBackPressed()
--+        }
--+    }
--+}
--\ No newline at end of file
--Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\n\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n//        complete_btn1.setOnClickListener {\r\n//            val wantedFilteredFragment = WantedFilteredFragment()\r\n//            requireActivity().supportFragmentManager.beginTransaction()\r\n//                .replace(R.id.fl_container, wantedFilteredFragment)\r\n//                .addToBackStack(null)\r\n//                .commit()\r\n//        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689777839166)
--@@ -1,50 +1,69 @@
-- package com.example.a23_hf069
-- 
--+import android.content.Context
-- import android.content.Intent
--+import android.os.AsyncTask
--+import android.os.Build
-- import android.os.Bundle
-- import android.view.LayoutInflater
-- import android.view.View
-- import android.view.ViewGroup
--+import android.widget.ArrayAdapter
-- import android.widget.Button
--+import android.widget.ImageView
--+import android.widget.ListView
--+import android.widget.TextView
--+import androidx.annotation.RequiresApi
-- import androidx.appcompat.app.AppCompatActivity
--+import androidx.core.content.ContentProviderCompat.requireContext
--+import androidx.core.content.ContextCompat.startActivity
-- import androidx.fragment.app.Fragment
-- import androidx.fragment.app.setFragmentResult
---
--+import org.xmlpull.v1.XmlPullParser
--+import org.xmlpull.v1.XmlPullParserFactory
--+import java.io.InputStream
--+import java.net.HttpURLConnection
--+import java.net.URL
--+import java.net.URLEncoder
--+import java.time.LocalDate
-- 
-- 
---class WantedFilteringFragment : Fragment()  {
--+class WantedFilteringFragment : Fragment() {
--+    private lateinit var jobList: List<Job>
--+    private lateinit var jobListView: ListView
--+
--     lateinit var region_btn: Button
-- 
---    lateinit var edu_btn1 : Button
---    lateinit var edu_btn2 : Button
---    lateinit var edu_btn3 : Button
---    lateinit var edu_btn4 : Button
---    lateinit var edu_btn5 : Button
---    lateinit var edu_btn6 : Button
--+    lateinit var edu_btn1: Button
--+    lateinit var edu_btn2: Button
--+    lateinit var edu_btn3: Button
--+    lateinit var edu_btn4: Button
--+    lateinit var edu_btn5: Button
--+    lateinit var edu_btn6: Button
-- 
---    lateinit var career_btn1 : Button
---    lateinit var career_btn2 : Button
---    lateinit var career_btn3 : Button
--+    lateinit var career_btn1: Button
--+    lateinit var career_btn2: Button
--+    lateinit var career_btn3: Button
-- 
---    lateinit var closeDt_btn1 : Button
---    lateinit var closeDt_btn2 : Button
---    lateinit var closeDt_btn3 : Button
---    lateinit var closeDt_btn4 : Button
---    lateinit var closeDt_btn5 : Button
---    lateinit var closeDt_btn6 : Button
--+    lateinit var closeDt_btn1: Button
--+    lateinit var closeDt_btn2: Button
--+    lateinit var closeDt_btn3: Button
--+    lateinit var closeDt_btn4: Button
--+    lateinit var closeDt_btn5: Button
--+    lateinit var closeDt_btn6: Button
-- 
--     private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
---    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
--+    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력
--     private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
-- 
--     private val selectedEducationList: MutableSet<Int> = mutableSetOf()
--     private val selectedCareerList: MutableSet<Int> = mutableSetOf()
--     private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()
-- 
---    lateinit var complete_btn1 : Button //완료버튼
--+    lateinit var complete_btn1: Button //완료버튼
-- 
--     // 화면 띄우기
---    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
--+    override fun onCreateView( // onCreateView 함수 오버라이드
--         inflater: LayoutInflater,
--         container: ViewGroup?,
--         savedInstanceState: Bundle?
--@@ -53,6 +72,7 @@
--         return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)
--     }
-- 
--+    @RequiresApi(Build.VERSION_CODES.O)
--     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--         super.onViewCreated(view, savedInstanceState)
--         //지역
--@@ -80,7 +100,7 @@
--         closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)
-- 
-- 
---       /* region_btn.setOnClickListener {
--+        /* region_btn.setOnClickListener {
--             val regionFragment = RegionFragment()
--             requireActivity().supportFragmentManager.beginTransaction()
--                 .replace(R.id.fl_container, regionFragment)
--@@ -103,36 +123,48 @@
-- 
--         // 마감일 버튼 클릭 리스너
--         closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체
---        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내
---        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내
---        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내
---        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내
---        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내
--+        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 오늘
--+        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 내일
--+        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 1주이내
--+        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 30일 이내
--+        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이상
-- 
---    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
--+        //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
--         complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)
---//        complete_btn1.setOnClickListener {
---//            val wantedFilteredFragment = WantedFilteredFragment()
---//            requireActivity().supportFragmentManager.beginTransaction()
---//                .replace(R.id.fl_container, wantedFilteredFragment)
---//                .addToBackStack(null)
---//                .commit()
---//        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
--+        complete_btn1.setOnClickListener {
--+            val fetchJobData = FetchJobData()
--+            fetchJobData.execute("http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=1&display=10")
--+
--+        // 새로운 리스트를 생성하여 필터링된 항목을 저장
--+            val filteredJobList = fetchJobData.get().toMutableList()
--+
--+        // WantedFilteredFragment로 전달
--+            val wantedFilteredFragment = WantedFilteredFragment()
--+            val args = Bundle()
--+            args.putParcelableArrayList("filteredJobList", ArrayList(filteredJobList))
--+            wantedFilteredFragment.arguments = args
--+
--+            requireActivity().supportFragmentManager.beginTransaction()
--+                .replace(R.id.fl_container, wantedFilteredFragment)
--+                .addToBackStack(null)
--+                .commit()
--+        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
--     }
-- 
--+    @RequiresApi(Build.VERSION_CODES.O)
--     private fun SelectedEducation(selected: Int) {
--         if (selectedEducation == 0 || selected > selectedEducation) {
--             selectedEducation = selected
--             // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
--             if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
--                 // 0번과 같은 결과
---
---
--+                selectedEducationList.add(0)
--             }
--         }
--         filterItems()
--     }
-- 
--+    @RequiresApi(Build.VERSION_CODES.O)
--     private fun SelectedCareer(selected: Int) {
--         if (selectedCareer == 0 || selected > selectedCareer) {
--             selectedCareer = selected
--@@ -140,6 +172,7 @@
--         filterItems()
--     }
-- 
--+    @RequiresApi(Build.VERSION_CODES.O)
--     private fun SelectedCloseDate(selected: Int) {
--         if (selectedCloseDate == 0 || selected > selectedCloseDate) {
--             selectedCloseDate = selected
--@@ -147,21 +180,281 @@
--         filterItems()
--     }
-- 
--+    @RequiresApi(Build.VERSION_CODES.O)
--     private fun filterItems() {
--         // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)
---        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
--+        val filteredEducationList =
--+            if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
--         val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
---        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
--+        val filteredCloseDateList =
--+            if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
--+
--+        //각각의 리스트에 담긴 Int형의 데이터들을 String 타입으로 변환
--+        val convertedEducationList = filteredEducationList.map { value ->
--+            when (value) {
--+                0 -> "00"
--+                1 -> "01"
--+                2 -> "02"
--+                3 -> "03"
--+                4 -> "04"
--+                5 -> "05"
--+                else -> {}
--+            }
--+        }
--+        val convertedCareerList = filteredCareerList.map { value ->
--+            when (value) {
--+                0 -> "N"
--+                1 -> "E"
--+                2 -> "Z"
--+
--+                else -> {}
--+            }
--+        }
--+    val convertedCloseDateList = filteredCloseDateList.map { value ->
--+        val today = LocalDate.now()
--+        val deadlineDate = when (value) {
--+           // 0 ->
--+            1 -> today // 오늘
--+            2 -> today.plusDays(1) // 내일
--+            3 -> today.plusDays(7) // 1주 이내
--+            4 -> today.plusMonths(1) // 한달 이내
--+            else -> {today.plusMonths(1) // 한달 이상
--+             }
--+        }
--+        deadlineDate.toString() // 날짜를 문자열로 변환하여 반환
--+        //xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값
--+    }
--+}
--+
--+        //각각의 리스트에서 추출된 값을 파싱된 xml파일과 대조 -> 리스트에 담기 -> 중복 건 찾기
--+
--+
-- 
--         // 세 리스트에서 중복되는 값들을 찾습니다.
---        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
--+        //val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
-- 
---        for (item in intersectedItems) {
--+        /*for (item in intersectedItems) {
--             println(item)
--             // 필요한 처리를 수행합니다.
---        }
---    }
--+        }*/
--+
--+
--+    //워크넷 api 채용목록 xml파일 parsing하는 코드
--+    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
--+        override fun doInBackground(vararg urls: String): List<Job> {
--+            val urlString = urls[0]
--+            var result: List<Job> = emptyList()
--+            var connection: HttpURLConnection? = null
--+
--+            try {
--+                val url = URL(urlString)
--+                connection = url.openConnection() as HttpURLConnection
--+                connection.requestMethod = "GET"
--+                connection.readTimeout = 15 * 1000
--+                connection.connectTimeout = 15 * 1000
--+
--+                val responseCode = connection.responseCode
--+                if (responseCode == HttpURLConnection.HTTP_OK) {
--+                    val inputStream = connection.inputStream
--+                    result = parseXml(inputStream)
--+                }
--+            } catch (e: Exception) {
--+                e.printStackTrace()
--+            } finally {
--+                connection?.disconnect()
--+            }
-- 
--+            return result
--+        }
-- 
--+        private fun parseXml(inputStream: InputStream): List<Job> {
--+            val jobList = mutableListOf<Job>()
--+            val factory = XmlPullParserFactory.newInstance()
--+            val xpp = factory.newPullParser()
--+            xpp.setInput(inputStream, null)
--+
--+            var eventType = xpp.eventType
--+            var company: String? = null // 회사명
--+            var title: String? = null // 채용제목
--+            var salTpNm: String? = null // 임금형태
--+            var sal: String? = null // 급여
--+            var region: String? = null // 근무지역
--+            var holidayTpNm: String? = null // 근무형태
--+            var minEdubg: String? = null // 최소학력
--+            var career: String? = null // 경력
--+            var closeDt: String? = null // 마감일자
--+            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
--+            var jobsCd: String? = null // 직종코드
--+
--+            while (eventType != XmlPullParser.END_DOCUMENT) {
--+                when (eventType) {
--+                    XmlPullParser.START_TAG -> {
--+                        when (xpp.name) {
--+                            "company" -> company = xpp.nextText()
--+                            "title" -> title = xpp.nextText()
--+                            "salTpNm" -> salTpNm = xpp.nextText()
--+                            "sal" -> sal = xpp.nextText()
--+                            "region" -> region = xpp.nextText()
--+                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
--+                            "minEdubg" -> minEdubg = xpp.nextText()
--+                            "career" -> career = xpp.nextText()
--+                            "closeDt" -> closeDt = xpp.nextText()
--+                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
--+                            "jobsCd" -> jobsCd = xpp.nextText()
--+                        }
--+                    }
--+                    XmlPullParser.END_TAG -> {
--+                        if (xpp.name == "wanted") {
--+                            company?.let { c ->
--+                                title?.let { t ->
--+                                    jobList.add(
--+                                        Job(
--+                                            c, t, salTpNm, sal, region, holidayTpNm,
--+                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
--+                                        )
--+                                    )
--+                                }
--+                            }
--+                            company = null
--+                            title = null
--+                            salTpNm = null
--+                            sal = null
--+                            region = null
--+                            holidayTpNm = null
--+                            minEdubg = null
--+                            career = null
--+                            closeDt = null
--+                            wantedMobileInfoUrl = null
--+                            jobsCd = null
--+                        }
--+                    }
--+                }
--+                eventType = xpp.next()
--+            }
--+
--+            return jobList
--+        }
--+
--+        @RequiresApi(Build.VERSION_CODES.O)
--+        private fun isJobMatched(job: Job): Boolean {
--+            val convertedEducationList = listOf(
--+                "00", "01", "02", "03", "04", "05"
--+            ) // 전체, 초등학교, 중학교, 고등학교, 대학(2년제), 대학(4년제)
--+            val convertedCareerList = listOf(
--+                "N", "E", "Z"
--+            ) // 전체, 신입, 경력
--+            val convertedCloseDateList = listOf(
--+                LocalDate.now().toString(), // 오늘
--+                LocalDate.now().plusDays(1).toString(), // 내일
--+                LocalDate.now().plusDays(7).toString(), // 1주 이내
--+                LocalDate.now().plusMonths(1).toString(), // 한달 이내
--+                LocalDate.now().plusMonths(1).toString() // 한달 이상
--+            )
--+
--+            return convertedEducationList.contains(job.minEdubg) &&
--+                    convertedCareerList.contains(job.career) &&
--+                    convertedCloseDateList.contains(job.closeDt)
--+        }
--+        override fun onPostExecute(result: List<Job>) {
--+            jobList = result
--+            showJobList()
--+        }
--+    }
--+
--+    private fun showJobList() {
--+        val adapter = CustomAdapter3(requireActivity(), jobList)
--+        jobListView.adapter = adapter
--+
--+        jobListView.setOnItemClickListener { _, _, position, _ ->
--+            val job = jobList[position]
--+            val intent = JobDetailActivity3.newIntent(requireContext(), job)
--+            startActivity(intent)
--+        }
--+    }
--+}
--+
--+class CustomAdapter3(private val context3: Context, private val jobList: List<Job>) :
--+    ArrayAdapter<Job>(context3, R.layout.job_item, jobList) {
--+
--+    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
--+        val view =
--+            convertView ?: LayoutInflater.from(context3).inflate(R.layout.job_item, parent, false)
--+
--+        val job = jobList[position]
--+
--+        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
--+        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
--+        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
--+
--+        titleTextView.text = job.title
--+        companyTextView.text = job.company
--+        regionContTextView.text = job.region
--+
--+        return view
--+    }
--+}
--+
--+class JobDetailActivity3 : AppCompatActivity() {
--+    private lateinit var backButton: ImageView
--+    private lateinit var company: TextView // 회사명
--+    private lateinit var title: TextView // 제목
--+    private lateinit var salTpNm: TextView // 임금형태
--+    private lateinit var sal: TextView // 급여
--+    private lateinit var region: TextView // 근무지역
--+    private lateinit var holidayTpNm: TextView // 근무형태
--+    private lateinit var minEdubg: TextView // 최소학력
--+    private lateinit var career: TextView // 경력
--+    private lateinit var closeDt: TextView // 마감일자
--+    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
--+    private lateinit var jobsCd: TextView // 직종코드
--+
--+    companion object {
--+        private const val JOB_EXTRA = "job"
--+
--+        fun newIntent(context2: Context, job: Job): Intent {
--+            return Intent(context2, JobDetailActivity3::class.java).apply {
--+                putExtra(JOB_EXTRA, job)
--+            }
--+        }
--+    }
--+
--+    override fun onCreate(savedInstanceState: Bundle?) {
--+        super.onCreate(savedInstanceState)
--+        setContentView(R.layout.activity_job_detail)
--+
--+        // 기본 툴바 숨기기
--+        supportActionBar?.hide()
--+
--+        backButton = findViewById(R.id.backButton)
--+        company = findViewById(R.id.company)
--+        title = findViewById(R.id.title)
--+        salTpNm = findViewById(R.id.salTpNm)
--+        sal = findViewById(R.id.sal)
--+        region = findViewById(R.id.region)
--+        holidayTpNm = findViewById(R.id.holidayTpNm)
--+        minEdubg = findViewById(R.id.minEdubg)
--+        career = findViewById(R.id.career)
--+        closeDt = findViewById(R.id.closeDt)
--+        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
--+        jobsCd = findViewById(R.id.jobsCd)
--+
--+        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
--+
--+        company.text = job?.company
--+        title.text = job?.title
--+        salTpNm.text = job?.salTpNm
--+        sal.text = job?.sal
--+        region.text = job?.region
--+        holidayTpNm.text = job?.holidayTpNm
--+        minEdubg.text = job?.minEdubg
--+        career.text = job?.career
--+        closeDt.text = job?.closeDt
--+        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
--+        jobsCd.text = job?.jobsCd
--+
--+        backButton.setOnClickListener {
--+            onBackPressed()
--+        }
--+    }
-- 
--     }
--\ No newline at end of file
--Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
--+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689773051946)
--@@ -19,7 +19,7 @@
-- 
-- 
-- class P_loginFragment : Fragment() { //개인로그인
---    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
--+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
-- 
--     private var TAG = "phptest" // phptest log 찍으려는 용도
--     private lateinit var id_text_input_edit_text: EditText // id
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
-@@ -1,84 +0,0 @@
--Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689770315778)
--@@ -19,7 +19,7 @@
-- 
-- 
-- class P_loginFragment : Fragment() { //개인로그인
---    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
--+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
-- 
--     private var TAG = "phptest" // phptest log 찍으려는 용도
--     private lateinit var id_text_input_edit_text: EditText // id
--Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\nimport kotlinx.android.synthetic.main.activity_job_detail.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689768958340)
--@@ -6,12 +6,7 @@
-- import android.view.View
-- import android.view.ViewGroup
-- import android.widget.Button
---import androidx.appcompat.app.AppCompatActivity
-- import androidx.fragment.app.Fragment
---import androidx.fragment.app.setFragmentResult
---import kotlinx.android.synthetic.main.activity_job_detail.*
---import kotlinx.android.synthetic.main.fragment_wanted_filtering.*
---import kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*
-- 
-- 
-- class WantedFilteringFragment : Fragment()  {
--Index: app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.KeyEvent\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.net.URLEncoder\r\n\r\nclass WantedWorkNetSearchFragment : Fragment() {\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var searchButton: Button\r\n    private lateinit var searchListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private var currentPage = 1\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        val rootView = inflater.inflate(R.layout.fragment_wanted_work_net_search, container, false)\r\n\r\n        searchContent = rootView.findViewById(R.id.searchContent)\r\n        searchListView = rootView.findViewById(R.id.searchListView)\r\n        prevButton = rootView.findViewById(R.id.prevButton)\r\n        nextButton = rootView.findViewById(R.id.nextButton)\r\n\r\n        searchContent.setOnKeyListener { _, keyCode, event ->\r\n            if (event.action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {\r\n                fetchJobDataWithSearch()\r\n                return@setOnKeyListener true\r\n            }\r\n            return@setOnKeyListener false\r\n        }\r\n\r\n        val closeButton = rootView.findViewById<ImageButton>(R.id.backButton)\r\n        closeButton.setOnClickListener {\r\n            requireActivity().onBackPressed()\r\n        }\r\n\r\n        prevButton.visibility = View.GONE\r\n        nextButton.visibility = View.GONE\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobDataWithSearch()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobDataWithSearch()\r\n        }\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchJobDataWithSearch() {\r\n        val searchKeyword = searchContent.text.toString().trim()\r\n\r\n        if (searchKeyword.isNotEmpty()) {\r\n            val encodedKeyword = URLEncoder.encode(searchKeyword, \"UTF-8\")\r\n            val url = \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10&keyword=$encodedKeyword\"\r\n            FetchJobData().execute(url)\r\n        } else {\r\n            // 검색어가 비어있을 때 처리할 내용\r\n        }\r\n    }\r\n\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            if (currentPage > 1 && result.isEmpty()) {\r\n                // nextButton을 누른 후에 빈 리스트가 반환된 경우, \"마지막 페이지입니다\" 토스트 메시지를 표시합니다.\r\n                Toast.makeText(requireContext(), \"마지막 페이지입니다\", Toast.LENGTH_SHORT).show()\r\n                currentPage -= 1 // 이전 페이지로 돌아갑니다.\r\n                nextButton.isEnabled = false // nextButton을 비활성화합니다.\r\n            } else {\r\n                jobList = result\r\n                showJobList()\r\n\r\n                if (searchContent.text.toString().trim().isEmpty()) {\r\n                    // EditText에 입력값이 없을 때\r\n                    prevButton.visibility = View.GONE\r\n                    nextButton.visibility = View.GONE\r\n                } else {\r\n                    // EditText에 입력값이 있을 때\r\n                    if (currentPage > 1 || jobList.size >= 10) {\r\n                        prevButton.visibility = View.VISIBLE\r\n                    } else {\r\n                        prevButton.visibility = View.GONE\r\n                    }\r\n                    nextButton.visibility = View.VISIBLE\r\n                }\r\n\r\n                nextButton.isEnabled = true // nextButton을 활성화합니다.\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter(this, jobList)\r\n        searchListView.adapter = adapter\r\n\r\n        searchListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(date 1689770133021)
--@@ -205,7 +205,7 @@
--     }
-- 
--     private fun showJobList() {
---        val adapter = CustomAdapter(this, jobList)
--+        val adapter = CustomAdapter(jobList,requireContext())
--         searchListView.adapter = adapter
-- 
--         searchListView.setOnItemClickListener { _, _, position, _ ->
--Index: app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport androidx.viewpager.widget.ViewPager\r\nimport com.google.android.material.tabs.TabLayout\r\nimport kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*\r\n\r\nclass WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {\r\n    private lateinit var filter: Button\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var viewPager: ViewPager\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_list, container, false)\r\n\r\n        val adapter = PagerAdapter(childFragmentManager)\r\n        adapter.addFragment(WantedRequestingFragment(), \"즉시지원\")\r\n        adapter.addFragment(WantedWorkNetFragment(), \"워크넷 채용공고\")\r\n\r\n        viewPager = view.findViewById<ViewPager>(R.id.viewpager01)\r\n        viewPager.adapter = adapter\r\n\r\n        tabLayout = view.findViewById<TabLayout>(R.id.tablayout01)\r\n        tabLayout.setupWithViewPager(viewPager)\r\n        tabLayout.addOnTabSelectedListener(this)\r\n\r\n        filter = view.findViewById<Button>(R.id.conditionButton)\r\n        filter.setOnClickListener() {\r\n            val fragment1 = WantedFilteringFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, fragment1)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        searchContent = view.findViewById<EditText>(R.id.searchContent)\r\n        searchContent.setOnTouchListener { _, _ ->\r\n            val currentTab = tabLayout.selectedTabPosition\r\n            if (currentTab == 1) {\r\n                val wantedWorkNetSearchFragment = WantedWorkNetSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedWorkNetSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"워크넷 채용공고 검색\"\r\n            } else if (currentTab == 0) {\r\n                val wantedRequestingSearchFragment = WantedRequestingSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedRequestingSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n            }\r\n            true\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    override fun onTabSelected(tab: TabLayout.Tab?) {\r\n        val currentTab = tab?.position\r\n        if (currentTab == 1) {\r\n            searchContent.hint = \"워크넷 채용공고 검색\"\r\n        } else if (currentTab == 0) {\r\n            searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n        }\r\n    }\r\n\r\n    override fun onTabUnselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n\r\n    override fun onTabReselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(date 1689768964832)
--@@ -7,12 +7,10 @@
-- import android.view.LayoutInflater
-- import android.view.View
-- import android.view.ViewGroup
---import android.view.inputmethod.InputMethodManager
-- import android.widget.Button
-- import android.widget.EditText
-- import androidx.viewpager.widget.ViewPager
-- import com.google.android.material.tabs.TabLayout
---import kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*
-- 
-- class WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {
--     private lateinit var filter: Button
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26__12_44__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26__12_44__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26__12_44__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26__12_44__Changes_.xml	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-26_오전_12_44_[Changes]" date="1690299888445" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오전_12_44_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-26 오전 12:44 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오후_10_53_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오후_10_53_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오후_10_53_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오후_10_53_[Changes]/shelved.patch	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,103 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/MypageFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.LinearLayout\r\n\r\nclass MypageFragment : Fragment() {\r\n    lateinit var member_info : LinearLayout\r\n    lateinit var notificationButton : Button\r\n    lateinit var faqButton : Button\r\n    lateinit var saeil_center_btn : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_mypage, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        saeil_center_btn = view.findViewById<Button>(R.id.saeil_center_btn)\r\n        saeil_center_btn.setOnClickListener {// 가까운 새일센터 찾기 사이트 연결\r\n            var intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"https://saeil.mogef.go.kr/hom/info/search.do\"))\r\n            startActivity(intent)\r\n        }\r\n\r\n        member_info = view.findViewById<LinearLayout>(R.id.member_info_edit_btn)\r\n        member_info.setOnClickListener(){// 회원정보 수정 프래그먼트로 전환\r\n            val fragment_info = MemberInfoEditFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, fragment_info) // 프래그먼트 교체\r\n                .addToBackStack(null) // 이전 프래그먼트로 돌아가기\r\n                .commit()\r\n        }\r\n        notificationButton = view.findViewById<Button>(R.id.notificationButton)\r\n        notificationButton.setOnClickListener(){// 알림 설정 프래그먼트로 전환\r\n            val fragment_notification_settings = NotificationSettingsFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, fragment_notification_settings) // 프래그먼트 교체\r\n                .addToBackStack(null) // 이전 프래그먼트로 돌아가기\r\n                .commit()\r\n        }\r\n        faqButton = view.findViewById<Button>(R.id.faqButton)\r\n        faqButton.setOnClickListener(){// 자주 묻는 질문 프래그먼트로 전환\r\n            val fragment_faq = FAQFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, fragment_faq) // 프래그먼트 교체\r\n                .addToBackStack(null) // 이전 프래그먼트로 돌아가기\r\n                .commit()\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/MypageFragment.kt b/app/src/main/java/com/example/a23_hf069/MypageFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/MypageFragment.kt	(revision 46df6ff108491d2983bad05b3e5272f36a4ee63b)
-+++ b/app/src/main/java/com/example/a23_hf069/MypageFragment.kt	(date 1690379528065)
-@@ -1,5 +1,6 @@
- package com.example.a23_hf069
- 
-+import ResumeFragment
- import android.content.Intent
- import android.net.Uri
- import android.os.Bundle
-@@ -9,9 +10,13 @@
- import android.view.ViewGroup
- import android.widget.Button
- import android.widget.LinearLayout
-+import android.widget.TextView
- 
- class MypageFragment : Fragment() {
--    lateinit var member_info : LinearLayout
-+    // 사용자 ID를 저장할 변수
-+    private lateinit var userId: String
-+
-+    lateinit var member_info : Button
-     lateinit var notificationButton : Button
-     lateinit var faqButton : Button
-     lateinit var saeil_center_btn : Button
-@@ -25,6 +30,13 @@
-     }
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
-+        // Argument로부터 전달받은 사용자 ID를 변수에 저장
-+        if (arguments != null) {
-+            userId = arguments?.getString("userId", "") ?: ""
-+        }
-+        // 사용자 ID를 표시할 TextView 초기화
-+        val textID = view.findViewById<TextView>(R.id.tv_user_name)
-+        textID.text = userId
- 
-         saeil_center_btn = view.findViewById<Button>(R.id.saeil_center_btn)
-         saeil_center_btn.setOnClickListener {// 가까운 새일센터 찾기 사이트 연결
-@@ -32,7 +44,7 @@
-             startActivity(intent)
-         }
- 
--        member_info = view.findViewById<LinearLayout>(R.id.member_info_edit_btn)
-+        member_info = view.findViewById<Button>(R.id.resume_management_btn)
-         member_info.setOnClickListener(){// 회원정보 수정 프래그먼트로 전환
-             val fragment_info = MemberInfoEditFragment()
-             requireActivity().supportFragmentManager.beginTransaction()
-Index: app/src/main/res/layout/fragment_mypage.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MypageFragment\">\r\n\r\n    <FrameLayout\r\n        android:id=\"@+id/fl_container\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/toolbar\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"?attr/actionBarSize\"\r\n        android:background=\"?attr/colorPrimary\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/titleTextView\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:text=\"마이페이지\"\r\n            android:textColor=\"@android:color/white\"\r\n            android:textSize=\"18sp\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/backButton\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"start|center_vertical\"\r\n            android:background=\"@null\"\r\n            android:src=\"@drawable/ic_baseline_cancel_presentation_24_2\" />\r\n\r\n    </androidx.appcompat.widget.Toolbar>\r\n    <ScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/toolbar\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/member_info\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"80dp\"\r\n                android:orientation=\"horizontal\">\r\n                <LinearLayout\r\n                    android:id=\"@+id/member_info_edit_btn\"\r\n                    android:layout_width=\"120dp\"\r\n                    android:layout_height=\"60dp\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:layout_marginRight=\"20dp\"\r\n                    >\r\n                    <TextView\r\n                        android:id=\"@+id/tv_user_name\"\r\n                        android:layout_marginTop=\"20dp\"\r\n                        android:layout_marginStart=\"20dp\"\r\n                        android:textAlignment=\"center\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:includeFontPadding=\"false\"\r\n                        android:text=\"길라임\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"20sp\"\r\n                        android:textStyle=\"bold\"\r\n                        />\r\n                    <TextView\r\n                        android:layout_marginTop=\"20dp\"\r\n                        android:layout_marginStart=\"5dp\"\r\n                        android:textAlignment=\"center\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:includeFontPadding=\"false\"\r\n                        android:text=\"님 >\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"16sp\"\r\n                        />\r\n                </LinearLayout>\r\n                <Button\r\n                    android:id=\"@+id/resume_management_btn\"\r\n                    android:textAlignment=\"center\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"60dp\"\r\n                    android:includeFontPadding=\"false\"\r\n                    android:text=\"이력서 관리\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"14sp\"\r\n                    android:backgroundTint=\"@color/white\"\r\n                    android:outlineProvider=\"none\"\r\n                    android:layout_marginTop=\"10dp\"\r\n                    app:strokeColor=\"#35B790\"\r\n                    app:strokeWidth=\"2dp\"\r\n                    android:layout_marginRight=\"10dp\"\r\n                    />\r\n\r\n                <Button\r\n                    android:id=\"@+id/application_history_btn\"\r\n                    android:textAlignment=\"center\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"60dp\"\r\n                    android:includeFontPadding=\"false\"\r\n                    android:text=\"지원 목록\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"14sp\"\r\n                    android:backgroundTint=\"@color/white\"\r\n                    android:outlineProvider=\"none\"\r\n                    android:layout_marginTop=\"10dp\"\r\n                    app:strokeColor=\"#35B790\"\r\n                    app:strokeWidth=\"2dp\"\r\n                    />\r\n            </LinearLayout>\r\n\r\n            <!--관심기업, 스크랩 ,최근본 공고-->\r\n            <FrameLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"100dp\"\r\n                android:background=\"@drawable/rounded_rectangle_border\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:layout_marginLeft=\"10dp\"\r\n                android:layout_marginRight=\"10dp\"\r\n                >\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:orientation=\"horizontal\"\r\n                    android:gravity=\"center\"\r\n                    >\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"5dp\"\r\n                        android:layout_marginRight=\"3dp\"\r\n                        android:orientation=\"vertical\"\r\n                        android:gravity=\"center\">\r\n                        <Button\r\n                            android:id=\"@+id/interesting_company_btn\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"관심기업\"\r\n                            android:textColor=\"@color/white\"\r\n                            />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/interesting_company_count\"\r\n                            android:textAlignment=\"center\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:includeFontPadding=\"false\"\r\n                            android:layout_marginTop=\"10dp\"\r\n                            android:text=\"0\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"24sp\"\r\n                            android:textStyle=\"bold\" />\r\n                    </LinearLayout>\r\n                    <LinearLayout\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"5dp\"\r\n                        android:layout_marginRight=\"3dp\"\r\n                        android:orientation=\"vertical\"\r\n                        android:gravity=\"center\">\r\n                        <Button\r\n                            android:id=\"@+id/scrap_company_btn\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:textColor=\"@color/white\"\r\n                            android:text=\"스크랩\" />\r\n                        <TextView\r\n                            android:id=\"@+id/scrap_company_count\"\r\n                            android:textAlignment=\"center\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:includeFontPadding=\"false\"\r\n                            android:text=\"1\"\r\n                            android:layout_marginTop=\"10dp\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"24sp\"\r\n                            android:textStyle=\"bold\" />\r\n                    </LinearLayout>\r\n                    <LinearLayout\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"5dp\"\r\n                        android:layout_marginRight=\"3dp\"\r\n                        android:orientation=\"vertical\"\r\n                        android:gravity=\"center\">\r\n                        <Button\r\n                            android:id=\"@+id/recent_wanted_btn\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:textColor=\"@color/white\"\r\n                            android:text=\"최근본공고\"\r\n                            />\r\n                        <TextView\r\n                            android:id=\"@+id/recent_wanted_count\"\r\n                            android:textAlignment=\"center\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:includeFontPadding=\"false\"\r\n                            android:text=\"3\"\r\n                            android:layout_marginTop=\"10dp\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"24sp\"\r\n                            android:textStyle=\"bold\" />\r\n                    </LinearLayout>\r\n\r\n\r\n                </LinearLayout>\r\n\r\n            </FrameLayout>\r\n\r\n            <!--가까운 새일센터 찾기 -->\r\n\r\n                <Button\r\n                    android:id=\"@+id/saeil_center_btn\"\r\n                    android:layout_marginRight=\"10dp\"\r\n                    android:layout_marginLeft=\"10dp\"\r\n                    android:layout_marginTop=\"20dp\"\r\n                    android:textAlignment=\"center\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"60dp\"\r\n                    android:includeFontPadding=\"false\"\r\n                    android:text=\"가까운 새일센터 찾기\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"16sp\"\r\n                    android:backgroundTint=\"?attr/colorPrimary\"\r\n                    android:outlineProvider=\"none\"\r\n                    android:drawableRight=\"@drawable/ic_baseline_search_24\"\r\n                    />\r\n\r\n            <!--메뉴 모음-->\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <!-- 알림설정 버튼 -->\r\n                <Button\r\n                    android:id=\"@+id/notificationButton\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textSize=\"16sp\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:padding=\"16dp\"\r\n                    android:text=\"알림 설정\"\r\n                    android:background=\"#00ff0000\"\r\n                    android:gravity=\"center_vertical\" />\r\n\r\n                <!-- 구분선 -->\r\n                <View\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"1dp\"\r\n                    android:background=\"@android:color/darker_gray\" />\r\n\r\n                <!-- 공지사항 버튼 -->\r\n                <Button\r\n                    android:id=\"@+id/noticeButton\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:padding=\"16dp\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"16sp\"\r\n                    android:text=\"공지사항\"\r\n                    android:background=\"#00ff0000\"\r\n                    android:gravity=\"center_vertical\" />\r\n\r\n                <!-- 구분선 -->\r\n                <View\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"1dp\"\r\n                    android:background=\"@android:color/darker_gray\" />\r\n\r\n                <!-- 자주묻는질문 버튼 -->\r\n                <Button\r\n                    android:id=\"@+id/faqButton\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:padding=\"16dp\"\r\n                    android:textSize=\"16sp\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:text=\"자주 묻는 질문\"\r\n                    android:background=\"#00ff0000\"\r\n                    android:gravity=\"center_vertical\" />\r\n\r\n                <!-- 구분선 -->\r\n                <View\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"1dp\"\r\n                    android:background=\"@android:color/darker_gray\" />\r\n\r\n                <!-- 로그아웃 버튼 -->\r\n                <Button\r\n                    android:id=\"@+id/logoutButton\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:padding=\"16dp\"\r\n                    android:textSize=\"16sp\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:text=\"로그아웃\"\r\n                    android:background=\"#00ff0000\"\r\n                    android:gravity=\"center_vertical\" />\r\n\r\n                <!-- 구분선 -->\r\n                <View\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"1dp\"\r\n                    android:background=\"@android:color/darker_gray\" />\r\n\r\n                <!-- 회원탈퇴 버튼 -->\r\n                <Button\r\n                    android:id=\"@+id/withdrawButton\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:padding=\"16dp\"\r\n                    android:textSize=\"16sp\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:text=\"회원탈퇴\"\r\n                    android:background=\"#00ff0000\"\r\n                    android:gravity=\"center_vertical\" />\r\n\r\n                <View\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"1dp\"\r\n                    android:background=\"@android:color/darker_gray\" />\r\n\r\n            </LinearLayout>\r\n\r\n\r\n        </LinearLayout>\r\n    </ScrollView>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_mypage.xml b/app/src/main/res/layout/fragment_mypage.xml
---- a/app/src/main/res/layout/fragment_mypage.xml	(revision 46df6ff108491d2983bad05b3e5272f36a4ee63b)
-+++ b/app/src/main/res/layout/fragment_mypage.xml	(date 1690379395613)
-@@ -98,7 +98,7 @@
-                     android:layout_width="wrap_content"
-                     android:layout_height="60dp"
-                     android:includeFontPadding="false"
--                    android:text="이력서 관리"
-+                    android:text="내 정보 수정"
-                     android:textColor="@color/black"
-                     android:textSize="14sp"
-                     android:backgroundTint="@color/white"
-Index: app/src/main/java/com/example/a23_hf069/HomeActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport HomeFragment\r\nimport ResumeFragment\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\n\r\nclass HomeActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_home)\r\n\r\n        val userId = intent.getStringExtra(\"userId\") // Intent에서 사용자 아이디를 받아옴\r\n\r\n        // 기본 툴바 숨기기\r\n        val actionBar: ActionBar? = supportActionBar\r\n        if (actionBar != null) {\r\n            actionBar.hide()\r\n        }\r\n\r\n        // 하단 탭이 눌렸을 때 화면을 전환하기 위해선 이벤트 처리하기 위해 BottomNavigationView 객체 생성\r\n        var bnv_main = findViewById(R.id.bnv_main) as BottomNavigationView\r\n\r\n        // OnNavigationItemSelectedListener를 통해 탭 아이템 선택 시 이벤트를 처리\r\n        // navi_menu.xml 에서 설정했던 각 아이템들의 id를 통해 알맞은 프래그먼트로 변경하게 한다.\r\n        bnv_main.run { setOnNavigationItemSelectedListener {\r\n            when(it.itemId) { // 홈\r\n                R.id.homeMenu -> {\r\n                    // 다른 프래그먼트 화면으로 이동하는 기능\r\n                    val homeFragment = HomeFragment()\r\n\r\n                    // 사용자 아이디를 Bundle에 추가해서 전달\r\n                    val bundle = Bundle()\r\n                    bundle.putString(\"userId\", userId)\r\n                    homeFragment.arguments = bundle\r\n\r\n                    supportFragmentManager.beginTransaction().replace(R.id.fl_container, homeFragment).commit()\r\n                }\r\n                R.id.jobMenu -> { // 채용공고\r\n                    val jobFragment = WantedListFragment()\r\n                    supportFragmentManager.beginTransaction().replace(R.id.fl_container, jobFragment).commit()\r\n                }\r\n                R.id.resumeMenu -> { // 이력서\r\n                    val resumeFragment = ResumeFragment()\r\n                    // 사용자 아이디를 Bundle에 추가해서 전달\r\n                    val bundle = Bundle()\r\n                    bundle.putString(\"userId\", userId)\r\n                    resumeFragment.arguments = bundle\r\n                    supportFragmentManager.beginTransaction().replace(R.id.fl_container, resumeFragment).commit()\r\n                }\r\n                R.id.communityMenu -> { // 커뮤니티\r\n                    val communityFragment = CommunityFragment()\r\n                    supportFragmentManager.beginTransaction().replace(R.id.fl_container, communityFragment).commit()\r\n                }\r\n                R.id.mypageMenu -> { // 마이페이지\r\n                    val mypageFragment = MypageFragment()\r\n                    supportFragmentManager.beginTransaction().replace(R.id.fl_container, mypageFragment).commit()\r\n                }\r\n            }\r\n            true\r\n        }\r\n            selectedItemId = R.id.homeMenu\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/HomeActivity.kt b/app/src/main/java/com/example/a23_hf069/HomeActivity.kt
---- a/app/src/main/java/com/example/a23_hf069/HomeActivity.kt	(revision 46df6ff108491d2983bad05b3e5272f36a4ee63b)
-+++ b/app/src/main/java/com/example/a23_hf069/HomeActivity.kt	(date 1690377417433)
-@@ -56,12 +56,16 @@
-                 }
-                 R.id.mypageMenu -> { // 마이페이지
-                     val mypageFragment = MypageFragment()
-+                    // 사용자 아이디를 Bundle에 추가해서 전달
-+                    val bundle = Bundle()
-+                    bundle.putString("userId", userId)
-+                    mypageFragment.arguments = bundle
-                     supportFragmentManager.beginTransaction().replace(R.id.fl_container, mypageFragment).commit()
-                 }
-             }
-             true
-         }
--            selectedItemId = R.id.homeMenu
-+            bnv_main.selectedItemId = R.id.homeMenu
-         }
-     }
- }
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28_오후_11_16_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28_오후_11_16_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28_오후_11_16_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28_오후_11_16_[Changes]/shelved.patch	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,624 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.IOException\r\n\r\nclass ResumeChangeActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"3.34.48.60\" // Replace with your IP address.\r\n    private var userId: String = \"\" // User ID\r\n    private var resumeListNum: Int = -1\r\n    private lateinit var editResumeTitle: EditText\r\n    private lateinit var editTextAcademic: EditText\r\n    private lateinit var editTextCareer: EditText\r\n    private lateinit var editTextIntroduction: EditText\r\n    private lateinit var editTextCertificate: EditText\r\n    private lateinit var editTextEducation: EditText\r\n    private lateinit var editTextDesire: EditText\r\n    private lateinit var buttonSubmit1: Button\r\n    private lateinit var buttonSubmit2: Button\r\n\r\n    private lateinit var backButton_change: ImageButton\r\n\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_resume_change)\r\n\r\n        // Get user ID\r\n        resumeListNum = intent.getIntExtra(\"resumeListNum\", -1)\r\n        userId = intent.getStringExtra(\"userId\") ?: \"\"\r\n\r\n        val textID = findViewById<TextView>(R.id.tvChange_ID)\r\n        textID.text = userId\r\n\r\n        editTextAcademic = findViewById(R.id.edtChange_academic)\r\n        editResumeTitle = findViewById(R.id.edtChange_title)\r\n        editTextCareer = findViewById(R.id.edtChange_career)\r\n        editTextIntroduction = findViewById(R.id.edtChange_introduction)\r\n        editTextCertificate = findViewById(R.id.edtChange_certificate)\r\n        editTextEducation = findViewById(R.id.edtChange_education)\r\n        editTextDesire = findViewById(R.id.edtChange_desire)\r\n        buttonSubmit1 = findViewById(R.id.buttonSubmit_temporary_change)\r\n        buttonSubmit2 = findViewById(R.id.buttonSubmit_complete_change)\r\n\r\n        backButton_change = findViewById(R.id.backButton_change)\r\n\r\n        backButton_change.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n\r\n        buttonSubmit1.setOnClickListener { // 임시 저장\r\n            val resume_listnum = resumeListNum.toString()\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 중\"\r\n\r\n            updateResumeData(\r\n                resume_listnum,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 임시저장되었습니다\", Toast.LENGTH_SHORT).show()\r\n            onBackPressed()\r\n        }\r\n\r\n        buttonSubmit2.setOnClickListener { // 작성완료\r\n            val resume_listnum = resumeListNum.toString()\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 완료\"\r\n\r\n            updateResumeData(\r\n                resume_listnum,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 작성완료되었습니다\", Toast.LENGTH_SHORT).show()\r\n            onBackPressed()\r\n        }\r\n\r\n        // 이력서 아이템 데이터 불러오기\r\n        getResumeItemData(resumeListNum)\r\n    }\r\n\r\n    private fun updateResumeData(\r\n        resume_listnum: String,\r\n        resume_title: String,\r\n        resume_academic: String,\r\n        resume_career: String,\r\n        resume_introduction: String,\r\n        resume_certificate: String,\r\n        resume_learning: String,\r\n        resume_desire: String,\r\n        resume_complete: String\r\n    ) {\r\n        val url =\r\n            \"http://$IP_ADDRESS/android_resume_update.php\" // URL of the hosting server with PHP script\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val formBody = FormBody.Builder()\r\n            .add(\"resume_listnum\", resume_listnum) // ListNum\r\n            .add(\"resume_title\", resume_title) // Title\r\n            .add(\"resume_academic\", resume_academic) // Education\r\n            .add(\"resume_career\", resume_career) // Career\r\n            .add(\"resume_introduction\", resume_introduction) // Introduction\r\n            .add(\"resume_certificate\", resume_certificate) // Certification\r\n            .add(\"resume_learning\", resume_learning) // Education history\r\n            .add(\"resume_desire\", resume_desire) // Desired job position\r\n            .add(\"resume_complete\", resume_complete)\r\n            .build()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .post(formBody)\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                // Handle request success\r\n                val responseData = response.body?.string()\r\n\r\n                // UI 업데이트를 위한 runOnUiThread 호출\r\n                runOnUiThread {\r\n                    Toast.makeText(this@ResumeChangeActivity, responseData, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 아이템 데이터 불러오기\r\n    private fun getResumeItemData(resumeListNum: Int) {\r\n        val url =\r\n            \"http://$IP_ADDRESS/android_resume_change.php?resume_listnum=$resumeListNum\" // 데이터를 불러올 PHP 스크립트의 주소\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .get() // GET 방식으로 요청 변경\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                // 이력서 아이템 데이터를 파싱하여 UI 업데이트\r\n                runOnUiThread {\r\n                    handleResumeItemData(responseData)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 아이템 데이터를 처리하는 함수 추가\r\n    private fun handleResumeItemData(responseData: String?) {\r\n        try {\r\n            val jsonObject = JSONObject(responseData) // JSONObject로 파싱\r\n\r\n            // 이력서 아이템 데이터가 존재하는 경우에만 UI 업데이트\r\n            if (jsonObject.length() > 0) {\r\n                // 여기서 이력서 아이템 데이터를 파싱하여 UI에 표시하는 작업을 수행하면 됩니다.\r\n                // 예를 들어, 다음과 같이 각 EditText에 데이터를 설정할 수 있습니다.\r\n                editResumeTitle.setText(jsonObject.optString(\"resumeTitle\", \"\"))\r\n                editTextAcademic.setText(jsonObject.optString(\"resumeAcademic\", \"\"))\r\n                editTextCareer.setText(jsonObject.optString(\"resumeCareer\", \"\"))\r\n                editTextIntroduction.setText(jsonObject.optString(\"resumeIntroduction\", \"\"))\r\n                editTextCertificate.setText(jsonObject.optString(\"resumeCertificate\", \"\"))\r\n                editTextEducation.setText(jsonObject.optString(\"resumeLearning\", \"\"))\r\n                editTextDesire.setText(jsonObject.optString(\"resumeDesire\", \"\"))\r\n            }\r\n        } catch (e: JSONException) {\r\n            // JSON 파싱 오류 처리\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt b/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt
---- a/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt	(date 1690551843023)
-@@ -14,7 +14,7 @@
- import java.io.IOException
- 
- class ResumeChangeActivity : AppCompatActivity() {
--    private var IP_ADDRESS = "3.34.48.60" // Replace with your IP address.
-+    private var IP_ADDRESS = "3.34.136.178" // Replace with your IP address.
-     private var userId: String = "" // User ID
-     private var resumeListNum: Int = -1
-     private lateinit var editResumeTitle: EditText
-Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"3.34.48.60\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1690551843048)
-@@ -19,7 +19,7 @@
- 
- 
- class P_loginFragment : Fragment() { //개인로그인
--    private var IP_ADDRESS = "3.34.48.60" // 본인 IP주소를 넣으세요.
-+    private var IP_ADDRESS = "3.34.136.178" // 본인 IP주소를 넣으세요.
- 
-     private var TAG = "phptest" // phptest log 찍으려는 용도
-     private lateinit var id_text_input_edit_text: EditText // id
-Index: app/src/main/res/layout/activity_individual_sign_up.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".PersonalSignUpActivity\">\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/toolbar\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"?attr/actionBarSize\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/titleTextView\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:text=\"개인회원가입\"\r\n            android:textStyle=\"bold\"\r\n            android:textColor=\"@android:color/black\"\r\n            android:textSize=\"18sp\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/backButton_notice\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"start|center_vertical\"\r\n            android:background=\"@null\"\r\n            android:src=\"@drawable/ic_baseline_arrow_back_ios_24\" />\r\n\r\n    </androidx.appcompat.widget.Toolbar>\r\n\r\n    <ScrollView\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/toolbar\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <!--아이디-->\r\n            <TextView\r\n                android:id=\"@+id/id_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"50dp\"\r\n                android:text=\"아이디\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/id_text_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                app:counterEnabled=\"true\"\r\n                app:counterMaxLength=\"20\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/id_text_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/idCheck_button\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"end\"\r\n                    android:text=\"중복확인\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n\r\n            <!--비밀번호-->\r\n            <TextView\r\n                android:id=\"@+id/password_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"비밀번호\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/password_text_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                app:counterEnabled=\"true\"\r\n                app:counterMaxLength=\"16\"\r\n                app:passwordToggleEnabled=\"true\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/password_text_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:inputType=\"textPassword\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--비밀번호 확인-->\r\n            <TextView\r\n                android:id=\"@+id/password_recheck_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"비밀번호 확인\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/password_recheck_text_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                app:passwordToggleEnabled=\"true\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/password_recheck_text_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:inputType=\"textPassword\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--이름-->\r\n            <TextView\r\n                android:id=\"@+id/name_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"이름\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/name_textview_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/name_textview_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--이메일-->\r\n            <TextView\r\n                android:id=\"@+id/email_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"이메일\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/email_textview_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/email_textview_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--전화번호-->\r\n            <TextView\r\n                android:id=\"@+id/phone_number_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"전화번호\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/phoneNumber_textview_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/phoneNumber_textview_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/phoneNumber_button\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"end\"\r\n                    android:text=\"본인인증\" />\r\n\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--전화번호 인증번호-->\r\n            <TextView\r\n                android:id=\"@+id/phoneNumberCheck_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"인증번호\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/phoneNumberCheck_textview_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/phoneNumberCheck_textview_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/phoneNumberCheck_button\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"end\"\r\n                    android:text=\"확인\" />\r\n\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--회원가입 버튼-->\r\n            <Button\r\n                android:id=\"@+id/signUp_button\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"회원가입\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/textView_main_result\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:visibility=\"invisible\" />\r\n\r\n        </LinearLayout>\r\n\r\n    </ScrollView>\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/activity_individual_sign_up.xml b/app/src/main/res/layout/activity_individual_sign_up.xml
---- a/app/src/main/res/layout/activity_individual_sign_up.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/res/layout/activity_individual_sign_up.xml	(date 1690552596343)
-@@ -224,50 +224,50 @@
-                     android:layout_height="wrap_content"
-                     android:textAppearance="@style/TextLabel" />
- 
--                <Button
--                    android:id="@+id/phoneNumber_button"
--                    android:layout_width="wrap_content"
--                    android:layout_height="wrap_content"
--                    android:layout_gravity="end"
--                    android:text="본인인증" />
-+<!--                <Button-->
-+<!--                    android:id="@+id/phoneNumber_button"-->
-+<!--                    android:layout_width="wrap_content"-->
-+<!--                    android:layout_height="wrap_content"-->
-+<!--                    android:layout_gravity="end"-->
-+<!--                    android:text="본인인증" />-->
- 
-             </com.google.android.material.textfield.TextInputLayout>
- 
-             <!--전화번호 인증번호-->
--            <TextView
--                android:id="@+id/phoneNumberCheck_textview"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:layout_marginStart="40dp"
--                android:layout_marginTop="20dp"
--                android:text="인증번호"
--                android:textColor="@color/black"
--                android:textSize="15sp"
--                android:textStyle="bold" />
-+<!--            <TextView-->
-+<!--                android:id="@+id/phoneNumberCheck_textview"-->
-+<!--                android:layout_width="wrap_content"-->
-+<!--                android:layout_height="wrap_content"-->
-+<!--                android:layout_marginStart="40dp"-->
-+<!--                android:layout_marginTop="20dp"-->
-+<!--                android:text="인증번호"-->
-+<!--                android:textColor="@color/black"-->
-+<!--                android:textSize="15sp"-->
-+<!--                android:textStyle="bold" />-->
- 
- 
--            <com.google.android.material.textfield.TextInputLayout
--                android:id="@+id/phoneNumberCheck_textview_input_layout"
--                style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
--                android:layout_width="match_parent"
--                android:layout_height="wrap_content"
--                android:layout_marginHorizontal="40dp"
--                android:layout_marginTop="10dp">
-+<!--            <com.google.android.material.textfield.TextInputLayout-->
-+<!--                android:id="@+id/phoneNumberCheck_textview_input_layout"-->
-+<!--                style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"-->
-+<!--                android:layout_width="match_parent"-->
-+<!--                android:layout_height="wrap_content"-->
-+<!--                android:layout_marginHorizontal="40dp"-->
-+<!--                android:layout_marginTop="10dp">-->
- 
--                <com.google.android.material.textfield.TextInputEditText
--                    android:id="@+id/phoneNumberCheck_textview_input_edit_text"
--                    android:layout_width="match_parent"
--                    android:layout_height="wrap_content"
--                    android:textAppearance="@style/TextLabel" />
-+<!--                <com.google.android.material.textfield.TextInputEditText-->
-+<!--                    android:id="@+id/phoneNumberCheck_textview_input_edit_text"-->
-+<!--                    android:layout_width="match_parent"-->
-+<!--                    android:layout_height="wrap_content"-->
-+<!--                    android:textAppearance="@style/TextLabel" />-->
- 
--                <Button
--                    android:id="@+id/phoneNumberCheck_button"
--                    android:layout_width="wrap_content"
--                    android:layout_height="wrap_content"
--                    android:layout_gravity="end"
--                    android:text="확인" />
-+<!--                <Button-->
-+<!--                    android:id="@+id/phoneNumberCheck_button"-->
-+<!--                    android:layout_width="wrap_content"-->
-+<!--                    android:layout_height="wrap_content"-->
-+<!--                    android:layout_gravity="end"-->
-+<!--                    android:text="확인" />-->
- 
--            </com.google.android.material.textfield.TextInputLayout>
-+<!--            </com.google.android.material.textfield.TextInputLayout>-->
- 
-             <!--회원가입 버튼-->
-             <Button
-Index: app/src/main/res/layout/fragment_c_login.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".C_loginFragment\">\r\n\r\n    <EditText\r\n        android:id=\"@+id/id_text\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"50dp\"\r\n        android:hint=\"아이디\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/pw_text\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"100dp\"\r\n        android:hint=\"비밀번호\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/login_btn\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"180dp\"\r\n        android:text=\"로그인\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/findID_btn\"\r\n        android:layout_width=\"110dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"아이디찾기\"\r\n        android:layout_marginLeft=\"30dp\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/findPW_btn\"\r\n        android:layout_width=\"120dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"비밀번호찾기\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/signUp_btn\"\r\n        android:layout_width=\"100dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"회원가입\"\r\n        android:layout_marginLeft=\"220dp\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n\r\n</FrameLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_c_login.xml b/app/src/main/res/layout/fragment_c_login.xml
---- a/app/src/main/res/layout/fragment_c_login.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/res/layout/fragment_c_login.xml	(date 1690552920330)
-@@ -42,13 +42,13 @@
- 
-     <Button
-         android:id="@+id/findPW_btn"
--        android:layout_width="120dp"
-+        android:layout_width="129dp"
-         android:layout_height="50dp"
-+        android:layout_gravity="center_horizontal"
-         android:layout_marginTop="250dp"
-         android:backgroundTint="#00FFFFFF"
-         android:outlineProvider="none"
-         android:text="비밀번호찾기"
--        android:layout_gravity="center_horizontal"
-         android:textColor="@color/black" />
- 
-     <Button
-@@ -59,7 +59,7 @@
-         android:backgroundTint="#00FFFFFF"
-         android:outlineProvider="none"
-         android:text="회원가입"
--        android:layout_marginLeft="220dp"
-+        android:layout_marginLeft="270dp"
-         android:textColor="@color/black" />
- 
- 
-Index: app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.widget.ImageButton\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.TextView\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.IOException\r\n\r\nclass NoticeContentActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"3.34.48.60\" // Replace with your IP address.\r\n    private var noticeListNum: Int = -1\r\n    private lateinit var noticeTitle: TextView\r\n    private lateinit var noticeContent: TextView\r\n    private lateinit var noticeDate: TextView\r\n\r\n    private lateinit var backButton_click: ImageButton\r\n\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_notice_content)\r\n\r\n        // Get user ID\r\n        noticeListNum = intent.getIntExtra(\"noticeListNum\", -1)\r\n\r\n        noticeTitle = findViewById(R.id.notice_title)\r\n        noticeContent = findViewById(R.id.notice_content)\r\n        noticeDate = findViewById(R.id.notice_date)\r\n\r\n        backButton_click = findViewById(R.id.backButton_click)\r\n\r\n        // 공지사항 아이템 데이터 불러오기\r\n        getNoticeItemData(noticeListNum)\r\n\r\n        backButton_click.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    // 공지사항 아이템 데이터 불러오기\r\n    private fun getNoticeItemData(noticeListNum: Int) {\r\n        val url =\r\n            \"http://$IP_ADDRESS/android_notice_content.php?notice_listnum=$noticeListNum\" // 데이터를 불러올 PHP 스크립트의 주소\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .get() // GET 방식으로 요청 변경\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val noticeData = response.body?.string()\r\n                // 공지사항 아이템 데이터를 파싱하여 UI 업데이트\r\n                runOnUiThread {\r\n                    handleNoticeItemData(noticeData)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 공지사항 아이템 데이터를 처리하는 함수 추가\r\n    private fun handleNoticeItemData(responseData: String?) {\r\n        try {\r\n            val jsonObject = JSONObject(responseData) // JSONObject로 파싱\r\n\r\n            // 공지사항 아이템 데이터가 존재하는 경우에만 UI 업데이트\r\n            if (jsonObject.length() > 0) {\r\n                // 여기서 공지사항 아이템 데이터를 파싱하여 UI에 표시하는 작업을 수행하면 됩니다.\r\n                // 예를 들어, 다음과 같이 각 EditText에 데이터를 설정할 수 있습니다.\r\n                noticeTitle.setText(jsonObject.optString(\"noticeTitle\", \"\"))\r\n                noticeContent.setText(jsonObject.optString(\"noticeContent\", \"\"))\r\n                noticeDate.setText(jsonObject.optString(\"noticeDate\", \"\"))\r\n            }\r\n        } catch (e: JSONException) {\r\n            // JSON 파싱 오류 처리\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt b/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt
---- a/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt	(date 1690553572725)
-@@ -11,7 +11,7 @@
- import java.io.IOException
- 
- class NoticeContentActivity : AppCompatActivity() {
--    private var IP_ADDRESS = "3.34.48.60" // Replace with your IP address.
-+    private var IP_ADDRESS = "3.34.136.178" // Replace with your IP address.
-     private var noticeListNum: Int = -1
-     private lateinit var noticeTitle: TextView
-     private lateinit var noticeContent: TextView
-Index: app/src/main/res/layout/fragment_p_login.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".P_loginFragment\">\r\n\r\n    <EditText\r\n        android:id=\"@+id/id_text\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"50dp\"\r\n        android:hint=\"아이디\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/pw_text\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"100dp\"\r\n        android:hint=\"비밀번호\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/login_btn\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"180dp\"\r\n        android:text=\"로그인\" />\r\n\r\n\r\n\r\n    <Button\r\n        android:id=\"@+id/findID_btn\"\r\n        android:layout_width=\"110dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"아이디찾기\"\r\n        android:layout_marginLeft=\"30dp\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/findPW_btn\"\r\n        android:layout_width=\"120dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"비밀번호찾기\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/signUp_btn\"\r\n        android:layout_width=\"100dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginLeft=\"270dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"회원가입\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textView_plogin_result\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"600dp\" />\r\n\r\n\r\n</FrameLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_p_login.xml b/app/src/main/res/layout/fragment_p_login.xml
---- a/app/src/main/res/layout/fragment_p_login.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/res/layout/fragment_p_login.xml	(date 1690552920317)
-@@ -44,13 +44,13 @@
- 
-     <Button
-         android:id="@+id/findPW_btn"
--        android:layout_width="120dp"
-+        android:layout_width="130dp"
-         android:layout_height="50dp"
-+        android:layout_gravity="center_horizontal"
-         android:layout_marginTop="250dp"
-         android:backgroundTint="#00FFFFFF"
-         android:outlineProvider="none"
-         android:text="비밀번호찾기"
--        android:layout_gravity="center_horizontal"
-         android:textColor="@color/black" />
- 
-     <Button
-Index: app/src/main/java/com/example/a23_hf069/NoticeActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.a23_hf069.R\r\nimport com.google.gson.Gson\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport java.io.IOException\r\n\r\nclass NoticeActivity : AppCompatActivity() {\r\n    // 서버의 IP 주소를 저장할 변수\r\n    private var IP_ADDRESS = \"3.34.48.60\"\r\n\r\n    private lateinit var backButton_notice: ImageButton\r\n\r\n    // 데이터를 담을 리스트\r\n    private var dataList: List<NoticeItem> = emptyList()\r\n\r\n    // 공지사항 목록을 표시할 RecyclerView 변수\r\n    private lateinit var recyclerViewNotice: RecyclerView\r\n\r\n    // 어댑터를 RecyclerView에 설정\r\n    private lateinit var dataAdapterNotice: RecyclerView.Adapter<NoticeActivity.ViewHolder>\r\n\r\n    data class NoticeItem(val noticeListNum: Int, val noticeTitle: String, val noticeDate: String)\r\n    data class DataListContainer(val noticeList: List<NoticeItem>)\r\n\r\n    // View holder class for DataAdapter\r\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val titleTextView: Button = itemView.findViewById(R.id.tvNotice_title)\r\n        val dateTextView: TextView = itemView.findViewById(R.id.tvNotice_date)\r\n    }\r\n\r\n    // 어댑터 클래스\r\n    inner class DataAdapterNotice : RecyclerView.Adapter<ViewHolder>() {\r\n        // Inflate the layout for each item and return a ViewHolder\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            val itemView = LayoutInflater.from(parent.context)\r\n                .inflate(R.layout.notice_item, parent, false)\r\n            return ViewHolder(itemView)\r\n\r\n        }\r\n\r\n        // Bind data to each item in the RecyclerView\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n            val item = dataList[position]\r\n            holder.titleTextView.setText(item.noticeTitle)\r\n            holder.dateTextView.text = item.noticeDate\r\n\r\n            // 공지사항 제목 버튼 클릭 리스너 설정\r\n            holder.titleTextView.setOnClickListener {\r\n                val intent = Intent(holder.itemView.context, NoticeContentActivity::class.java)\r\n                intent.putExtra(\"noticeListNum\", item.noticeListNum)\r\n                holder.itemView.context.startActivity(intent)\r\n            }\r\n        }\r\n\r\n        // Get the number of items in the list\r\n        override fun getItemCount(): Int {\r\n            return dataList.size\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_notice)\r\n\r\n        // RecyclerView 초기화 후 어댑터 설정\r\n        recyclerViewNotice = findViewById(R.id.recyclerviewNotice)\r\n        recyclerViewNotice.layoutManager = LinearLayoutManager(this)\r\n\r\n        // 어댑터 생성 및 RecyclerView에 설정\r\n        dataAdapterNotice = DataAdapterNotice()\r\n        recyclerViewNotice.adapter = dataAdapterNotice\r\n\r\n        // 사용자의 작성중 이력서 개수와 작성완료 이력서 개수를 업데이트\r\n        fetchDataFromServer()\r\n\r\n        backButton_notice = findViewById(R.id.backButton_notice)\r\n\r\n        backButton_notice.setOnClickListener {\r\n            finish()\r\n        }\r\n    }\r\n\r\n    // 서버로부터 데이터를 가져오는 메서드\r\n    private fun fetchDataFromServer() {\r\n        // 서버로 사용자 아이디를 전송하여 이력서 데이터를 가져오도록 요청\r\n        val phpUrl = \"http://$IP_ADDRESS/android_notice.php\"\r\n        val requestBody = FormBody.Builder()\r\n            .build()\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .post(requestBody)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                // 서버로부터 응답을 받았을 때 호출되는 콜백 메서드\r\n                val responseData = response.body?.string()\r\n                Log.d(\"ServerResponse\", responseData ?: \"No response data\")\r\n                if (responseData != null) {\r\n                    try {\r\n                        // JSON 파싱을 위해 Gson 객체 생성\r\n                        val gson = Gson()\r\n\r\n                        // 서버 응답 데이터를 담는 컨테이너 클래스로 파싱\r\n                        val dataListContainer =\r\n                            gson.fromJson(responseData, DataListContainer::class.java)\r\n\r\n                        // UI 업데이트는 메인 스레드에서 실행되어야 함\r\n                        runOnUiThread {\r\n                            // 가져온 공지사항 데이터 리스트를 어댑터에 설정하여 RecyclerView 업데이트\r\n                            dataList = dataListContainer?.noticeList?.reversed() ?: emptyList() // 데이터를 역순으로 설정\r\n                            dataAdapterNotice.notifyDataSetChanged()\r\n                        }\r\n                    } catch (e: JSONException) {\r\n                        // JSON 파싱 오류 발생한 경우\r\n                        Log.e(\"JSONParsingError\", \"Invalid JSON format: $responseData\")\r\n                    }\r\n                } else {\r\n                    // responseData가 null인 경우에 대한 처리를 여기에 추가\r\n                    Log.e(\"ServerResponse\", \"Response data is null\")\r\n                    Toast.makeText(this@NoticeActivity, \"서버로부터 응답이 없습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/NoticeActivity.kt b/app/src/main/java/com/example/a23_hf069/NoticeActivity.kt
---- a/app/src/main/java/com/example/a23_hf069/NoticeActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/java/com/example/a23_hf069/NoticeActivity.kt	(date 1690553572706)
-@@ -21,7 +21,7 @@
- 
- class NoticeActivity : AppCompatActivity() {
-     // 서버의 IP 주소를 저장할 변수
--    private var IP_ADDRESS = "3.34.48.60"
-+    private var IP_ADDRESS = "3.34.136.178"
- 
-     private lateinit var backButton_notice: ImageButton
- 
-Index: app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.AdapterView\r\nimport androidx.appcompat.app.ActionBar\r\nimport android.app.ProgressDialog\r\nimport android.os.AsyncTask\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass PersonalSignUpActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener {\r\n\r\n    // IP 주소와 태그를 초기화\r\n    private var IP_ADDRESS = \"3.34.48.60\" // 본인 IP주소를 넣으세요.\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private var checkID = false\r\n\r\n    // 뷰 요소들을 선언\r\n    private lateinit var backButton: ImageButton // go back to prev page\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var idcheck_button: Button // id duplicate check\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var password_recheck_text_input_edit_text: EditText // password recheck\r\n    private lateinit var name_textview_input_edit_text: EditText // name\r\n    private lateinit var email_textview_input_edit_text: EditText // email\r\n    private lateinit var phoneNumber_textview_input_edit_text: EditText // phone number\r\n    private lateinit var phoneNumber_button: Button // identification\r\n    private lateinit var phoneNumberCheck_textview_input_edit_text: EditText // identification number\r\n    private lateinit var phoneNumberCheck_button: Button // identification check button\r\n    private lateinit var signUp_button: Button // sign up button\r\n\r\n    // TextView 요소인 mTextViewResult 선언\r\n    private lateinit var mTextViewResult: TextView\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_individual_sign_up)\r\n\r\n        // 기본 툴바 숨기기\r\n        val actionBar: ActionBar? = supportActionBar\r\n        if (actionBar != null) {\r\n            actionBar.hide()\r\n        }\r\n\r\n        // 각 뷰의 요소들과 레이아웃 파일에서의 아이디 연결\r\n        backButton = findViewById(R.id.backButton_notice)  // go back to prev page\r\n        id_text_input_edit_text = findViewById(R.id.id_text_input_edit_text) // personal id\r\n        idcheck_button = findViewById(R.id.idCheck_button) // id duplicate check\r\n        password_text_input_edit_text = findViewById(R.id.password_text_input_edit_text) // personal password\r\n        password_recheck_text_input_edit_text = findViewById(R.id.password_recheck_text_input_edit_text) // password recheck\r\n        name_textview_input_edit_text = findViewById(R.id.name_textview_input_edit_text) // personal name\r\n        email_textview_input_edit_text = findViewById(R.id.email_textview_input_edit_text) // personal email\r\n        phoneNumber_textview_input_edit_text = findViewById(R.id.phoneNumber_textview_input_edit_text) // personal phonenum\r\n        phoneNumber_button = findViewById(R.id.phoneNumber_button) // identification\r\n        phoneNumberCheck_textview_input_edit_text = findViewById(R.id.phoneNumberCheck_textview_input_edit_text) // identification number\r\n        phoneNumberCheck_button = findViewById(R.id.phoneNumberCheck_button) // identification check button\r\n        signUp_button = findViewById(R.id.signUp_button) // sign up button\r\n\r\n        // mTextViewResult를 스크롤 가능하도록 설정\r\n        mTextViewResult = findViewById(R.id.textView_main_result)\r\n        mTextViewResult.movementMethod = ScrollingMovementMethod()\r\n\r\n        // 클릭 시 현재 액티비티 종료\r\n        backButton.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        // 버튼 클릭 시 아이디 중복 확인 과정 수행\r\n        idcheck_button.setOnClickListener {\r\n            val id = id_text_input_edit_text.text.toString().trim()\r\n\r\n            // 아이디가 비어있는지 확인\r\n            if (id.isEmpty()) {\r\n                Toast.makeText(this@PersonalSignUpActivity, \"아이디를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                // 'CheckIdDuplicate' 클래스의 인스턴스인 'task'를 생성\r\n                val task = CheckIdDuplicate()\r\n\r\n                // 'task'의 'execute' 메서드를 호출해 백그라운드에서 아이디 중복 여부 확인\r\n                task.execute(\"http://$IP_ADDRESS/android_id_check.php\", id)\r\n            }\r\n        }\r\n\r\n        // 버튼 클릭 시 회원가입 과정 수행\r\n        signUp_button.setOnClickListener {\r\n            val id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n            val password_recheck = password_recheck_text_input_edit_text.text.toString().trim()\r\n            val name = name_textview_input_edit_text.text.toString().trim()\r\n            val email = email_textview_input_edit_text.text.toString().trim()\r\n            val phoneNumber = phoneNumber_textview_input_edit_text.text.toString().trim()\r\n            val phoneNumberCheck = phoneNumberCheck_textview_input_edit_text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty() || password_recheck.isEmpty() || name.isEmpty() || email.isEmpty() || phoneNumber.isEmpty()) {\r\n                Toast.makeText(this@PersonalSignUpActivity, \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                if (password == password_recheck) {\r\n                    if (password.length <= 5) {\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"비밀번호를 6자리 이상 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                    } else if (!email.contains(\"@\")) {\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"아이디에 @ 및 .com을 포함시키세요.\", Toast.LENGTH_SHORT).show()\r\n                    } else if (phoneNumber.contains(\"-\") || !(phoneNumber[1] == '1')) {\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"올바른 전화번호 형식으로 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                    } else if (checkID == false) {\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"아이디를 확인해주세요.\", Toast.LENGTH_SHORT).show()\r\n                    } else {\r\n                        // 'InsertData' 클래스의 인스턴스인 'task'를 생성\r\n                        val task = InsertData()\r\n\r\n                        // 'task'의 'execute'메서드를 호출해 백그라운드에서 데이터를 삽입\r\n                        task.execute(\r\n                            // 'execute' 메서드에 서버 URL과 회원가입에 필요한 개인정보를 전달\r\n                            \"http://$IP_ADDRESS/android_log_insert_php.php\",\r\n                            id,\r\n                            password,\r\n                            password_recheck,\r\n                            name,\r\n                            email,\r\n                            phoneNumber\r\n                        )\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"회원가입에 성공하셨습니다.\", Toast.LENGTH_SHORT).show()\r\n                        finish()\r\n                    }\r\n                } else {\r\n                    Toast.makeText(this@PersonalSignUpActivity, \"비밀번호가 일치하지 않습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // AsyncTask를 상속받고, 서버로 데이터를 전송\r\n    inner class InsertData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n\r\n        // 백그라운드 작업 실행 전 실행, 프로그레스 다이얼로그 표시\r\n        override fun onPreExecute() {\r\n            super.onPreExecute()\r\n            progressDialog = ProgressDialog.show(\r\n                this@PersonalSignUpActivity,\r\n                \"Please Wait\",\r\n                null,\r\n                true,\r\n                true\r\n            )\r\n        }\r\n\r\n        // 백그라운드 작업 완료 후 실행, 결과를 처리하고 프로그레스 다이얼로그 종료\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n            progressDialog?.dismiss()\r\n            mTextViewResult.text = result\r\n            Log.d(TAG, \"POST response  - $result\")\r\n        }\r\n\r\n        // 백그라운드에서 수행될 작업 정의, 서버로 데이터 전송 & 응답을 받아 처리\r\n        // AsyncTask의 Params 매개변수로 가변 인자를 받아 String을 반환\r\n        override fun doInBackground(vararg params: String): String {\r\n\r\n            // param 배열에서 서버 URL과 각각의 개인정보 추출\r\n            val serverURL = params[0]\r\n            val personal_id = params[1]\r\n            val personal_password = params[2]\r\n            val personal_password_chk = params[3]\r\n            val personal_name = params[4]\r\n            val personal_email = params[5]\r\n            val personal_phonenum = params[6]\r\n\r\n            // POST 요청으로 전송할 파라미터 문자열 구성\r\n            val postParameters =\r\n                \"personal_id=$personal_id&personal_password=$personal_password&personal_password_chk=$personal_password_chk&personal_name=$personal_name&personal_email=$personal_email&personal_phonenum=$personal_phonenum\"\r\n\r\n            // 'serverURL'을 기반으로 URL 객체 생성, 'openConnection'메서드를 사용해 HttpURLconnection 객체 얻음\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                // 연결과 읽기 타임아웃 설정\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n\r\n                // 요청 메서드를 POST로 설정정\r\n                httpURLConnection.requestMethod = \"POST\"\r\n\r\n                // 서버에 연결\r\n                httpURLConnection.connect()\r\n\r\n                // 연결에 대한 출력 스트림을 얻고, 파라미터를 'UTF-8'로 인코딩하여 전송\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                // 서버로부터 응답 상태 코드 얻음\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                // 응답 상태 코드가 'HTTP_OK(200)'인 경우, 'inputStream'을 얻고, 아닌 경우 'errorStream'을 얻음\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                // 'inputStream'을 'UTF-8'로 읽기 위해 'InputStreadReader'와 'BufferedReader'를 생성\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n\r\n                // 'StringBuilder'를 사용해 응답 데이터를 한 줄씩 읽어 연결\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                // 'bufferReader' 닫기\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n\r\n                // 'sb.toString()'을 반환하여 응답 데이터를 반환\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"InsertData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n    }\r\n\r\n    // 아이템이 선택되었을 때 호출\r\n    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {}\r\n\r\n    // 아무것도 선택되지 않았을 때 호출\r\n    override fun onNothingSelected(parent: AdapterView<*>?) {}\r\n\r\n    // AsyncTask를 상속받고, 서버로 아이디 중복 여부 확인을 위한 데이터를 전송\r\n    inner class CheckIdDuplicate : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n\r\n        // 백그라운드 작업 실행 전 실행, 프로그레스 다이얼로그 표시\r\n        override fun onPreExecute() {\r\n            super.onPreExecute()\r\n            progressDialog = ProgressDialog.show(\r\n                this@PersonalSignUpActivity,\r\n                \"Please Wait\",\r\n                null,\r\n                true,\r\n                true\r\n            )\r\n        }\r\n\r\n        // 백그라운드 작업 완료 후 실행, 결과를 처리하고 프로그레스 다이얼로그 종료\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n            progressDialog?.dismiss()\r\n            if (result == \"duplicate\") {\r\n                Toast.makeText(this@PersonalSignUpActivity, \"중복된 아이디입니다.\", Toast.LENGTH_SHORT).show()\r\n                checkID = false\r\n            } else {\r\n                Toast.makeText(this@PersonalSignUpActivity, \"사용 가능한 아이디입니다.\", Toast.LENGTH_SHORT).show()\r\n                checkID = true\r\n            }\r\n        }\r\n\r\n        // 백그라운드에서 수행될 작업 정의, 서버로 데이터 전송 & 응답을 받아 처리\r\n        // AsyncTask의 Params 매개변수로 가변 인자를 받아 String을 반환\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val id = params[1]\r\n\r\n            // POST 요청으로 전송할 파라미터 문자열 구성\r\n            val postParameters = \"personal_id=$id\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(TAG, \"php 값: ${sb.toString()}\")\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"CheckIdDuplicate: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt b/app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt
---- a/app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt	(date 1690553197685)
-@@ -23,7 +23,7 @@
- class PersonalSignUpActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener {
- 
-     // IP 주소와 태그를 초기화
--    private var IP_ADDRESS = "3.34.48.60" // 본인 IP주소를 넣으세요.
-+    private var IP_ADDRESS = "3.34.136.178" // 본인 IP주소를 넣으세요.
-     private var TAG = "phptest" // phptest log 찍으려는 용도
-     private var checkID = false
- 
-@@ -63,9 +63,9 @@
-         name_textview_input_edit_text = findViewById(R.id.name_textview_input_edit_text) // personal name
-         email_textview_input_edit_text = findViewById(R.id.email_textview_input_edit_text) // personal email
-         phoneNumber_textview_input_edit_text = findViewById(R.id.phoneNumber_textview_input_edit_text) // personal phonenum
--        phoneNumber_button = findViewById(R.id.phoneNumber_button) // identification
--        phoneNumberCheck_textview_input_edit_text = findViewById(R.id.phoneNumberCheck_textview_input_edit_text) // identification number
--        phoneNumberCheck_button = findViewById(R.id.phoneNumberCheck_button) // identification check button
-+        // phoneNumber_button = findViewById(R.id.phoneNumber_button) // identification
-+        // phoneNumberCheck_textview_input_edit_text = findViewById(R.id.phoneNumberCheck_textview_input_edit_text) // identification number
-+        // phoneNumberCheck_button = findViewById(R.id.phoneNumberCheck_button) // identification check button
-         signUp_button = findViewById(R.id.signUp_button) // sign up button
- 
-         // mTextViewResult를 스크롤 가능하도록 설정
-@@ -101,7 +101,7 @@
-             val name = name_textview_input_edit_text.text.toString().trim()
-             val email = email_textview_input_edit_text.text.toString().trim()
-             val phoneNumber = phoneNumber_textview_input_edit_text.text.toString().trim()
--            val phoneNumberCheck = phoneNumberCheck_textview_input_edit_text.toString().trim()
-+            // val phoneNumberCheck = phoneNumberCheck_textview_input_edit_text.toString().trim()
- 
-             if (id.isEmpty() || password.isEmpty() || password_recheck.isEmpty() || name.isEmpty() || email.isEmpty() || phoneNumber.isEmpty()) {
-                 Toast.makeText(this@PersonalSignUpActivity, "정보를 입력해주세요.", Toast.LENGTH_SHORT).show()
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ /dev/null	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-@@ -1,83 +0,0 @@
--Index: app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport okhttp3.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONException\r\nimport java.io.IOException\r\n\r\nclass ResumeFragment : Fragment() {\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n    private lateinit var userId: String // 사용자 아이디\r\n\r\n    private lateinit var buttonSubmit: Button\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var dataAdapter: DataAdapter\r\n    private val dataList: MutableList<Data> = mutableListOf()  // DB에서 가져온 데이터 리스트\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view = inflater.inflate(R.layout.fragment_resume, container, false)\r\n\r\n        // 사용자 아이디 받아오기\r\n        if (arguments != null) {\r\n            userId = arguments?.getString(\"userId\", \"\") ?: \"\"\r\n        }\r\n\r\n        val textID = view.findViewById<TextView>(R.id.tvID1)\r\n        textID.text = userId\r\n\r\n        // RecyclerView 초기화\r\n        recyclerView = view.findViewById(R.id.recyclerviewResume)\r\n        recyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n        dataAdapter = DataAdapter(dataList)\r\n        recyclerView.adapter = dataAdapter\r\n\r\n        // PHP 파일 URL\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_php.php\"\r\n\r\n        // HTTP 요청 보내기\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (responseData != null) {\r\n                    // 응답 데이터 처리\r\n                    handleResponseData(responseData)\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n\r\n        buttonSubmit = view.findViewById<Button>(R.id.buttonSubmit)\r\n        buttonSubmit.setOnClickListener {\r\n            val intent = Intent(requireContext(), ResumeWriteActivity::class.java)\r\n            intent.putExtra(\"userId\", userId)\r\n            startActivity(intent)\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    private fun handleResponseData(responseData: String) {\r\n        try {\r\n            // JSON 데이터 파싱\r\n            val jsonArray = JSONArray(responseData)\r\n            for (i in 0 until jsonArray.length()) {\r\n                val jsonObject = jsonArray.getJSONObject(i)\r\n                val resumeTitle = jsonObject.getString(\"resumeTitle\")\r\n                val writeStatus = jsonObject.getString(\"writeStatus\")\r\n                val data = Data(resumeTitle, writeStatus)\r\n                dataList.add(data)\r\n            }\r\n\r\n            // RecyclerView 갱신\r\n            dataAdapter.notifyDataSetChanged()\r\n        } catch (e: JSONException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n\r\ndata class Data(val resumeTitle: String, val writeStatus: String)\r\n\r\nclass DataAdapter(private val dataList: List<Data>) :\r\n    RecyclerView.Adapter<DataAdapter.ViewHolder>() {\r\n\r\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val textViewTitle: TextView = itemView.findViewById(R.id.tvResumeTitle)\r\n        val textViewStatus: TextView = itemView.findViewById(R.id.tvWriteStatus)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.resume_item, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val data = dataList[position]\r\n        holder.textViewTitle.text = data.resumeTitle\r\n        holder.textViewStatus.text = data.writeStatus\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return dataList.size\r\n    }\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(revision fd535982a1c40adfc88f35a19b767f6492daa760)
--+++ b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(date 1689778945719)
--@@ -13,12 +13,12 @@
-- import okhttp3.*
-- import org.json.JSONArray
-- import org.json.JSONException
--+import org.json.JSONObject
-- import java.io.IOException
-- 
-- class ResumeFragment : Fragment() {
---    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
--+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
--     private lateinit var userId: String // 사용자 아이디
---
--     private lateinit var buttonSubmit: Button
--     private lateinit var recyclerView: RecyclerView
--     private lateinit var dataAdapter: DataAdapter
--@@ -42,11 +42,15 @@
--         recyclerView.adapter = dataAdapter
-- 
--         // PHP 파일 URL
---        val phpUrl = "http://$IP_ADDRESS/android_resume_php.php"
--+        val phpUrl = "http://$IP_ADDRESS/android_resume2.php"
-- 
---        // HTTP 요청 보내기
--+        val requestBody = FormBody.Builder()
--+            .add("personal_id", userId)
--+            .build()
--+
--         val request = Request.Builder()
--             .url(phpUrl)
--+            .post(requestBody)
--             .build()
-- 
--         val client = OkHttpClient()
--@@ -77,18 +81,32 @@
-- 
--     private fun handleResponseData(responseData: String) {
--         try {
---            // JSON 데이터 파싱
---            val jsonArray = JSONArray(responseData)
---            for (i in 0 until jsonArray.length()) {
---                val jsonObject = jsonArray.getJSONObject(i)
---                val resumeTitle = jsonObject.getString("resumeTitle")
---                val writeStatus = jsonObject.getString("writeStatus")
--+            val jsonObject = JSONObject(responseData)
--+            // cnt1_result와 cnt2_result 값 추출
--+            val cnt1Result = jsonObject.getInt("cnt1_result")
--+            val cnt2Result = jsonObject.getInt("cnt2_result")
--+
--+            // UI 업데이트를 메인 스레드에서 수행
--+            requireActivity().runOnUiThread {
--+                val resumeTemCnt = requireView().findViewById<TextView>(R.id.textView_resume_temporary_count)
--+                val resumeComCnt = requireView().findViewById<TextView>(R.id.textView_resume_complete_count)
--+                resumeTemCnt.text = cnt1Result.toString()
--+                resumeComCnt.text = cnt2Result.toString()
--+            }
--+
--+            val dataArray = jsonObject.getJSONArray("data")
--+            for (i in 0 until dataArray.length()) {
--+                val dataObject = dataArray.getJSONObject(i)
--+                val resumeTitle = dataObject.getString("resume_title")
--+                val writeStatus = dataObject.getString("resume_complete")
--                 val data = Data(resumeTitle, writeStatus)
--                 dataList.add(data)
--             }
-- 
--             // RecyclerView 갱신
---            dataAdapter.notifyDataSetChanged()
--+            requireActivity().runOnUiThread {
--+                dataAdapter.notifyDataSetChanged()
--+            }
--         } catch (e: JSONException) {
--             e.printStackTrace()
--         }
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__8_07__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__8_07__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__8_07__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__8_07__Changes_.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ /dev/null	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]" date="1689937643616" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-21 오후 8:07 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__4_01__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__4_01__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__4_01__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__4_01__Changes_.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ /dev/null	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]" date="1689922917922" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-21 오후 4:01 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ /dev/null	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-@@ -1,172 +0,0 @@
--Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.ListView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.time.LocalDate\r\n\r\n\r\nclass WantedFilteringFragment : Fragment() {\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var jobListView: ListView\r\n\r\n    lateinit var regioncl_btn: Button\r\n    lateinit var jobcl_btn: Button\r\n    lateinit var tv_jobcl_selected: TextView\r\n    lateinit var tv_regioncl_selected: TextView\r\n\r\n    lateinit var edu_btn1: Button\r\n    lateinit var edu_btn2: Button\r\n    lateinit var edu_btn3: Button\r\n    lateinit var edu_btn4: Button\r\n    lateinit var edu_btn5: Button\r\n    lateinit var edu_btn6: Button\r\n\r\n    lateinit var career_btn1: Button\r\n    lateinit var career_btn2: Button\r\n    lateinit var career_btn3: Button\r\n\r\n    lateinit var closeDt_btn1: Button\r\n    lateinit var closeDt_btn2: Button\r\n    lateinit var closeDt_btn3: Button\r\n    lateinit var closeDt_btn4: Button\r\n    lateinit var closeDt_btn5: Button\r\n    lateinit var closeDt_btn6: Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1: Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역 선택\r\n        regioncl_btn = view.findViewById<Button>(R.id.regioncl_btn)\r\n        //직종 선택\r\n        jobcl_btn = view.findViewById<Button>(R.id.jobcl_btn)\r\n\r\n        jobcl_btn.setOnClickListener {\r\n            val jobSelectionFragment = JobWorkNetSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, jobSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        regioncl_btn.setOnClickListener {\r\n            val regionSelectionFragment = RegionSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        // 선택된 지역 정보를 나타낼 TextView 초기화\r\n        tv_regioncl_selected = view.findViewById(R.id.tv_regioncl_selected)\r\n\r\n        // RegionSelectionFragment에서 선택된 직종 정보를 가져와서 tv_regioncl_selected에 설정\r\n        val selectedRegion = arguments?.getString(\"selectedRegion\")\r\n        tv_regioncl_selected.text = selectedRegion\r\n\r\n        // 선택된 직종 정보를 나타낼 TextView 초기화\r\n        tv_jobcl_selected = view.findViewById(R.id.tv_jobcl_selected)\r\n\r\n        // JobSelectionFragment에서 선택된 직종 정보를 가져와서 tv_jobcl_selected에 설정\r\n        val selectedJob = arguments?.getString(\"selectedJob\")\r\n        tv_jobcl_selected.text = selectedJob\r\n\r\n\r\n\r\n\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n    // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 오늘\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 내일\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 1주이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 30일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이상\r\n\r\n        //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val fetchJobData = FetchJobData()\r\n            fetchJobData.execute(\"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=1&display=10\")\r\n\r\n        // 새로운 리스트를 생성하여 필터링된 항목을 저장\r\n            val filteredJobList = fetchJobData.get().toMutableList()\r\n\r\n        // WantedFilteredFragment로 전달\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            val args = Bundle()\r\n            args.putParcelableArrayList(\"filteredJobList\", ArrayList(filteredJobList))\r\n            wantedFilteredFragment.arguments = args\r\n\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n                selectedEducationList.add(0)\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList =\r\n            if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList =\r\n            if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        //각각의 리스트에 담긴 Int형의 데이터들을 String 타입으로 변환\r\n        val convertedEducationList = filteredEducationList.map { value ->\r\n            when (value) {\r\n                0 -> \"00\"\r\n                1 -> \"01\"\r\n                2 -> \"02\"\r\n                3 -> \"03\"\r\n                4 -> \"04\"\r\n                5 -> \"05\"\r\n                else -> {}\r\n            }\r\n        }\r\n        val convertedCareerList = filteredCareerList.map { value ->\r\n            when (value) {\r\n                0 -> \"N\"\r\n                1 -> \"E\"\r\n                2 -> \"Z\"\r\n\r\n                else -> {}\r\n            }\r\n        }\r\n    val convertedCloseDateList = filteredCloseDateList.map { value ->\r\n        val today = LocalDate.now()\r\n        val deadlineDate = when (value) {\r\n           // 0 ->      //전체\r\n            1 -> today // 오늘\r\n            2 -> today.plusDays(1) // 내일\r\n            3 -> today.plusDays(7) // 1주 이내\r\n            4 -> today.plusMonths(1) // 한달 이내\r\n            else -> {today.plusMonths(1) // 한달 이상\r\n             }\r\n        }\r\n        deadlineDate.toString() // 날짜를 문자열로 변환하여 반환\r\n        //xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값\r\n    }\r\n}\r\n\r\n    //워크넷 api 채용목록 xml파일 parsing하는 코드\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        //각각의 리스트에서 추출된 값을 파싱된 xml파일과 대조 -> 중복 건 찾기\r\n        @RequiresApi(Build.VERSION_CODES.O)\r\n        private fun isJobMatched(job: Job): Boolean {\r\n            val convertedEducationList = listOf(\r\n                \"00\", \"01\", \"02\", \"03\", \"04\", \"05\"\r\n            ) // 전체, 초등학교, 중학교, 고등학교, 대학(2년제), 대학(4년제)\r\n            val convertedCareerList = listOf(\r\n                \"N\", \"E\", \"Z\"\r\n            ) // 전체, 신입, 경력\r\n            val convertedCloseDateList = listOf(\r\n                LocalDate.now().toString(), // 오늘\r\n                LocalDate.now().plusDays(1).toString(), // 내일\r\n                LocalDate.now().plusDays(7).toString(), // 1주 이내\r\n                LocalDate.now().plusMonths(1).toString(), // 한달 이내\r\n                LocalDate.now().plusMonths(1).toString() // 한달 이상\r\n            )\r\n\r\n            return convertedEducationList.contains(job.minEdubg) &&\r\n                    convertedCareerList.contains(job.career) &&\r\n                    convertedCloseDateList.contains(job.closeDt)\r\n        }\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter3(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity3.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter3(private val context3: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context3, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context3).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity3 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity3::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    }
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689867005254)
--@@ -244,11 +244,10 @@
--             2 -> today.plusDays(1) // 내일
--             3 -> today.plusDays(7) // 1주 이내
--             4 -> today.plusMonths(1) // 한달 이내
---            else -> {today.plusMonths(1) // 한달 이상
---             }
--+            else -> {}
--         }
--         deadlineDate.toString() // 날짜를 문자열로 변환하여 반환
---        //xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값
--+        //남은기한 = xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값
--     }
-- }
-- 
--@@ -369,6 +368,8 @@
--                     convertedCareerList.contains(job.career) &&
--                     convertedCloseDateList.contains(job.closeDt)
--         }
--+
--+
--         override fun onPostExecute(result: List<Job>) {
--             jobList = result
--             showJobList()
--@@ -376,6 +377,7 @@
--     }
-- 
--     private fun showJobList() {
--+        if (::jobListView.isInitialized) {
--         val adapter = CustomAdapter3(requireActivity(), jobList)
--         jobListView.adapter = adapter
-- 
--@@ -384,6 +386,7 @@
--             val intent = JobDetailActivity3.newIntent(requireContext(), job)
--             startActivity(intent)
--         }
--+        }
--     }
-- }
-- 
--Index: app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.os.Parcel\r\nimport android.os.Parcelable\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Button\r\nimport android.widget.ListView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContentProviderCompat.requireContext\r\nimport androidx.fragment.app.Fragment\r\nimport com.example.a23_hf069.databinding.FragmentWantedWorkNetBinding\r\nimport com.example.a23_hf069.databinding.ActivityJobDetailBinding\r\nimport com.example.a23_hf069.databinding.JobItemBinding\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedWorkNetFragment : Fragment() {\r\n\r\n    private lateinit var binding: FragmentWantedWorkNetBinding\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var jobListView: ListView  // jobListView 변수 선언\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentWantedWorkNetBinding.inflate(inflater, container, false)\r\n        val view = binding.root\r\n\r\n        // UI 요소 초기화\r\n        jobListView = binding.jobListView  // jobListView 초기화\r\n        prevButton = binding.prevButton\r\n        nextButton = binding.nextButton\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // API 호출\r\n        fetchJobData()\r\n\r\n        return view\r\n    }\r\n\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter(jobList, requireContext())\r\n        binding.jobListView.adapter = adapter\r\n\r\n        binding.jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter(private val jobList: List<Job>, private val fragmentContext: Context) :\r\n    ArrayAdapter<Job>(fragmentContext, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val binding = convertView?.let { JobItemBinding.bind(it) }\r\n            ?: JobItemBinding.inflate(LayoutInflater.from(fragmentContext), parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        binding.titleTextView.text = job.title\r\n        binding.companyTextView.text = job.company\r\n        binding.regionContTextView.text = job.region\r\n\r\n        return binding.root\r\n    }\r\n}\r\n\r\n\r\nclass JobDetailActivity : AppCompatActivity() {\r\n\r\n    private lateinit var binding: ActivityJobDetailBinding\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context: Context, job: Job): Intent {\r\n            return Intent(context, JobDetailActivity::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityJobDetailBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        setContentView(view)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        binding.company.text = job?.company\r\n        binding.title.text = job?.title\r\n        binding.salTpNm.text = job?.salTpNm\r\n        binding.sal.text = job?.sal\r\n        binding.region.text = job?.region\r\n        binding.holidayTpNm.text = job?.holidayTpNm\r\n        binding.minEdubg.text = job?.minEdubg\r\n        binding.career.text = job?.career\r\n        binding.closeDt.text = job?.closeDt\r\n        binding.wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        binding.jobsCd.text = job?.jobsCd\r\n\r\n        binding.backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}\r\n\r\ndata class Job(\r\n    val company: String,\r\n    val title: String,\r\n    val salTpNm: String?,\r\n    val sal: String?,\r\n    val region: String?,\r\n    val holidayTpNm: String?,\r\n    val minEdubg: String?,\r\n    val career: String?,\r\n    val closeDt: String?,\r\n    val wantedMobileInfoUrl: String?,\r\n    val jobsCd: String?\r\n) : Parcelable {\r\n    constructor(parcel: Parcel) : this(\r\n        parcel.readString() ?: \"\",\r\n        parcel.readString() ?: \"\",\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString()\r\n    )\r\n\r\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\r\n        parcel.writeString(company)\r\n        parcel.writeString(title)\r\n        parcel.writeString(salTpNm)\r\n        parcel.writeString(sal)\r\n        parcel.writeString(region)\r\n        parcel.writeString(holidayTpNm)\r\n        parcel.writeString(minEdubg)\r\n        parcel.writeString(career)\r\n        parcel.writeString(closeDt)\r\n        parcel.writeString(wantedMobileInfoUrl)\r\n        parcel.writeString(jobsCd)\r\n    }\r\n\r\n    override fun describeContents(): Int {\r\n        return 0\r\n    }\r\n\r\n    companion object CREATOR : Parcelable.Creator<Job> {\r\n        override fun createFromParcel(parcel: Parcel): Job {\r\n            return Job(parcel)\r\n        }\r\n\r\n        override fun newArray(size: Int): Array<Job?> {\r\n            return arrayOfNulls(size)\r\n        }\r\n    }\r\n}\r\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt	(date 1689864881019)
--@@ -204,7 +204,6 @@
--     }
-- }
-- 
---
-- class JobDetailActivity : AppCompatActivity() {
-- 
--     private lateinit var binding: ActivityJobDetailBinding
--Index: app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedFilteredFragment : Fragment() {\r\n    private lateinit var jobListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)\r\n\r\n        // UI 요소 초기화\r\n        jobListView = view.findViewById(R.id.jobListView)\r\n        prevButton = view.findViewById(R.id.prevButton)\r\n        nextButton = view.findViewById(R.id.nextButton)\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // WantedFilteringFragment.kt에서 argument를 넘겨받아 필터링된 데이터 출력\r\n        val args = arguments\r\n        val filteredJobList = args?.getParcelableArrayList<Job>(\"filteredJobList\")\r\n        filteredJobList?.let {\r\n            jobList = it\r\n            showJobList()\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter2(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity2.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity2 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity2::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
----- a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
--+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(date 1689865964085)
--@@ -4,12 +4,15 @@
-- import android.content.Intent
-- import android.os.AsyncTask
-- import android.os.Bundle
--+import android.os.Parcel
--+import android.os.Parcelable
-- import android.view.LayoutInflater
-- import android.view.View
-- import android.view.ViewGroup
-- import android.widget.*
-- import androidx.appcompat.app.AppCompatActivity
-- import androidx.fragment.app.Fragment
--+import com.example.a23_hf069.databinding.ActivityJobDetailBinding
-- import org.xmlpull.v1.XmlPullParser
-- import org.xmlpull.v1.XmlPullParserFactory
-- import java.io.InputStream
--@@ -200,6 +203,7 @@
--     }
-- }
-- 
--+//채용공고 클릭하면 상세정보 출력
-- class JobDetailActivity2 : AppCompatActivity() {
--     private lateinit var backButton: ImageView
--     private lateinit var company: TextView // 회사명
--@@ -244,7 +248,7 @@
--         wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
--         jobsCd = findViewById(R.id.jobsCd)
-- 
---        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
--+        val job = intent.getParcelableExtra<Job2>(JOB_EXTRA)
-- 
--         company.text = job?.company
--         title.text = job?.title
--@@ -262,4 +266,60 @@
--             onBackPressed()
--         }
--     }
--+}
--+
--+data class Job2(
--+    val company: String,
--+    val title: String,
--+    val salTpNm: String?,
--+    val sal: String?,
--+    val region: String?,
--+    val holidayTpNm: String?,
--+    val minEdubg: String?,
--+    val career: String?,
--+    val closeDt: String?,
--+    val wantedMobileInfoUrl: String?,
--+    val jobsCd: String?
--+) : Parcelable {
--+    constructor(parcel: Parcel) : this(
--+        parcel.readString() ?: "",
--+        parcel.readString() ?: "",
--+        parcel.readString(),
--+        parcel.readString(),
--+        parcel.readString(),
--+        parcel.readString(),
--+        parcel.readString(),
--+        parcel.readString(),
--+        parcel.readString(),
--+        parcel.readString(),
--+        parcel.readString()
--+    )
--+
--+    override fun writeToParcel(parcel: Parcel, flags: Int) {
--+        parcel.writeString(company)
--+        parcel.writeString(title)
--+        parcel.writeString(salTpNm)
--+        parcel.writeString(sal)
--+        parcel.writeString(region)
--+        parcel.writeString(holidayTpNm)
--+        parcel.writeString(minEdubg)
--+        parcel.writeString(career)
--+        parcel.writeString(closeDt)
--+        parcel.writeString(wantedMobileInfoUrl)
--+        parcel.writeString(jobsCd)
--+    }
--+
--+    override fun describeContents(): Int {
--+        return 0
--+    }
--+
--+    companion object CREATOR : Parcelable.Creator<Job> {
--+        override fun createFromParcel(parcel: Parcel): Job {
--+            return Job(parcel)
--+        }
--+
--+        override fun newArray(size: Int): Array<Job?> {
--+            return arrayOfNulls(size)
--+        }
--+    }
-- }
--\ No newline at end of file
-Index: app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContentProviderCompat.requireContext\r\nimport androidx.core.content.ContextCompat.startActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.a23_hf069.R\r\nimport com.example.a23_hf069.ResumeChangeActivity\r\nimport com.example.a23_hf069.ResumeClickActivity\r\nimport com.example.a23_hf069.ResumeWriteActivity\r\nimport com.google.gson.Gson\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.IOException\r\n\r\nclass ResumeFragment : Fragment() {\r\n    // 서버의 IP 주소를 저장할 변수\r\n    private var IP_ADDRESS = \"3.34.48.60\"\r\n\r\n    // 사용자 ID를 저장할 변수\r\n    private lateinit var userId: String\r\n\r\n    // 사용자의 작성중 이력서 개수를 표시할 TextView 변수\r\n    private lateinit var tvResume_temporary_count: TextView\r\n\r\n    // 사용자의 작성완료 이력서 개수를 표시할 TextView 변수\r\n    private lateinit var tvResume_complete_count: TextView\r\n\r\n    // 이력서 추가 버튼을 나타낼 Button 변수\r\n    private lateinit var buttonAddResume: Button\r\n\r\n    // 이력서 목록을 표시할 RecyclerView 변수\r\n    private lateinit var recyclerView: RecyclerView\r\n\r\n    // 이력서 목록을 표시하는 어댑터를 담을 변수\r\n    private lateinit var dataAdapter: DataAdapter\r\n\r\n    // 이력서 목록을 업데이트하는 주기를 지정하는 변수 (2초로 설정)\r\n    private val updateIntervalMillis: Long = 2000\r\n\r\n    // 업데이트를 위해 사용할 핸들러 객체\r\n    private val handler = Handler()\r\n\r\n    // Handler 동작 여부를 나타내는 변수\r\n    private var isHandlerRunning = false\r\n\r\n    // Fragment가 화면에 보일 때 호출되는 메서드\r\n    override fun onStart() {\r\n        super.onStart()\r\n        // Handler 시작 (주기적인 작업 시작)\r\n        startHandler()\r\n    }\r\n\r\n    // Fragment가 화면에서 사라질 때 호출되는 메서드\r\n    override fun onStop() {\r\n        super.onStop()\r\n        // Handler 중지 (주기적인 작업 중지)\r\n        stopHandler()\r\n    }\r\n\r\n    // Handler 시작 메서드\r\n    private fun startHandler() {\r\n        if (!isHandlerRunning) {\r\n            handler.postDelayed(updateDataRunnable, updateIntervalMillis)\r\n            isHandlerRunning = true\r\n        }\r\n    }\r\n\r\n    // Handler 중지 메서드\r\n    private fun stopHandler() {\r\n        handler.removeCallbacks(updateDataRunnable)\r\n        isHandlerRunning = false\r\n    }\r\n\r\n    // 서버로부터 데이터를 가져오는 작업을 반복할 Runnable 객체\r\n    private val updateDataRunnable = object : Runnable {\r\n        override fun run() {\r\n            fetchDataFromServer()\r\n            handler.postDelayed(this, updateIntervalMillis) // 일정 간격 후 다시 호출\r\n        }\r\n    }\r\n\r\n    // Fragment의 뷰를 생성하는 메서드\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // 뷰를 생성하여 반환하는 코드\r\n        val view = inflater.inflate(R.layout.fragment_resume, container, false)\r\n\r\n        // Argument로부터 전달받은 사용자 ID를 변수에 저장\r\n        if (arguments != null) {\r\n            userId = arguments?.getString(\"userId\", \"\") ?: \"\"\r\n        }\r\n\r\n        // 사용자 ID를 표시할 TextView 초기화\r\n        val textID = view.findViewById<TextView>(R.id.tvID1)\r\n        textID.text = userId\r\n\r\n        // RecyclerView 초기화 후 빈 어댑터 설정\r\n        recyclerView = view.findViewById(R.id.recyclerviewResume)\r\n        recyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n\r\n        // 빈 어댑터 생성 및 RecyclerView에 설정\r\n        dataAdapter = DataAdapter(emptyList(), userId)\r\n        recyclerView.adapter = dataAdapter\r\n\r\n        // 작성중 이력서 개수와 작성완료 이력서 개수를 표시할 TextView 초기화\r\n        tvResume_temporary_count = view.findViewById(R.id.tvResume_temporary_count)\r\n        tvResume_complete_count = view.findViewById(R.id.tvResume_complete_count)\r\n\r\n        // 서버로 사용자 아이디를 전송하여 이력서 데이터를 가져오도록 요청\r\n        fetchDataFromServer()\r\n\r\n        // 이력서 추가 버튼 클릭 리스너 설정\r\n        buttonAddResume = view.findViewById<Button>(R.id.btnAddResume)\r\n        buttonAddResume.setOnClickListener {\r\n            val intent = Intent(requireContext(), ResumeWriteActivity::class.java)\r\n            intent.putExtra(\"userId\", userId)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 생성한 뷰 반환\r\n        return view\r\n    }\r\n\r\n    // Fragment의 뷰가 생성되었을 때 호출되는 메서드\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // 이력서 삭제 버튼 클릭 리스너 설정\r\n        dataAdapter.setOnDeleteClickListener(object : DataAdapter.OnDeleteClickListener {\r\n            override fun onDeleteClick(resumeData: ResumeData) {\r\n                // 서버에서 이력서 데이터 삭제 요청\r\n                deleteResumeFromServer(resumeData.resumeListNum)\r\n            }\r\n        })\r\n\r\n        // 사용자의 작성중 이력서 개수와 작성완료 이력서 개수를 업데이트\r\n        fetchDataFromServer()\r\n\r\n        // 일정 간격으로 서버에서 데이터를 가져오고 UI를 업데이트하는 작업 시작\r\n        handler.postDelayed(updateDataRunnable, updateIntervalMillis)\r\n\r\n        // 이력서 삭제 버튼 클릭 리스너 설정\r\n        setupDeleteButtonClickListener()\r\n    }\r\n\r\n\r\n\r\n    // 서버로부터 데이터를 가져오는 메서드\r\n    private fun fetchDataFromServer() {\r\n        // 서버로 사용자 아이디를 전송하여 이력서 데이터를 가져오도록 요청\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_fragment.php\"\r\n        val requestBody = FormBody.Builder()\r\n            .add(\"personal_id\", userId)\r\n            .build()\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .post(requestBody)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                // 서버로부터 응답을 받았을 때 호출되는 콜백 메서드\r\n                val responseData = response.body?.string()\r\n                Log.d(\"ServerResponse\", responseData ?: \"No response data\")\r\n                if (responseData != null) {\r\n                    try {\r\n                        // JSON 파싱을 위해 Gson 객체 생성\r\n                        val gson = Gson()\r\n\r\n                        // 서버 응답 데이터를 담는 컨테이너 클래스로 파싱\r\n                        val dataListContainer = gson.fromJson(responseData, DataListContainer::class.java)\r\n\r\n                        // UI 업데이트는 메인 스레드에서 실행되어야 함\r\n                        requireActivity().runOnUiThread {\r\n                            // 가져온 이력서 데이터 리스트를 어댑터에 설정하여 RecyclerView 업데이트\r\n                            val dataList = dataListContainer?.resumeList\r\n                            if (dataList != null) {\r\n                                dataAdapter.setData(dataList)\r\n\r\n                                // 이력서 개수 설정\r\n                                val cnt1 = dataListContainer.cnt1\r\n                                val cnt2 = dataListContainer.cnt2\r\n\r\n                                // cnt1, cnt2가 null이 아닌지 확인하여 텍스트뷰에 업데이트\r\n                                if (cnt1 != null && cnt2 != null) {\r\n                                    tvResume_temporary_count.text = cnt1.toString()\r\n                                    tvResume_complete_count.text = cnt2.toString()\r\n                                } else {\r\n                                    // cnt1 또는 cnt2가 null인 경우에 대한 처리를 여기에 추가\r\n                                    Toast.makeText(view?.context, \"이력서 개수를 가져오지 못했습니다.\", Toast.LENGTH_SHORT).show()\r\n                                }\r\n                            } else {\r\n                                // dataList가 null인 경우에 대한 처리를 여기에 추가\r\n                                Toast.makeText(view?.context, \"서버로부터 이력서 데이터를 가져오지 못했습니다.\", Toast.LENGTH_SHORT).show()\r\n                            }\r\n                        }\r\n                    } catch (e: JSONException) {\r\n                        // JSON 파싱 오류 발생한 경우\r\n                        Log.e(\"JSONParsingError\", \"Invalid JSON format: $responseData\")\r\n                    }\r\n                } else {\r\n                    // responseData가 null인 경우에 대한 처리를 여기에 추가\r\n                    Log.e(\"ServerResponse\", \"Response data is null\")\r\n                    Toast.makeText(view?.context, \"서버로부터 응답이 없습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 삭제 버튼 클릭 리스너 설정\r\n    private fun setupDeleteButtonClickListener() {\r\n        dataAdapter.setOnDeleteClickListener(object : DataAdapter.OnDeleteClickListener {\r\n            override fun onDeleteClick(resumeData: ResumeData) {\r\n                // 서버에서 이력서 데이터 삭제 요청\r\n                deleteResumeFromServer(resumeData.resumeListNum)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 서버로 이력서 삭제 요청\r\n    private fun deleteResumeFromServer(resumeListNum: Int?) {\r\n        // resumeListNum이 null인 경우에 대비하여 처리\r\n        if (resumeListNum == null) {\r\n            // null인 경우, 서버 요청을 보낼 수 없으므로 오류 처리\r\n            requireActivity().runOnUiThread {\r\n                Toast.makeText(view?.context, \"잘못된 이력서 번호입니다.\", Toast.LENGTH_SHORT).show()\r\n            }\r\n            return\r\n        }\r\n\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_delete.php\"\r\n        val requestBody = FormBody.Builder()\r\n            .add(\"personal_id\", userId)\r\n            .add(\"resume_listnum\", resumeListNum.toString())\r\n            .build()\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .post(requestBody)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                // 서버로부터 응답을 받았을 때 호출되는 콜백 메서드\r\n                val responseData = response.body?.string()\r\n                Log.d(\"DeleteResponse\", responseData ?: \"No response data\")\r\n                if (responseData != null && responseData.contains(\"Record deleted successfully\")) {\r\n                    // 삭제 성공\r\n                    requireActivity().runOnUiThread {\r\n                        // RecyclerView에서 아이템 삭제\r\n                        dataAdapter.removeDataByListNum(resumeListNum)\r\n                        // 작성중 이력서 개수와 작성완료 이력서 개수 업데이트\r\n                        fetchDataFromServer()\r\n                        // 삭제 성공 메시지 출력\r\n                        Toast.makeText(view?.context, \"이력서를 성공적으로 삭제했습니다.\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                } else {\r\n                    // 삭제 실패 또는 응답 데이터 오류\r\n                    requireActivity().runOnUiThread {\r\n                        Toast.makeText(view?.context, \"이력서를 삭제했습니다.\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n                requireActivity().runOnUiThread {\r\n                    Toast.makeText(view?.context, \"서버와 연결할 수 없습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 데이터 클래스\r\n    data class ResumeData(val resumeListNum: Int, val resumeTitle: String, val writeStatus: String)\r\n\r\n    // 이력서 데이터 리스트 컨테이너 클래스\r\n    data class DataListContainer(\r\n        val resumeList: List<ResumeData> = emptyList(),\r\n        val cnt1: Int = 0,\r\n        val cnt2: Int = 0\r\n    )\r\n\r\n    // 이력서 목록을 표시하는 어댑터 클래스\r\n    class DataAdapter(private var dataList: List<ResumeData>,\r\n                      private val userId: String\r\n    ) : RecyclerView.Adapter<DataAdapter.ViewHolder>() {\r\n\r\n        // 각각의 뷰를 보유하는 뷰홀더 클래스\r\n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n            val textViewTitle: Button = itemView.findViewById(R.id.tvResumeTitle)\r\n            val textViewStatus: TextView = itemView.findViewById(R.id.tvWriteStatus)\r\n            val buttonRemove: Button = itemView.findViewById(R.id.buttonRemove)\r\n            val buttonChange: Button = itemView.findViewById(R.id.buttonEdit)\r\n        }\r\n\r\n        // 뷰홀더 생성\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            val view = LayoutInflater.from(parent.context)\r\n                .inflate(R.layout.resume_item, parent, false)\r\n            return ViewHolder(view)\r\n        }\r\n\r\n        // 삭제 버튼 클릭 리스너 인터페이스\r\n        interface OnDeleteClickListener {\r\n            fun onDeleteClick(resumeData: ResumeData)\r\n        }\r\n\r\n        private var deleteClickListener: OnDeleteClickListener? = null\r\n\r\n        // 삭제 버튼 클릭 리스너 설정\r\n        fun setOnDeleteClickListener(listener: OnDeleteClickListener) {\r\n            deleteClickListener = listener\r\n        }\r\n\r\n        // 아이템 삭제 메서드\r\n        fun removeDataByListNum(resumeListNum: Int) {\r\n            val updatedList = dataList.toMutableList()\r\n            val position = updatedList.indexOfFirst { it.resumeListNum == resumeListNum }\r\n            if (position != -1) {\r\n                updatedList.removeAt(position)\r\n                dataList = updatedList\r\n                notifyItemRemoved(position)\r\n            }\r\n        }\r\n\r\n\r\n        // 뷰홀더의 뷰에 데이터를 바인딩\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n            val data = dataList[position]\r\n            holder.textViewTitle.setText(data.resumeTitle)\r\n            holder.textViewStatus.text = data.writeStatus\r\n\r\n            // 삭제 버튼 클릭 리스너 설정\r\n            holder.buttonRemove.setOnClickListener {\r\n                deleteClickListener?.onDeleteClick(data)\r\n            }\r\n\r\n            // 수정 버튼 클릭 리스너 설정\r\n            holder.buttonChange.setOnClickListener {\r\n                val intent = Intent(holder.itemView.context, ResumeChangeActivity::class.java)\r\n                intent.putExtra(\"resumeListNum\", data.resumeListNum)\r\n                intent.putExtra(\"userId\", userId)\r\n                holder.itemView.context.startActivity(intent)\r\n            }\r\n\r\n            // 이력서 제목 버튼 클릭 리스너 설정\r\n            holder.textViewTitle.setOnClickListener {\r\n                val intent = Intent(holder.itemView.context, ResumeClickActivity::class.java)\r\n                intent.putExtra(\"resumeListNum\", data.resumeListNum)\r\n                intent.putExtra(\"userId\", userId)\r\n                holder.itemView.context.startActivity(intent)\r\n            }\r\n        }\r\n\r\n        // 전체 아이템 개수 반환\r\n        override fun getItemCount(): Int {\r\n            return dataList.size\r\n        }\r\n\r\n        // 외부에서 데이터를 설정할 수 있도록 setData() 함수 추가\r\n        fun setData(newDataList: List<ResumeData>) {\r\n            dataList = newDataList\r\n            notifyDataSetChanged()\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(date 1690551843009)
-@@ -26,7 +26,7 @@
- 
- class ResumeFragment : Fragment() {
-     // 서버의 IP 주소를 저장할 변수
--    private var IP_ADDRESS = "3.34.48.60"
-+    private var IP_ADDRESS = "3.34.136.178"
- 
-     // 사용자 ID를 저장할 변수
-     private lateinit var userId: String
-Index: app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.widget.ImageButton\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.TextView\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.IOException\r\n\r\nclass ResumeClickActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"3.34.48.60\" // Replace with your IP address.\r\n    private var userId: String = \"\" // User ID\r\n    private var resumeListNum: Int = -1\r\n    private lateinit var editResumeTitle: TextView\r\n    private lateinit var editTextAcademic: TextView\r\n    private lateinit var editTextCareer: TextView\r\n    private lateinit var editTextIntroduction: TextView\r\n    private lateinit var editTextCertificate: TextView\r\n    private lateinit var editTextEducation: TextView\r\n    private lateinit var editTextDesire: TextView\r\n\r\n    private lateinit var backButton_click: ImageButton\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_resume_click)\r\n\r\n        // Get user ID\r\n        resumeListNum = intent.getIntExtra(\"resumeListNum\", -1)\r\n        userId = intent.getStringExtra(\"userId\") ?: \"\"\r\n\r\n        val textID = findViewById<TextView>(R.id.tvClick_ID)\r\n        textID.text = userId\r\n\r\n        editTextAcademic = findViewById(R.id.edtClick_academic)\r\n        editResumeTitle = findViewById(R.id.edtClick_title)\r\n        editTextCareer = findViewById(R.id.edtClick_career)\r\n        editTextIntroduction = findViewById(R.id.edtClick_introduction)\r\n        editTextCertificate = findViewById(R.id.edtClick_certificate)\r\n        editTextEducation = findViewById(R.id.edtClick_education)\r\n        editTextDesire = findViewById(R.id.edtClick_desire)\r\n\r\n        backButton_click = findViewById(R.id.backButton_click)\r\n\r\n        // 이력서 아이템 데이터 불러오기\r\n        getResumeItemData(resumeListNum)\r\n\r\n        backButton_click.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    // 이력서 아이템 데이터 불러오기\r\n    private fun getResumeItemData(resumeListNum: Int) {\r\n        val url =\r\n            \"http://$IP_ADDRESS/android_resume_change.php?resume_listnum=$resumeListNum\" // 데이터를 불러올 PHP 스크립트의 주소\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .get() // GET 방식으로 요청 변경\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                // 이력서 아이템 데이터를 파싱하여 UI 업데이트\r\n                runOnUiThread {\r\n                    handleResumeItemData(responseData)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 아이템 데이터를 처리하는 함수 추가\r\n    private fun handleResumeItemData(responseData: String?) {\r\n        try {\r\n            val jsonObject = JSONObject(responseData) // JSONObject로 파싱\r\n\r\n            // 이력서 아이템 데이터가 존재하는 경우에만 UI 업데이트\r\n            if (jsonObject.length() > 0) {\r\n                // 여기서 이력서 아이템 데이터를 파싱하여 UI에 표시하는 작업을 수행하면 됩니다.\r\n                // 예를 들어, 다음과 같이 각 EditText에 데이터를 설정할 수 있습니다.\r\n                editResumeTitle.setText(jsonObject.optString(\"resumeTitle\", \"\"))\r\n                editTextAcademic.setText(jsonObject.optString(\"resumeAcademic\", \"\"))\r\n                editTextCareer.setText(jsonObject.optString(\"resumeCareer\", \"\"))\r\n                editTextIntroduction.setText(jsonObject.optString(\"resumeIntroduction\", \"\"))\r\n                editTextCertificate.setText(jsonObject.optString(\"resumeCertificate\", \"\"))\r\n                editTextEducation.setText(jsonObject.optString(\"resumeLearning\", \"\"))\r\n                editTextDesire.setText(jsonObject.optString(\"resumeDesire\", \"\"))\r\n            }\r\n        } catch (e: JSONException) {\r\n            // JSON 파싱 오류 처리\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt b/app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt
---- a/app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt	(date 1690551843073)
-@@ -10,7 +10,7 @@
- import java.io.IOException
- 
- class ResumeClickActivity : AppCompatActivity() {
--    private var IP_ADDRESS = "3.34.48.60" // Replace with your IP address.
-+    private var IP_ADDRESS = "3.34.136.178" // Replace with your IP address.
-     private var userId: String = "" // User ID
-     private var resumeListNum: Int = -1
-     private lateinit var editResumeTitle: TextView
-Index: app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport okhttp3.*\r\nimport java.io.IOException\r\n\r\nclass ResumeWriteActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"3.34.48.60\" // Replace with your IP address.\r\n    private var userId: String = \"\" // User ID\r\n    private lateinit var backButton: ImageButton\r\n    private lateinit var editResumeTitle: EditText\r\n    private lateinit var editTextAcademic: EditText\r\n    private lateinit var editTextCareer: EditText\r\n    private lateinit var editTextIntroduction: EditText\r\n    private lateinit var editTextCertificate: EditText\r\n    private lateinit var editTextEducation: EditText\r\n    private lateinit var editTextDesire: EditText\r\n    private lateinit var buttonSubmit_temporary: Button\r\n    private lateinit var buttonSubmit_complete: Button\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_resume_write)\r\n\r\n// Get user ID\r\n        userId = intent.getStringExtra(\"userId\") ?: \"\"\r\n\r\n        val textID = findViewById<TextView>(R.id.tvWrite_ID)\r\n        textID.text = userId\r\n\r\n        backButton = findViewById(R.id.backButton_notice)\r\n        editTextAcademic = findViewById(R.id.edtWrite_academic)\r\n        editResumeTitle = findViewById(R.id.edtWrite_title)\r\n        editTextCareer = findViewById(R.id.edtWrite_career)\r\n        editTextIntroduction = findViewById(R.id.edtWrite_introduction)\r\n        editTextCertificate = findViewById(R.id.edtWrite_certificate)\r\n        editTextEducation = findViewById(R.id.edtWrite_education)\r\n        editTextDesire = findViewById(R.id.edtWrite_desire)\r\n        buttonSubmit_temporary = findViewById(R.id.buttonSubmit_temporary_write) // 임시 저장 버튼\r\n        buttonSubmit_complete = findViewById(R.id.buttonSubmit_complete_write) // 작성 완료 버튼\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n\r\n        buttonSubmit_temporary.setOnClickListener { // 임시 저장\r\n            val personal_id = userId\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 중\"\r\n\r\n            sendResumeData(\r\n                personal_id,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 임시저장되었습니다\", Toast.LENGTH_SHORT).show()\r\n\r\n            onBackPressed()\r\n        }\r\n\r\n        buttonSubmit_complete.setOnClickListener { // 작성완료\r\n            val personal_id = userId\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 완료\"\r\n\r\n            sendResumeData(\r\n                personal_id,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 작성완료되었습니다\", Toast.LENGTH_SHORT).show()\r\n\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        super.onBackPressed()\r\n    }\r\n\r\n\r\n    private fun sendResumeData(\r\n        personal_id: String,\r\n        resume_title: String,\r\n        resume_academic: String,\r\n        resume_career: String,\r\n        resume_introduction: String,\r\n        resume_certificate: String,\r\n        resume_learning: String,\r\n        resume_desire: String,\r\n        resume_complete: String\r\n    ) {\r\n        val url = \"http://$IP_ADDRESS/android_resume_write_php.php\" // URL of the hosting server with PHP script\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val formBody = FormBody.Builder()\r\n            .add(\"personal_id\", personal_id) // ID\r\n            .add(\"resume_title\", resume_title) // Title\r\n            .add(\"resume_academic\", resume_academic) // Education\r\n            .add(\"resume_career\", resume_career) // Career\r\n            .add(\"resume_introduction\", resume_introduction) // Introduction\r\n            .add(\"resume_certificate\", resume_certificate) // Certification\r\n            .add(\"resume_learning\", resume_learning) // Education history\r\n            .add(\"resume_desire\", resume_desire) // Desired job position\r\n            .add(\"resume_complete\", resume_complete)\r\n            .build()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .post(formBody)\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n// Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n// Handle request success\r\n                val responseData = response.body?.string()\r\n            }\r\n        })\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt b/app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt
---- a/app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
-+++ b/app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt	(date 1690551843034)
-@@ -11,7 +11,7 @@
- import java.io.IOException
- 
- class ResumeWriteActivity : AppCompatActivity() {
--    private var IP_ADDRESS = "3.34.48.60" // Replace with your IP address.
-+    private var IP_ADDRESS = "3.34.136.178" // Replace with your IP address.
-     private var userId: String = "" // User ID
-     private lateinit var backButton: ImageButton
-     private lateinit var editResumeTitle: EditText
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27__10_13__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27__10_13__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27__10_13__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27__10_13__Changes_.xml	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-27_오후_10_13_[Changes]" date="1690463588244" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오후_10_13_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-27 오후 10:13 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26__10_53__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26__10_53__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26__10_53__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26__10_53__Changes_.xml	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-26_오후_10_53_[Changes]" date="1690379584798" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-26_오후_10_53_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-26 오후 10:53 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27__12_12__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27__12_12__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27__12_12__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27__12_12__Changes_.xml	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-27_오전_12_12_[Changes]" date="1690384340377" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오전_12_12_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-27 오전 12:12 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28__11_16__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28__11_16__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28__11_16__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28__11_16__Changes_.xml	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-28_오후_11_16_[Changes]" date="1690553768717" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-28_오후_11_16_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-28 오후 11:16 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오전_12_12_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오전_12_12_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오전_12_12_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-27_오전_12_12_[Changes]/shelved.patch	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ /dev/null	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
@@ -1,233 +0,0 @@
-Index: app/src/main/res/layout/activity_notice_content.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/activity_notice_content.xml b/app/src/main/res/layout/activity_notice_content.xml
-new file mode 100644
---- /dev/null	(date 1690384154671)
-+++ b/app/src/main/res/layout/activity_notice_content.xml	(date 1690384154671)
-@@ -0,0 +1,102 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-+    xmlns:app="http://schemas.android.com/apk/res-auto"
-+    xmlns:tools="http://schemas.android.com/tools"
-+    android:layout_width="match_parent"
-+    android:layout_height="match_parent"
-+    android:orientation="vertical"
-+    tools:context=".MainActivity">
-+
-+
-+    <androidx.appcompat.widget.Toolbar
-+        android:id="@+id/toolbarNotice_click"
-+        android:layout_width="match_parent"
-+        android:layout_height="?attr/actionBarSize"
-+        android:background="?attr/colorPrimary">
-+
-+        <ImageButton
-+            android:id="@+id/backButton_click"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:layout_gravity="start|center_vertical"
-+            android:background="@null"
-+            android:src="@drawable/ic_baseline_arrow_back_ios_new_24" />
-+
-+        <ImageView
-+            android:id="@+id/imageViewLogo_click"
-+            android:layout_width="324dp"
-+            android:layout_height="wrap_content"
-+            app:srcCompat="@drawable/ic_main_logo" />
-+
-+    </androidx.appcompat.widget.Toolbar>
-+
-+    <LinearLayout
-+        android:layout_width="match_parent"
-+        android:layout_height="match_parent"
-+        android:orientation="vertical"
-+        android:padding="16dp">
-+
-+        <ScrollView
-+            android:layout_width="match_parent"
-+            android:layout_height="match_parent">
-+
-+            <LinearLayout
-+                android:layout_width="match_parent"
-+                android:layout_height="wrap_content"
-+                android:orientation="vertical">
-+
-+                <LinearLayout
-+                    android:layout_width="match_parent"
-+                    android:layout_height="wrap_content"
-+                    android:layout_marginBottom="16dp"
-+                    android:orientation="horizontal">
-+
-+                    <TextView
-+                        android:id="@+id/notice_title"
-+                        android:layout_width="316dp"
-+                        android:layout_height="wrap_content"
-+                        android:background="@null"
-+                        android:hint="공지사항 제목"
-+                        android:textSize="20dp" />
-+
-+                    <TextView
-+                        android:id="@+id/notice_date"
-+                        android:layout_width="wrap_content"
-+                        android:layout_height="wrap_content"
-+                        android:layout_marginBottom="2dp"
-+                        android:text="23.01.01"
-+                        android:textColor="#000000"
-+                        android:textSize="15dp" />
-+                </LinearLayout>
-+
-+                <LinearLayout
-+                    android:layout_width="match_parent"
-+                    android:layout_height="wrap_content"
-+                    android:layout_marginBottom="16dp"
-+                    android:orientation="vertical">
-+
-+                    <LinearLayout
-+                        android:layout_width="match_parent"
-+                        android:layout_height="match_parent"
-+                        android:orientation="horizontal">
-+
-+                    </LinearLayout>
-+
-+                    <TextView
-+                        android:id="@+id/notice_content"
-+                        android:hint="내용"
-+                        android:layout_width="match_parent"
-+                        android:layout_height="581dp"
-+                        android:background="@drawable/rounded_rectangle_border"
-+                        android:padding="5dp"
-+                        android:textColor="#342F2F"
-+                        android:textSize="16dp" />
-+
-+                </LinearLayout>
-+
-+            </LinearLayout>
-+        </ScrollView>
-+    </LinearLayout>
-+
-+
-+</LinearLayout>
-Index: app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt b/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt
-new file mode 100644
---- /dev/null	(date 1690384154645)
-+++ b/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt	(date 1690384154645)
-@@ -0,0 +1,91 @@
-+package com.example.a23_hf069
-+
-+import android.annotation.SuppressLint
-+import android.os.Bundle
-+import android.widget.ImageButton
-+import androidx.appcompat.app.AppCompatActivity
-+import android.widget.TextView
-+import okhttp3.*
-+import org.json.JSONException
-+import org.json.JSONObject
-+import java.io.IOException
-+
-+class NoticeContentActivity : AppCompatActivity() {
-+    private var IP_ADDRESS = "13.124.235.120" // Replace with your IP address.
-+    private var resumeListNum: Int = -1
-+    private lateinit var noticeTitle: TextView
-+    private lateinit var noticeContent: TextView
-+    private lateinit var noticeDate: TextView
-+
-+    private lateinit var backButton_click: ImageButton
-+
-+    @SuppressLint("MissingInflatedId")
-+    override fun onCreate(savedInstanceState: Bundle?) {
-+        super.onCreate(savedInstanceState)
-+        supportActionBar?.hide()
-+        setContentView(R.layout.activity_notice_content)
-+
-+        // Get user ID
-+        resumeListNum = intent.getIntExtra("resumeListNum", -1)
-+
-+        noticeTitle = findViewById(R.id.notice_title)
-+        noticeContent = findViewById(R.id.notice_content)
-+        noticeDate = findViewById(R.id.notice_date)
-+
-+        backButton_click = findViewById(R.id.backButton_click)
-+
-+        // 공지사항 아이템 데이터 불러오기
-+        getNoticeItemData(resumeListNum)
-+
-+        backButton_click.setOnClickListener {
-+            onBackPressed()
-+        }
-+    }
-+
-+    // 공지사항 아이템 데이터 불러오기
-+    private fun getNoticeItemData(resumeListNum: Int) {
-+        val url =
-+            "http://$IP_ADDRESS/android_notice_content.php?resume_listnum=$resumeListNum" // 데이터를 불러올 PHP 스크립트의 주소
-+
-+        val client = OkHttpClient()
-+
-+        val request = Request.Builder()
-+            .url(url)
-+            .get() // GET 방식으로 요청 변경
-+            .build()
-+
-+        client.newCall(request).enqueue(object : okhttp3.Callback {
-+            override fun onFailure(call: Call, e: IOException) {
-+                // Handle request failure
-+                e.printStackTrace()
-+            }
-+
-+            override fun onResponse(call: Call, response: Response) {
-+                val noticeData = response.body?.string()
-+                // 공지사항 아이템 데이터를 파싱하여 UI 업데이트
-+                runOnUiThread {
-+                    handleNoticeItemData(noticeData)
-+                }
-+            }
-+        })
-+    }
-+
-+    // 공지사항 아이템 데이터를 처리하는 함수 추가
-+    private fun handleNoticeItemData(responseData: String?) {
-+        try {
-+            val jsonObject = JSONObject(responseData) // JSONObject로 파싱
-+
-+            // 공지사항 아이템 데이터가 존재하는 경우에만 UI 업데이트
-+            if (jsonObject.length() > 0) {
-+                // 여기서 공지사항 아이템 데이터를 파싱하여 UI에 표시하는 작업을 수행하면 됩니다.
-+                // 예를 들어, 다음과 같이 각 EditText에 데이터를 설정할 수 있습니다.
-+                noticeTitle.setText(jsonObject.optString("noticeTitle", ""))
-+                noticeContent.setText(jsonObject.optString("noticeContent", ""))
-+                noticeDate.setText(jsonObject.optString("noticeDate", ""))
-+            }
-+        } catch (e: JSONException) {
-+            // JSON 파싱 오류 처리
-+            e.printStackTrace()
-+        }
-+    }
-+}
-Index: app/src/main/AndroidManifest.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.a23_hf069\">\r\n    <!-- 인터넷 사용 권한 설정 -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:networkSecurityConfig=\"@xml/network_security_config\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.23_HF069\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".ResumeClickActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SaeilSearchActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".CorporateSignUpActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".PersonalSignUpActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".HomeActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".JobDetailActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\" />\r\n\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".JobDetailActivity2\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\" />\r\n\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".JobDetailActivity3\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\" />\r\n\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".ResumeChangeActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".ResumeWriteActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
---- a/app/src/main/AndroidManifest.xml	(revision 60eb0332daf64fb941ae85d7bfedbf6e90c78d78)
-+++ b/app/src/main/AndroidManifest.xml	(date 1690383053501)
-@@ -19,6 +19,9 @@
-         android:usesCleartextTraffic="true"
-         tools:targetApi="31">
-         <activity
-+            android:name=".NoticeContentActivity"
-+            android:exported="false" />
-+        <activity
-             android:name=".ResumeClickActivity"
-             android:exported="false" />
-         <activity
Index: app/src/main/res/layout/fragment_wanted_result.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\">\r\n\r\n    <FrameLayout\r\n        android:id=\"@+id/fl_container\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/toolbar2\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:background=\"@color/white\"\r\n        android:minHeight=\"?attr/actionBarSize\"\r\n        android:theme=\"?attr/actionBarTheme\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/filtering_title\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"채용공고 상세검색\"\r\n            android:textColor=\"@color/black\"\r\n            android:textSize=\"17sp\"\r\n            android:textStyle=\"bold\" />\r\n\r\n    </androidx.appcompat.widget.Toolbar>\r\n\r\n    <View\r\n        android:id=\"@+id/view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"2dp\"\r\n        android:background=\"#35B891\" />\r\n\r\n    <ListView\r\n        android:id=\"@+id/listView\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_wanted_result.xml b/app/src/main/res/layout/fragment_wanted_result.xml
--- a/app/src/main/res/layout/fragment_wanted_result.xml	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ b/app/src/main/res/layout/fragment_wanted_result.xml	(date 1690984242000)
@@ -26,7 +26,7 @@
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:text="채용공고 상세검색"
+            android:text="채용공고 상세검색 결과"
             android:textColor="@color/black"
             android:textSize="17sp"
             android:textStyle="bold" />
Index: app/src/main/res/layout/wanted_list_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"16dp\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/tv_title\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textSize=\"16sp\"\r\n        android:textStyle=\"bold\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tv_company\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textSize=\"14sp\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tv_any\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textSize=\"14sp\" />\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/wanted_list_item.xml b/app/src/main/res/layout/wanted_list_item.xml
--- a/app/src/main/res/layout/wanted_list_item.xml	(revision d8263c1aed954d7debc165b0bf1cf8d3b643928d)
+++ b/app/src/main/res/layout/wanted_list_item.xml	(date 1690981602000)
@@ -19,7 +19,7 @@
         android:textSize="14sp" />
 
     <TextView
-        android:id="@+id/tv_any"
+        android:id="@+id/tv_closeDt"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:textSize="14sp" />
