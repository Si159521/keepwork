Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\n\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 4acb2686690de835ef2c01370537fdfbb3963fa6)
+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689772807216)
@@ -1,18 +1,33 @@
 package com.example.a23_hf069
 
+import android.content.Context
 import android.content.Intent
+import android.os.AsyncTask
 import android.os.Bundle
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.widget.ArrayAdapter
 import android.widget.Button
+import android.widget.ImageView
+import android.widget.ListView
+import android.widget.TextView
 import androidx.appcompat.app.AppCompatActivity
+import androidx.core.content.ContentProviderCompat.requireContext
+import androidx.core.content.ContextCompat.startActivity
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.setFragmentResult
-
+import org.xmlpull.v1.XmlPullParser
+import org.xmlpull.v1.XmlPullParserFactory
+import java.io.InputStream
+import java.net.HttpURLConnection
+import java.net.URL
 
 
 class WantedFilteringFragment : Fragment()  {
+    private lateinit var jobList: List<Job>
+    private lateinit var jobListView: ListView
+
     lateinit var region_btn: Button
 
     lateinit var edu_btn1 : Button
@@ -34,7 +49,7 @@
     lateinit var closeDt_btn6 : Button
 
     private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
-    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
+    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력
     private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
 
     private val selectedEducationList: MutableSet<Int> = mutableSetOf()
@@ -44,7 +59,7 @@
     lateinit var complete_btn1 : Button //완료버튼
 
     // 화면 띄우기
-    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
+    override fun onCreateView( // onCreateView 함수 오버라이드
         inflater: LayoutInflater,
         container: ViewGroup?,
         savedInstanceState: Bundle?
@@ -126,8 +141,7 @@
             // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
             if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
                 // 0번과 같은 결과
-
-
+                selectedEducationList.add(0)
             }
         }
         filterItems()
@@ -153,15 +167,247 @@
         val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
         val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
 
+        //각각의 리스트에 담긴 Int형의 데이터들을 String 타입으로 변환
+        val convertedEducationList = filteredEducationList.map { value ->
+            when (value) {
+                0 -> "00"
+                1 -> "01"
+                2 -> "02"
+                3 -> "03"
+                4 -> "04"
+                5 -> "05"
+                else -> {}
+            }
+        }
+        val convertedCareerList = filteredCareerList.map { value ->
+            when (value) {
+                0 -> "N"
+                1 -> "E"
+                2 -> "Z"
+
+                else -> {}
+                } // 나머지 값은 그대로 문자열로 변환
+            }
+        }
+        val convertedCloseDateList = filteredCloseDateList.map { value ->
+            when (value) {
+                0 -> "00"
+                1 -> "N"
+                // 추가적인 변환 규칙이 필요한 경우에는 추가하면 됩니다.
+                else -> value.toString() // 나머지 값은 그대로 문자열로 변환
+            }
+        }
+
+
+        //각각의 리스트에서 추출된 값을 파싱된 xml파일과 대조 -> 리스트에 담기 -> 중복 건 찾기
+
+
+
         // 세 리스트에서 중복되는 값들을 찾습니다.
-        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
+        //val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
 
-        for (item in intersectedItems) {
+        /*for (item in intersectedItems) {
             println(item)
             // 필요한 처리를 수행합니다.
+        }*/
+
+
+    //워크넷 api 채용목록 xml파일 parsing하는 코드
+    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
+        override fun doInBackground(vararg urls: String): List<Job> {
+            val urlString = urls[0]
+            var result: List<Job> = emptyList()
+            var connection: HttpURLConnection? = null
+
+            try {
+                val url = URL(urlString)
+                connection = url.openConnection() as HttpURLConnection
+                connection.requestMethod = "GET"
+                connection.readTimeout = 15 * 1000
+                connection.connectTimeout = 15 * 1000
+
+                val responseCode = connection.responseCode
+                if (responseCode == HttpURLConnection.HTTP_OK) {
+                    val inputStream = connection.inputStream
+                    result = parseXml(inputStream)
+                }
+            } catch (e: Exception) {
+                e.printStackTrace()
+            } finally {
+                connection?.disconnect()
+            }
+
+            return result
+        }
+
+        private fun parseXml(inputStream: InputStream): List<Job> {
+            val jobList = mutableListOf<Job>()
+            val factory = XmlPullParserFactory.newInstance()
+            val xpp = factory.newPullParser()
+            xpp.setInput(inputStream, null)
+
+            var eventType = xpp.eventType
+            var company: String? = null // 회사명
+            var title: String? = null // 채용제목
+            var salTpNm: String? = null // 임금형태
+            var sal: String? = null // 급여
+            var region: String? = null // 근무지역
+            var holidayTpNm: String? = null // 근무형태
+            var minEdubg: String? = null // 최소학력
+            var career: String? = null // 경력
+            var closeDt: String? = null // 마감일자
+            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
+            var jobsCd: String? = null // 직종코드
+
+            while (eventType != XmlPullParser.END_DOCUMENT) {
+                when (eventType) {
+                    XmlPullParser.START_TAG -> {
+                        when (xpp.name) {
+                            "company" -> company = xpp.nextText()
+                            "title" -> title = xpp.nextText()
+                            "salTpNm" -> salTpNm = xpp.nextText()
+                            "sal" -> sal = xpp.nextText()
+                            "region" -> region = xpp.nextText()
+                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
+                            "minEdubg" -> minEdubg = xpp.nextText()
+                            "career" -> career = xpp.nextText()
+                            "closeDt" -> closeDt = xpp.nextText()
+                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
+                            "jobsCd" -> jobsCd = xpp.nextText()
+                        }
+                    }
+                    XmlPullParser.END_TAG -> {
+                        if (xpp.name == "wanted") {
+                            company?.let { c ->
+                                title?.let { t ->
+                                    jobList.add(
+                                        Job(
+                                            c, t, salTpNm, sal, region, holidayTpNm,
+                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
+                                        )
+                                    )
+                                }
+                            }
+                            company = null
+                            title = null
+                            salTpNm = null
+                            sal = null
+                            region = null
+                            holidayTpNm = null
+                            minEdubg = null
+                            career = null
+                            closeDt = null
+                            wantedMobileInfoUrl = null
+                            jobsCd = null
+                        }
+                    }
+                }
+                eventType = xpp.next()
+            }
+
+            return jobList
+        }
+
+        override fun onPostExecute(result: List<Job>) {
+            jobList = result
+            showJobList()
         }
     }
 
+    private fun showJobList() {
+        val adapter = CustomAdapter2(requireActivity(), jobList)
+        jobListView.adapter = adapter
 
+        jobListView.setOnItemClickListener { _, _, position, _ ->
+            val job = jobList[position]
+            val intent = JobDetailActivity2.newIntent(requireContext(), job)
+            startActivity(intent)
+        }
+    }
+}
+
+class CustomAdapter3(private val context3: Context, private val jobList: List<Job>) :
+    ArrayAdapter<Job>(context3, R.layout.job_item, jobList) {
+
+    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
+        val view =
+            convertView ?: LayoutInflater.from(context3).inflate(R.layout.job_item, parent, false)
+
+        val job = jobList[position]
+
+        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
+        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
+        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
+
+        titleTextView.text = job.title
+        companyTextView.text = job.company
+        regionContTextView.text = job.region
+
+        return view
+    }
+}
+
+class JobDetailActivity3 : AppCompatActivity() {
+    private lateinit var backButton: ImageView
+    private lateinit var company: TextView // 회사명
+    private lateinit var title: TextView // 제목
+    private lateinit var salTpNm: TextView // 임금형태
+    private lateinit var sal: TextView // 급여
+    private lateinit var region: TextView // 근무지역
+    private lateinit var holidayTpNm: TextView // 근무형태
+    private lateinit var minEdubg: TextView // 최소학력
+    private lateinit var career: TextView // 경력
+    private lateinit var closeDt: TextView // 마감일자
+    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
+    private lateinit var jobsCd: TextView // 직종코드
+
+    companion object {
+        private const val JOB_EXTRA = "job"
+
+        fun newIntent(context2: Context, job: Job): Intent {
+            return Intent(context2, JobDetailActivity2::class.java).apply {
+                putExtra(JOB_EXTRA, job)
+            }
+        }
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_job_detail)
+
+        // 기본 툴바 숨기기
+        supportActionBar?.hide()
+
+        backButton = findViewById(R.id.backButton)
+        company = findViewById(R.id.company)
+        title = findViewById(R.id.title)
+        salTpNm = findViewById(R.id.salTpNm)
+        sal = findViewById(R.id.sal)
+        region = findViewById(R.id.region)
+        holidayTpNm = findViewById(R.id.holidayTpNm)
+        minEdubg = findViewById(R.id.minEdubg)
+        career = findViewById(R.id.career)
+        closeDt = findViewById(R.id.closeDt)
+        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
+        jobsCd = findViewById(R.id.jobsCd)
+
+        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
+
+        company.text = job?.company
+        title.text = job?.title
+        salTpNm.text = job?.salTpNm
+        sal.text = job?.sal
+        region.text = job?.region
+        holidayTpNm.text = job?.holidayTpNm
+        minEdubg.text = job?.minEdubg
+        career.text = job?.career
+        closeDt.text = job?.closeDt
+        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
+        jobsCd.text = job?.jobsCd
+
+        backButton.setOnClickListener {
+            onBackPressed()
+        }
+    }
 
     }
\ No newline at end of file
Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 4acb2686690de835ef2c01370537fdfbb3963fa6)
+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689770942657)
@@ -19,7 +19,7 @@
 
 
 class P_loginFragment : Fragment() { //개인로그인
-    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
 
     private var TAG = "phptest" // phptest log 찍으려는 용도
     private lateinit var id_text_input_edit_text: EditText // id
