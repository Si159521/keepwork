Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689770913472)
@@ -19,7 +19,7 @@
 
 
 class P_loginFragment : Fragment() { //개인로그인
-    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
 
     private var TAG = "phptest" // phptest log 찍으려는 용도
     private lateinit var id_text_input_edit_text: EditText // id
Index: app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.util.Xml\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ListView\r\nimport android.widget.Toast\r\nimport com.github.kittinunf.fuel.core.FuelManager\r\nimport com.github.kittinunf.fuel.core.extensions.authentication\r\nimport com.github.kittinunf.fuel.httpGet\r\nimport com.github.kittinunf.result.Result\r\nimport okhttp3.OkHttpClient\r\nimport org.json.JSONObject\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserException\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport org.w3c.dom.Document\r\nimport org.w3c.dom.Node\r\nimport org.w3c.dom.NodeList\r\nimport org.w3c.dom.Element\r\nimport javax.xml.parsers.DocumentBuilderFactory\r\n\r\nclass RegionFragment1 : Fragment() {\r\n\r\n    // API 인증키\r\n    val apiKey = \"WNLJYZLM2VZXTT2TZA9XR2VR1HK\"\r\n    val regionUrl = \"http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1\"\r\n\r\n    // 지역 대분류 리스트 (시/도)\r\n    private var superRegionList = mutableListOf<String>()\r\n    // 지역 중분류 리스트 (시/군/구)\r\n    private var middleRegionList = mutableListOf<String>()\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Fragment의 레이아웃 인플레이션\r\n        val rootView = inflater.inflate(R.layout.fragment_region, container, false)\r\n\r\n        // 지역 정보 리스트에 담기\r\n        fetchSRegionNames()\r\n        //fetchMRegionNames()\r\n\r\n        // ListView를 찾고, 어댑터 설정\r\n        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)\r\n        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)\r\n        listView1.adapter = adapter1\r\n        listView2.adapter = adapter2\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchSRegionNames() {\r\n        val params = listOf(\"returnType\" to \"XML\", \"target\" to \"CMCD\", \"authKey\" to apiKey, \"dtlGb\" to \"1\")\r\n\r\n        val request = Request.Builder()\r\n            .url(\"$regionUrl?${params.joinToString(\"&\")}\")\r\n            .get()\r\n            .header(\"Authorization\", \"Bearer $apiKey\")\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                println(e.message)\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (response.isSuccessful && responseData != null) {\r\n                    println(\"API 응답 데이터: $responseData\")\r\n                    try {\r\n                        val superRegionList = parseXmlResponse(responseData)\r\n                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김\r\n                        // TODO: 원하는 작업 수행\r\n                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리\r\n                        requireActivity().runOnUiThread {\r\n                            updateUIWithRegionData(superRegionList)\r\n                        }\r\n                    } catch (e: XmlPullParserException) {\r\n                        println(e.message)\r\n                    }\r\n                } else {\r\n                    println(\"서버 응답 실패: ${response.code}\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun parseXmlResponse(xmlData: String): List<String> {\r\n        superRegionList = mutableListOf<String>()\r\n        try {\r\n            val parser = Xml.newPullParser()\r\n            parser.setInput(StringReader(xmlData))\r\n\r\n            var eventType = parser.eventType\r\n            var currentRegionName: String? = null\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\") {\r\n                            currentRegionName = parser.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\" && currentRegionName != null) {\r\n                            superRegionList.add(currentRegionName)\r\n                            currentRegionName = null\r\n                        }\r\n                    }\r\n                }\r\n\r\n                eventType = parser.next()\r\n            }\r\n        } catch (e: XmlPullParserException) {\r\n            println(\"${e.message}\")\r\n        } catch (e: IOException) {\r\n            println(\"${e.message}\")\r\n        }\r\n\r\n        return superRegionList\r\n    }\r\n\r\n\r\n    private fun updateUIWithRegionData(superRegionList: List<String>) {\r\n        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        listView1.adapter = adapter1\r\n\r\n        // 시/도 버튼 클릭 시 이벤트 처리\r\n        listView1.setOnItemClickListener { _, _, position, _ ->\r\n            val item = superRegionList[position]\r\n            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가\r\n        }\r\n    }\r\n\r\n//    private fun fetchMRegionNames() {\r\n//        val workplaceUrl = \"http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do\"\r\n//        val params = listOf(\"returnType\" to \"JSON\", \"authKey\" to apiKey, \"callTp\" to \"L\")\r\n//\r\n//        FuelManager.instance.get(workplaceUrl, params)\r\n//            .authentication().bearer(apiKey)\r\n//            .responseString { _, _, result ->\r\n//                when (result) {\r\n//                    is Result.Success -> {\r\n//                        val responseData = result.get()\r\n//                        val jsonObject = JSONObject(responseData)\r\n//                        val workplaces = jsonObject.getJSONArray(\"dhsOpenEmpInfo\")\r\n//                        middleRegionList = mutableListOf<String>()\r\n//\r\n//                        for (i in 0 until workplaces.length()) {\r\n//                            val workplace = workplaces.getJSONObject(i)\r\n//                            //val workplaceName = workplace.getString(\"wkpl_nm\")\r\n//                            val jurisdictionLv2 = workplace.getString(\"wkpl_juris_lv2_nm\")\r\n//                            middleRegionList.add(\"$jurisdictionLv2\")\r\n//                        }\r\n//\r\n//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김\r\n//                        // TODO: 원하는 작업 수행\r\n//                    }\r\n//                    is Result.Failure -> {\r\n//                        println(\"근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.\")\r\n//                    }\r\n//                }\r\n//            }\r\n//    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
--- a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
+++ b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(date 1689777993051)
@@ -9,10 +9,6 @@
 import android.widget.ArrayAdapter
 import android.widget.ListView
 import android.widget.Toast
-import com.github.kittinunf.fuel.core.FuelManager
-import com.github.kittinunf.fuel.core.extensions.authentication
-import com.github.kittinunf.fuel.httpGet
-import com.github.kittinunf.result.Result
 import okhttp3.OkHttpClient
 import org.json.JSONObject
 import okhttp3.*
Index: app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport okhttp3.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONException\r\nimport java.io.IOException\r\n\r\nclass ResumeFragment : Fragment() {\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n    private lateinit var userId: String // 사용자 아이디\r\n\r\n    private lateinit var buttonSubmit: Button\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var dataAdapter: DataAdapter\r\n    private val dataList: MutableList<Data> = mutableListOf()  // DB에서 가져온 데이터 리스트\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view = inflater.inflate(R.layout.fragment_resume, container, false)\r\n\r\n        // 사용자 아이디 받아오기\r\n        if (arguments != null) {\r\n            userId = arguments?.getString(\"userId\", \"\") ?: \"\"\r\n        }\r\n\r\n        val textID = view.findViewById<TextView>(R.id.tvID1)\r\n        textID.text = userId\r\n\r\n        // RecyclerView 초기화\r\n        recyclerView = view.findViewById(R.id.recyclerviewResume)\r\n        recyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n        dataAdapter = DataAdapter(dataList)\r\n        recyclerView.adapter = dataAdapter\r\n\r\n        // PHP 파일 URL\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_php.php\"\r\n\r\n        // HTTP 요청 보내기\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (responseData != null) {\r\n                    // 응답 데이터 처리\r\n                    handleResponseData(responseData)\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n\r\n        buttonSubmit = view.findViewById<Button>(R.id.buttonSubmit)\r\n        buttonSubmit.setOnClickListener {\r\n            val intent = Intent(requireContext(), ResumeWriteActivity::class.java)\r\n            intent.putExtra(\"userId\", userId)\r\n            startActivity(intent)\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    private fun handleResponseData(responseData: String) {\r\n        try {\r\n            // JSON 데이터 파싱\r\n            val jsonArray = JSONArray(responseData)\r\n            for (i in 0 until jsonArray.length()) {\r\n                val jsonObject = jsonArray.getJSONObject(i)\r\n                val resumeTitle = jsonObject.getString(\"resumeTitle\")\r\n                val writeStatus = jsonObject.getString(\"writeStatus\")\r\n                val data = Data(resumeTitle, writeStatus)\r\n                dataList.add(data)\r\n            }\r\n\r\n            // RecyclerView 갱신\r\n            dataAdapter.notifyDataSetChanged()\r\n        } catch (e: JSONException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n\r\ndata class Data(val resumeTitle: String, val writeStatus: String)\r\n\r\nclass DataAdapter(private val dataList: List<Data>) :\r\n    RecyclerView.Adapter<DataAdapter.ViewHolder>() {\r\n\r\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val textViewTitle: TextView = itemView.findViewById(R.id.tvResumeTitle)\r\n        val textViewStatus: TextView = itemView.findViewById(R.id.tvWriteStatus)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.resume_item, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val data = dataList[position]\r\n        holder.textViewTitle.text = data.resumeTitle\r\n        holder.textViewStatus.text = data.writeStatus\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return dataList.size\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
+++ b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(date 1689778749490)
@@ -13,12 +13,12 @@
 import okhttp3.*
 import org.json.JSONArray
 import org.json.JSONException
+import org.json.JSONObject
 import java.io.IOException
 
 class ResumeFragment : Fragment() {
-    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
     private lateinit var userId: String // 사용자 아이디
-
     private lateinit var buttonSubmit: Button
     private lateinit var recyclerView: RecyclerView
     private lateinit var dataAdapter: DataAdapter
@@ -42,11 +42,15 @@
         recyclerView.adapter = dataAdapter
 
         // PHP 파일 URL
-        val phpUrl = "http://$IP_ADDRESS/android_resume_php.php"
+        val phpUrl = "http://$IP_ADDRESS/android_resume2.php"
 
-        // HTTP 요청 보내기
+        val requestBody = FormBody.Builder()
+            .add("personal_id", userId)
+            .build()
+
         val request = Request.Builder()
             .url(phpUrl)
+            .post(requestBody)
             .build()
 
         val client = OkHttpClient()
@@ -77,18 +81,32 @@
 
     private fun handleResponseData(responseData: String) {
         try {
-            // JSON 데이터 파싱
-            val jsonArray = JSONArray(responseData)
-            for (i in 0 until jsonArray.length()) {
-                val jsonObject = jsonArray.getJSONObject(i)
-                val resumeTitle = jsonObject.getString("resumeTitle")
-                val writeStatus = jsonObject.getString("writeStatus")
+            val jsonObject = JSONObject(responseData)
+            // cnt1_result와 cnt2_result 값 추출
+            val cnt1Result = jsonObject.getInt("cnt1_result")
+            val cnt2Result = jsonObject.getInt("cnt2_result")
+
+            // UI 업데이트를 메인 스레드에서 수행
+            requireActivity().runOnUiThread {
+                val resumeTemCnt = requireView().findViewById<TextView>(R.id.textView_resume_temporary_count)
+                val resumeComCnt = requireView().findViewById<TextView>(R.id.textView_resume_complete_count)
+                resumeTemCnt.text = cnt1Result.toString()
+                resumeComCnt.text = cnt2Result.toString()
+            }
+
+            val dataArray = jsonObject.getJSONArray("data")
+            for (i in 0 until dataArray.length()) {
+                val dataObject = dataArray.getJSONObject(i)
+                val resumeTitle = dataObject.getString("resume_title")
+                val writeStatus = dataObject.getString("resume_complete")
                 val data = Data(resumeTitle, writeStatus)
                 dataList.add(data)
             }
 
             // RecyclerView 갱신
-            dataAdapter.notifyDataSetChanged()
+            requireActivity().runOnUiThread {
+                dataAdapter.notifyDataSetChanged()
+            }
         } catch (e: JSONException) {
             e.printStackTrace()
         }
