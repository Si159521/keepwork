Index: app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedFilteredFragment : Fragment() {\r\n    private lateinit var jobListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)\r\n\r\n        // UI 요소 초기화\r\n        jobListView = view.findViewById(R.id.jobListView)\r\n        prevButton = view.findViewById(R.id.prevButton)\r\n        nextButton = view.findViewById(R.id.nextButton)\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // API 호출 후 필터링된 값 출력\r\n        fetchJobData()\r\n        //추가예정\r\n        \r\n        return view\r\n    }\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter2(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity2.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity2 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity2::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(date 1689769772000)
@@ -1,261 +1,261 @@
-package com.example.a23_hf069
-
-import android.content.Context
-import android.content.Intent
-import android.os.AsyncTask
-import android.os.Bundle
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.*
-import androidx.appcompat.app.AppCompatActivity
-import androidx.fragment.app.Fragment
-import org.xmlpull.v1.XmlPullParser
-import org.xmlpull.v1.XmlPullParserFactory
-import java.io.InputStream
-import java.net.HttpURLConnection
-import java.net.URL
-
-class WantedFilteredFragment : Fragment() {
-    private lateinit var jobListView: ListView
-    private lateinit var jobList: List<Job>
-    private lateinit var prevButton: Button
-    private lateinit var nextButton: Button
-    private var currentPage = 1
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
-
-        // UI 요소 초기화
-        jobListView = view.findViewById(R.id.jobListView)
-        prevButton = view.findViewById(R.id.prevButton)
-        nextButton = view.findViewById(R.id.nextButton)
-
-        // 이전 페이지 버튼 클릭 이벤트 처리
-        prevButton.setOnClickListener {
-            if (currentPage > 1) {
-                currentPage -= 1
-                fetchJobData()
-            }
-        }
-
-        // 다음 페이지 버튼 클릭 이벤트 처리
-        nextButton.setOnClickListener {
-            currentPage += 1
-            fetchJobData()
-        }
-
-        // API 호출 후 필터링된 값 출력
-        fetchJobData()
-        //추가예정
-        
-        return view
-    }
-
-    private fun fetchJobData() {
-        val url =
-            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
-        FetchJobData().execute(url)
-    }
-
-    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
-        override fun doInBackground(vararg urls: String): List<Job> {
-            val urlString = urls[0]
-            var result: List<Job> = emptyList()
-            var connection: HttpURLConnection? = null
-
-            try {
-                val url = URL(urlString)
-                connection = url.openConnection() as HttpURLConnection
-                connection.requestMethod = "GET"
-                connection.readTimeout = 15 * 1000
-                connection.connectTimeout = 15 * 1000
-
-                val responseCode = connection.responseCode
-                if (responseCode == HttpURLConnection.HTTP_OK) {
-                    val inputStream = connection.inputStream
-                    result = parseXml(inputStream)
-                }
-            } catch (e: Exception) {
-                e.printStackTrace()
-            } finally {
-                connection?.disconnect()
-            }
-
-            return result
-        }
-
-        private fun parseXml(inputStream: InputStream): List<Job> {
-            val jobList = mutableListOf<Job>()
-            val factory = XmlPullParserFactory.newInstance()
-            val xpp = factory.newPullParser()
-            xpp.setInput(inputStream, null)
-
-            var eventType = xpp.eventType
-            var company: String? = null // 회사명
-            var title: String? = null // 채용제목
-            var salTpNm: String? = null // 임금형태
-            var sal: String? = null // 급여
-            var region: String? = null // 근무지역
-            var holidayTpNm: String? = null // 근무형태
-            var minEdubg: String? = null // 최소학력
-            var career: String? = null // 경력
-            var closeDt: String? = null // 마감일자
-            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
-            var jobsCd: String? = null // 직종코드
-
-            while (eventType != XmlPullParser.END_DOCUMENT) {
-                when (eventType) {
-                    XmlPullParser.START_TAG -> {
-                        when (xpp.name) {
-                            "company" -> company = xpp.nextText()
-                            "title" -> title = xpp.nextText()
-                            "salTpNm" -> salTpNm = xpp.nextText()
-                            "sal" -> sal = xpp.nextText()
-                            "region" -> region = xpp.nextText()
-                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
-                            "minEdubg" -> minEdubg = xpp.nextText()
-                            "career" -> career = xpp.nextText()
-                            "closeDt" -> closeDt = xpp.nextText()
-                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
-                            "jobsCd" -> jobsCd = xpp.nextText()
-                        }
-                    }
-                    XmlPullParser.END_TAG -> {
-                        if (xpp.name == "wanted") {
-                            company?.let { c ->
-                                title?.let { t ->
-                                    jobList.add(
-                                        Job(
-                                            c, t, salTpNm, sal, region, holidayTpNm,
-                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
-                                        )
-                                    )
-                                }
-                            }
-                            company = null
-                            title = null
-                            salTpNm = null
-                            sal = null
-                            region = null
-                            holidayTpNm = null
-                            minEdubg = null
-                            career = null
-                            closeDt = null
-                            wantedMobileInfoUrl = null
-                            jobsCd = null
-                        }
-                    }
-                }
-                eventType = xpp.next()
-            }
-
-            return jobList
-        }
-
-        override fun onPostExecute(result: List<Job>) {
-            jobList = result
-            showJobList()
-        }
-    }
-
-    private fun showJobList() {
-        val adapter = CustomAdapter2(requireActivity(), jobList)
-        jobListView.adapter = adapter
-
-        jobListView.setOnItemClickListener { _, _, position, _ ->
-            val job = jobList[position]
-            val intent = JobDetailActivity2.newIntent(requireContext(), job)
-            startActivity(intent)
-        }
-    }
-}
-
-class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
-    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
-
-    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
-        val view =
-            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
-
-        val job = jobList[position]
-
-        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
-        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
-        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
-
-        titleTextView.text = job.title
-        companyTextView.text = job.company
-        regionContTextView.text = job.region
-
-        return view
-    }
-}
-
-class JobDetailActivity2 : AppCompatActivity() {
-    private lateinit var backButton: ImageView
-    private lateinit var company: TextView // 회사명
-    private lateinit var title: TextView // 제목
-    private lateinit var salTpNm: TextView // 임금형태
-    private lateinit var sal: TextView // 급여
-    private lateinit var region: TextView // 근무지역
-    private lateinit var holidayTpNm: TextView // 근무형태
-    private lateinit var minEdubg: TextView // 최소학력
-    private lateinit var career: TextView // 경력
-    private lateinit var closeDt: TextView // 마감일자
-    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
-    private lateinit var jobsCd: TextView // 직종코드
-
-    companion object {
-        private const val JOB_EXTRA = "job"
-
-        fun newIntent(context2: Context, job: Job): Intent {
-            return Intent(context2, JobDetailActivity2::class.java).apply {
-                putExtra(JOB_EXTRA, job)
-            }
-        }
-    }
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_job_detail)
-
-        // 기본 툴바 숨기기
-        supportActionBar?.hide()
-
-        backButton = findViewById(R.id.backButton)
-        company = findViewById(R.id.company)
-        title = findViewById(R.id.title)
-        salTpNm = findViewById(R.id.salTpNm)
-        sal = findViewById(R.id.sal)
-        region = findViewById(R.id.region)
-        holidayTpNm = findViewById(R.id.holidayTpNm)
-        minEdubg = findViewById(R.id.minEdubg)
-        career = findViewById(R.id.career)
-        closeDt = findViewById(R.id.closeDt)
-        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
-        jobsCd = findViewById(R.id.jobsCd)
-
-        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
-
-        company.text = job?.company
-        title.text = job?.title
-        salTpNm.text = job?.salTpNm
-        sal.text = job?.sal
-        region.text = job?.region
-        holidayTpNm.text = job?.holidayTpNm
-        minEdubg.text = job?.minEdubg
-        career.text = job?.career
-        closeDt.text = job?.closeDt
-        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
-        jobsCd.text = job?.jobsCd
-
-        backButton.setOnClickListener {
-            onBackPressed()
-        }
-    }
-}
\ No newline at end of file
+//package com.example.a23_hf069
+//
+//import android.content.Context
+//import android.content.Intent
+//import android.os.AsyncTask
+//import android.os.Bundle
+//import android.view.LayoutInflater
+//import android.view.View
+//import android.view.ViewGroup
+//import android.widget.*
+//import androidx.appcompat.app.AppCompatActivity
+//import androidx.fragment.app.Fragment
+//import org.xmlpull.v1.XmlPullParser
+//import org.xmlpull.v1.XmlPullParserFactory
+//import java.io.InputStream
+//import java.net.HttpURLConnection
+//import java.net.URL
+//
+//class WantedFilteredFragment : Fragment() {
+//    private lateinit var jobListView: ListView
+//    private lateinit var jobList: List<Job>
+//    private lateinit var prevButton: Button
+//    private lateinit var nextButton: Button
+//    private var currentPage = 1
+//
+//    override fun onCreateView(
+//        inflater: LayoutInflater,
+//        container: ViewGroup?,
+//        savedInstanceState: Bundle?
+//    ): View? {
+//        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
+//
+//        // UI 요소 초기화
+//        jobListView = view.findViewById(R.id.jobListView)
+//        prevButton = view.findViewById(R.id.prevButton)
+//        nextButton = view.findViewById(R.id.nextButton)
+//
+//        // 이전 페이지 버튼 클릭 이벤트 처리
+//        prevButton.setOnClickListener {
+//            if (currentPage > 1) {
+//                currentPage -= 1
+//                fetchJobData()
+//            }
+//        }
+//
+//        // 다음 페이지 버튼 클릭 이벤트 처리
+//        nextButton.setOnClickListener {
+//            currentPage += 1
+//            fetchJobData()
+//        }
+//
+//        // API 호출 후 필터링된 값 출력
+//        fetchJobData()
+//        //추가예정
+//
+//        return view
+//    }
+//
+//    private fun fetchJobData() {
+//        val url =
+//            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
+//        FetchJobData().execute(url)
+//    }
+//
+//    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
+//        override fun doInBackground(vararg urls: String): List<Job> {
+//            val urlString = urls[0]
+//            var result: List<Job> = emptyList()
+//            var connection: HttpURLConnection? = null
+//
+//            try {
+//                val url = URL(urlString)
+//                connection = url.openConnection() as HttpURLConnection
+//                connection.requestMethod = "GET"
+//                connection.readTimeout = 15 * 1000
+//                connection.connectTimeout = 15 * 1000
+//
+//                val responseCode = connection.responseCode
+//                if (responseCode == HttpURLConnection.HTTP_OK) {
+//                    val inputStream = connection.inputStream
+//                    result = parseXml(inputStream)
+//                }
+//            } catch (e: Exception) {
+//                e.printStackTrace()
+//            } finally {
+//                connection?.disconnect()
+//            }
+//
+//            return result
+//        }
+//
+//        private fun parseXml(inputStream: InputStream): List<Job> {
+//            val jobList = mutableListOf<Job>()
+//            val factory = XmlPullParserFactory.newInstance()
+//            val xpp = factory.newPullParser()
+//            xpp.setInput(inputStream, null)
+//
+//            var eventType = xpp.eventType
+//            var company: String? = null // 회사명
+//            var title: String? = null // 채용제목
+//            var salTpNm: String? = null // 임금형태
+//            var sal: String? = null // 급여
+//            var region: String? = null // 근무지역
+//            var holidayTpNm: String? = null // 근무형태
+//            var minEdubg: String? = null // 최소학력
+//            var career: String? = null // 경력
+//            var closeDt: String? = null // 마감일자
+//            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
+//            var jobsCd: String? = null // 직종코드
+//
+//            while (eventType != XmlPullParser.END_DOCUMENT) {
+//                when (eventType) {
+//                    XmlPullParser.START_TAG -> {
+//                        when (xpp.name) {
+//                            "company" -> company = xpp.nextText()
+//                            "title" -> title = xpp.nextText()
+//                            "salTpNm" -> salTpNm = xpp.nextText()
+//                            "sal" -> sal = xpp.nextText()
+//                            "region" -> region = xpp.nextText()
+//                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
+//                            "minEdubg" -> minEdubg = xpp.nextText()
+//                            "career" -> career = xpp.nextText()
+//                            "closeDt" -> closeDt = xpp.nextText()
+//                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
+//                            "jobsCd" -> jobsCd = xpp.nextText()
+//                        }
+//                    }
+//                    XmlPullParser.END_TAG -> {
+//                        if (xpp.name == "wanted") {
+//                            company?.let { c ->
+//                                title?.let { t ->
+//                                    jobList.add(
+//                                        Job(
+//                                            c, t, salTpNm, sal, region, holidayTpNm,
+//                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
+//                                        )
+//                                    )
+//                                }
+//                            }
+//                            company = null
+//                            title = null
+//                            salTpNm = null
+//                            sal = null
+//                            region = null
+//                            holidayTpNm = null
+//                            minEdubg = null
+//                            career = null
+//                            closeDt = null
+//                            wantedMobileInfoUrl = null
+//                            jobsCd = null
+//                        }
+//                    }
+//                }
+//                eventType = xpp.next()
+//            }
+//
+//            return jobList
+//        }
+//
+//        override fun onPostExecute(result: List<Job>) {
+//            jobList = result
+//            showJobList()
+//        }
+//    }
+//
+//    private fun showJobList() {
+//        val adapter = CustomAdapter2(requireActivity(), jobList)
+//        jobListView.adapter = adapter
+//
+//        jobListView.setOnItemClickListener { _, _, position, _ ->
+//            val job = jobList[position]
+//            val intent = JobDetailActivity2.newIntent(requireContext(), job)
+//            startActivity(intent)
+//        }
+//    }
+//}
+//
+//class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
+//    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
+//
+//    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
+//        val view =
+//            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
+//
+//        val job = jobList[position]
+//
+//        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
+//        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
+//        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
+//
+//        titleTextView.text = job.title
+//        companyTextView.text = job.company
+//        regionContTextView.text = job.region
+//
+//        return view
+//    }
+//}
+//
+//class JobDetailActivity2 : AppCompatActivity() {
+//    private lateinit var backButton: ImageView
+//    private lateinit var company: TextView // 회사명
+//    private lateinit var title: TextView // 제목
+//    private lateinit var salTpNm: TextView // 임금형태
+//    private lateinit var sal: TextView // 급여
+//    private lateinit var region: TextView // 근무지역
+//    private lateinit var holidayTpNm: TextView // 근무형태
+//    private lateinit var minEdubg: TextView // 최소학력
+//    private lateinit var career: TextView // 경력
+//    private lateinit var closeDt: TextView // 마감일자
+//    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
+//    private lateinit var jobsCd: TextView // 직종코드
+//
+//    companion object {
+//        private const val JOB_EXTRA = "job"
+//
+//        fun newIntent(context2: Context, job: Job): Intent {
+//            return Intent(context2, JobDetailActivity2::class.java).apply {
+//                putExtra(JOB_EXTRA, job)
+//            }
+//        }
+//    }
+//
+//    override fun onCreate(savedInstanceState: Bundle?) {
+//        super.onCreate(savedInstanceState)
+//        setContentView(R.layout.activity_job_detail)
+//
+//        // 기본 툴바 숨기기
+//        supportActionBar?.hide()
+//
+//        backButton = findViewById(R.id.backButton)
+//        company = findViewById(R.id.company)
+//        title = findViewById(R.id.title)
+//        salTpNm = findViewById(R.id.salTpNm)
+//        sal = findViewById(R.id.sal)
+//        region = findViewById(R.id.region)
+//        holidayTpNm = findViewById(R.id.holidayTpNm)
+//        minEdubg = findViewById(R.id.minEdubg)
+//        career = findViewById(R.id.career)
+//        closeDt = findViewById(R.id.closeDt)
+//        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
+//        jobsCd = findViewById(R.id.jobsCd)
+//
+//        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
+//
+//        company.text = job?.company
+//        title.text = job?.title
+//        salTpNm.text = job?.salTpNm
+//        sal.text = job?.sal
+//        region.text = job?.region
+//        holidayTpNm.text = job?.holidayTpNm
+//        minEdubg.text = job?.minEdubg
+//        career.text = job?.career
+//        closeDt.text = job?.closeDt
+//        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
+//        jobsCd.text = job?.jobsCd
+//
+//        backButton.setOnClickListener {
+//            onBackPressed()
+//        }
+//    }
+//}
\ No newline at end of file
Index: app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.util.Xml\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ListView\r\nimport android.widget.Toast\r\nimport com.github.kittinunf.fuel.core.FuelManager\r\nimport com.github.kittinunf.fuel.core.extensions.authentication\r\nimport com.github.kittinunf.fuel.httpGet\r\nimport com.github.kittinunf.result.Result\r\nimport okhttp3.OkHttpClient\r\nimport org.json.JSONObject\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserException\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport org.w3c.dom.Document\r\nimport org.w3c.dom.Node\r\nimport org.w3c.dom.NodeList\r\nimport org.w3c.dom.Element\r\nimport javax.xml.parsers.DocumentBuilderFactory\r\n\r\nclass RegionFragment1 : Fragment() {\r\n\r\n    // API 인증키\r\n    val apiKey = \"WNLJYZLM2VZXTT2TZA9XR2VR1HK\"\r\n    val regionUrl = \"http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1\"\r\n\r\n    // 지역 대분류 리스트 (시/도)\r\n    private var superRegionList = mutableListOf<String>()\r\n    // 지역 중분류 리스트 (시/군/구)\r\n    private var middleRegionList = mutableListOf<String>()\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Fragment의 레이아웃 인플레이션\r\n        val rootView = inflater.inflate(R.layout.fragment_region, container, false)\r\n\r\n        // 지역 정보 리스트에 담기\r\n        fetchSRegionNames()\r\n        //fetchMRegionNames()\r\n\r\n        // ListView를 찾고, 어댑터 설정\r\n        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)\r\n        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)\r\n        listView1.adapter = adapter1\r\n        listView2.adapter = adapter2\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchSRegionNames() {\r\n        val params = listOf(\"returnType\" to \"XML\", \"target\" to \"CMCD\", \"authKey\" to apiKey, \"dtlGb\" to \"1\")\r\n\r\n        val request = Request.Builder()\r\n            .url(\"$regionUrl?${params.joinToString(\"&\")}\")\r\n            .get()\r\n            .header(\"Authorization\", \"Bearer $apiKey\")\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                println(e.message)\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (response.isSuccessful && responseData != null) {\r\n                    println(\"API 응답 데이터: $responseData\")\r\n                    try {\r\n                        val superRegionList = parseXmlResponse(responseData)\r\n                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김\r\n                        // TODO: 원하는 작업 수행\r\n                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리\r\n                        requireActivity().runOnUiThread {\r\n                            updateUIWithRegionData(superRegionList)\r\n                        }\r\n                    } catch (e: XmlPullParserException) {\r\n                        println(e.message)\r\n                    }\r\n                } else {\r\n                    println(\"서버 응답 실패: ${response.code}\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun parseXmlResponse(xmlData: String): List<String> {\r\n        superRegionList = mutableListOf<String>()\r\n        try {\r\n            val parser = Xml.newPullParser()\r\n            parser.setInput(StringReader(xmlData))\r\n\r\n            var eventType = parser.eventType\r\n            var currentRegionName: String? = null\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\") {\r\n                            currentRegionName = parser.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\" && currentRegionName != null) {\r\n                            superRegionList.add(currentRegionName)\r\n                            currentRegionName = null\r\n                        }\r\n                    }\r\n                }\r\n\r\n                eventType = parser.next()\r\n            }\r\n        } catch (e: XmlPullParserException) {\r\n            println(\"${e.message}\")\r\n        } catch (e: IOException) {\r\n            println(\"${e.message}\")\r\n        }\r\n\r\n        return superRegionList\r\n    }\r\n\r\n\r\n    private fun updateUIWithRegionData(superRegionList: List<String>) {\r\n        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        listView1.adapter = adapter1\r\n\r\n        // 시/도 버튼 클릭 시 이벤트 처리\r\n        listView1.setOnItemClickListener { _, _, position, _ ->\r\n            val item = superRegionList[position]\r\n            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가\r\n        }\r\n    }\r\n\r\n//    private fun fetchMRegionNames() {\r\n//        val workplaceUrl = \"http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do\"\r\n//        val params = listOf(\"returnType\" to \"JSON\", \"authKey\" to apiKey, \"callTp\" to \"L\")\r\n//\r\n//        FuelManager.instance.get(workplaceUrl, params)\r\n//            .authentication().bearer(apiKey)\r\n//            .responseString { _, _, result ->\r\n//                when (result) {\r\n//                    is Result.Success -> {\r\n//                        val responseData = result.get()\r\n//                        val jsonObject = JSONObject(responseData)\r\n//                        val workplaces = jsonObject.getJSONArray(\"dhsOpenEmpInfo\")\r\n//                        middleRegionList = mutableListOf<String>()\r\n//\r\n//                        for (i in 0 until workplaces.length()) {\r\n//                            val workplace = workplaces.getJSONObject(i)\r\n//                            //val workplaceName = workplace.getString(\"wkpl_nm\")\r\n//                            val jurisdictionLv2 = workplace.getString(\"wkpl_juris_lv2_nm\")\r\n//                            middleRegionList.add(\"$jurisdictionLv2\")\r\n//                        }\r\n//\r\n//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김\r\n//                        // TODO: 원하는 작업 수행\r\n//                    }\r\n//                    is Result.Failure -> {\r\n//                        println(\"근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.\")\r\n//                    }\r\n//                }\r\n//            }\r\n//    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
--- a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
+++ b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(date 1689769910000)
@@ -1,187 +1,187 @@
-package com.example.a23_hf069
-
-import android.os.Bundle
-import android.util.Xml
-import androidx.fragment.app.Fragment
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.ArrayAdapter
-import android.widget.ListView
-import android.widget.Toast
-import com.github.kittinunf.fuel.core.FuelManager
-import com.github.kittinunf.fuel.core.extensions.authentication
-import com.github.kittinunf.fuel.httpGet
-import com.github.kittinunf.result.Result
-import okhttp3.OkHttpClient
-import org.json.JSONObject
-import okhttp3.*
-import org.json.JSONException
-import org.xmlpull.v1.XmlPullParser
-import org.xmlpull.v1.XmlPullParserException
-import java.io.IOException
-import java.io.StringReader
-import androidx.appcompat.app.AppCompatActivity
-import android.util.Log
-import android.widget.Button
-import org.w3c.dom.Document
-import org.w3c.dom.Node
-import org.w3c.dom.NodeList
-import org.w3c.dom.Element
-import javax.xml.parsers.DocumentBuilderFactory
-
-class RegionFragment1 : Fragment() {
-
-    // API 인증키
-    val apiKey = "WNLJYZLM2VZXTT2TZA9XR2VR1HK"
-    val regionUrl = "http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1"
-
-    // 지역 대분류 리스트 (시/도)
-    private var superRegionList = mutableListOf<String>()
-    // 지역 중분류 리스트 (시/군/구)
-    private var middleRegionList = mutableListOf<String>()
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        // Fragment의 레이아웃 인플레이션
-        val rootView = inflater.inflate(R.layout.fragment_region, container, false)
-
-        // 지역 정보 리스트에 담기
-        fetchSRegionNames()
-        //fetchMRegionNames()
-
-        // ListView를 찾고, 어댑터 설정
-        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)
-        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)
-        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
-        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)
-        listView1.adapter = adapter1
-        listView2.adapter = adapter2
-
-
-        return rootView
-    }
-
-    private fun fetchSRegionNames() {
-        val params = listOf("returnType" to "XML", "target" to "CMCD", "authKey" to apiKey, "dtlGb" to "1")
-
-        val request = Request.Builder()
-            .url("$regionUrl?${params.joinToString("&")}")
-            .get()
-            .header("Authorization", "Bearer $apiKey")
-            .build()
-
-        val client = OkHttpClient()
-        client.newCall(request).enqueue(object : Callback {
-            override fun onFailure(call: Call, e: IOException) {
-                println(e.message)
-            }
-
-            override fun onResponse(call: Call, response: Response) {
-                val responseData = response.body?.string()
-                if (response.isSuccessful && responseData != null) {
-                    println("API 응답 데이터: $responseData")
-                    try {
-                        val superRegionList = parseXmlResponse(responseData)
-                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김
-                        // TODO: 원하는 작업 수행
-                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리
-                        requireActivity().runOnUiThread {
-                            updateUIWithRegionData(superRegionList)
-                        }
-                    } catch (e: XmlPullParserException) {
-                        println(e.message)
-                    }
-                } else {
-                    println("서버 응답 실패: ${response.code}")
-                }
-            }
-        })
-    }
-
-    private fun parseXmlResponse(xmlData: String): List<String> {
-        superRegionList = mutableListOf<String>()
-        try {
-            val parser = Xml.newPullParser()
-            parser.setInput(StringReader(xmlData))
-
-            var eventType = parser.eventType
-            var currentRegionName: String? = null
-
-            while (eventType != XmlPullParser.END_DOCUMENT) {
-                when (eventType) {
-                    XmlPullParser.START_TAG -> {
-                        val tagName = parser.name
-
-                        if (tagName == "regionNm") {
-                            currentRegionName = parser.nextText()
-                        }
-                    }
-                    XmlPullParser.END_TAG -> {
-                        val tagName = parser.name
-
-                        if (tagName == "regionNm" && currentRegionName != null) {
-                            superRegionList.add(currentRegionName)
-                            currentRegionName = null
-                        }
-                    }
-                }
-
-                eventType = parser.next()
-            }
-        } catch (e: XmlPullParserException) {
-            println("${e.message}")
-        } catch (e: IOException) {
-            println("${e.message}")
-        }
-
-        return superRegionList
-    }
-
-
-    private fun updateUIWithRegionData(superRegionList: List<String>) {
-        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)
-        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
-        listView1.adapter = adapter1
-
-        // 시/도 버튼 클릭 시 이벤트 처리
-        listView1.setOnItemClickListener { _, _, position, _ ->
-            val item = superRegionList[position]
-            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가
-        }
-    }
-
-//    private fun fetchMRegionNames() {
-//        val workplaceUrl = "http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do"
-//        val params = listOf("returnType" to "JSON", "authKey" to apiKey, "callTp" to "L")
+//package com.example.a23_hf069
+//
+//import android.os.Bundle
+//import android.util.Xml
+//import androidx.fragment.app.Fragment
+//import android.view.LayoutInflater
+//import android.view.View
+//import android.view.ViewGroup
+//import android.widget.ArrayAdapter
+//import android.widget.ListView
+//import android.widget.Toast
+//import com.github.kittinunf.fuel.core.FuelManager
+//import com.github.kittinunf.fuel.core.extensions.authentication
+//import com.github.kittinunf.fuel.httpGet
+//import com.github.kittinunf.result.Result
+//import okhttp3.OkHttpClient
+//import org.json.JSONObject
+//import okhttp3.*
+//import org.json.JSONException
+//import org.xmlpull.v1.XmlPullParser
+//import org.xmlpull.v1.XmlPullParserException
+//import java.io.IOException
+//import java.io.StringReader
+//import androidx.appcompat.app.AppCompatActivity
+//import android.util.Log
+//import android.widget.Button
+//import org.w3c.dom.Document
+//import org.w3c.dom.Node
+//import org.w3c.dom.NodeList
+//import org.w3c.dom.Element
+//import javax.xml.parsers.DocumentBuilderFactory
+//
+//class RegionFragment1 : Fragment() {
+//
+//    // API 인증키
+//    val apiKey = "WNLJYZLM2VZXTT2TZA9XR2VR1HK"
+//    val regionUrl = "http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1"
+//
+//    // 지역 대분류 리스트 (시/도)
+//    private var superRegionList = mutableListOf<String>()
+//    // 지역 중분류 리스트 (시/군/구)
+//    private var middleRegionList = mutableListOf<String>()
+//    override fun onCreateView(
+//        inflater: LayoutInflater, container: ViewGroup?,
+//        savedInstanceState: Bundle?
+//    ): View? {
+//        // Fragment의 레이아웃 인플레이션
+//        val rootView = inflater.inflate(R.layout.fragment_region, container, false)
+//
+//        // 지역 정보 리스트에 담기
+//        fetchSRegionNames()
+//        //fetchMRegionNames()
+//
+//        // ListView를 찾고, 어댑터 설정
+//        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)
+//        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)
+//        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
+//        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)
+//        listView1.adapter = adapter1
+//        listView2.adapter = adapter2
 //
-//        FuelManager.instance.get(workplaceUrl, params)
-//            .authentication().bearer(apiKey)
-//            .responseString { _, _, result ->
-//                when (result) {
-//                    is Result.Success -> {
-//                        val responseData = result.get()
-//                        val jsonObject = JSONObject(responseData)
-//                        val workplaces = jsonObject.getJSONArray("dhsOpenEmpInfo")
-//                        middleRegionList = mutableListOf<String>()
 //
-//                        for (i in 0 until workplaces.length()) {
-//                            val workplace = workplaces.getJSONObject(i)
-//                            //val workplaceName = workplace.getString("wkpl_nm")
-//                            val jurisdictionLv2 = workplace.getString("wkpl_juris_lv2_nm")
-//                            middleRegionList.add("$jurisdictionLv2")
-//                        }
+//        return rootView
+//    }
 //
-//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김
+//    private fun fetchSRegionNames() {
+//        val params = listOf("returnType" to "XML", "target" to "CMCD", "authKey" to apiKey, "dtlGb" to "1")
+//
+//        val request = Request.Builder()
+//            .url("$regionUrl?${params.joinToString("&")}")
+//            .get()
+//            .header("Authorization", "Bearer $apiKey")
+//            .build()
+//
+//        val client = OkHttpClient()
+//        client.newCall(request).enqueue(object : Callback {
+//            override fun onFailure(call: Call, e: IOException) {
+//                println(e.message)
+//            }
+//
+//            override fun onResponse(call: Call, response: Response) {
+//                val responseData = response.body?.string()
+//                if (response.isSuccessful && responseData != null) {
+//                    println("API 응답 데이터: $responseData")
+//                    try {
+//                        val superRegionList = parseXmlResponse(responseData)
+//                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김
 //                        // TODO: 원하는 작업 수행
+//                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리
+//                        requireActivity().runOnUiThread {
+//                            updateUIWithRegionData(superRegionList)
+//                        }
+//                    } catch (e: XmlPullParserException) {
+//                        println(e.message)
+//                    }
+//                } else {
+//                    println("서버 응답 실패: ${response.code}")
+//                }
+//            }
+//        })
+//    }
+//
+//    private fun parseXmlResponse(xmlData: String): List<String> {
+//        superRegionList = mutableListOf<String>()
+//        try {
+//            val parser = Xml.newPullParser()
+//            parser.setInput(StringReader(xmlData))
+//
+//            var eventType = parser.eventType
+//            var currentRegionName: String? = null
+//
+//            while (eventType != XmlPullParser.END_DOCUMENT) {
+//                when (eventType) {
+//                    XmlPullParser.START_TAG -> {
+//                        val tagName = parser.name
+//
+//                        if (tagName == "regionNm") {
+//                            currentRegionName = parser.nextText()
+//                        }
 //                    }
-//                    is Result.Failure -> {
-//                        println("근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.")
+//                    XmlPullParser.END_TAG -> {
+//                        val tagName = parser.name
+//
+//                        if (tagName == "regionNm" && currentRegionName != null) {
+//                            superRegionList.add(currentRegionName)
+//                            currentRegionName = null
+//                        }
 //                    }
 //                }
+//
+//                eventType = parser.next()
 //            }
+//        } catch (e: XmlPullParserException) {
+//            println("${e.message}")
+//        } catch (e: IOException) {
+//            println("${e.message}")
+//        }
+//
+//        return superRegionList
 //    }
-
-
-}
\ No newline at end of file
+//
+//
+//    private fun updateUIWithRegionData(superRegionList: List<String>) {
+//        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)
+//        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
+//        listView1.adapter = adapter1
+//
+//        // 시/도 버튼 클릭 시 이벤트 처리
+//        listView1.setOnItemClickListener { _, _, position, _ ->
+//            val item = superRegionList[position]
+//            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가
+//        }
+//    }
+//
+////    private fun fetchMRegionNames() {
+////        val workplaceUrl = "http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do"
+////        val params = listOf("returnType" to "JSON", "authKey" to apiKey, "callTp" to "L")
+////
+////        FuelManager.instance.get(workplaceUrl, params)
+////            .authentication().bearer(apiKey)
+////            .responseString { _, _, result ->
+////                when (result) {
+////                    is Result.Success -> {
+////                        val responseData = result.get()
+////                        val jsonObject = JSONObject(responseData)
+////                        val workplaces = jsonObject.getJSONArray("dhsOpenEmpInfo")
+////                        middleRegionList = mutableListOf<String>()
+////
+////                        for (i in 0 until workplaces.length()) {
+////                            val workplace = workplaces.getJSONObject(i)
+////                            //val workplaceName = workplace.getString("wkpl_nm")
+////                            val jurisdictionLv2 = workplace.getString("wkpl_juris_lv2_nm")
+////                            middleRegionList.add("$jurisdictionLv2")
+////                        }
+////
+////                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김
+////                        // TODO: 원하는 작업 수행
+////                    }
+////                    is Result.Failure -> {
+////                        println("근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.")
+////                    }
+////                }
+////            }
+////    }
+//
+//
+//}
\ No newline at end of file
Index: app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport androidx.viewpager.widget.ViewPager\r\nimport com.google.android.material.tabs.TabLayout\r\nimport kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*\r\n\r\nclass WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {\r\n    private lateinit var filter: Button\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var viewPager: ViewPager\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_list, container, false)\r\n\r\n        val adapter = PagerAdapter(childFragmentManager)\r\n        adapter.addFragment(WantedRequestingFragment(), \"즉시지원\")\r\n        adapter.addFragment(WantedWorkNetFragment(), \"워크넷 채용공고\")\r\n\r\n        viewPager = view.findViewById<ViewPager>(R.id.viewpager01)\r\n        viewPager.adapter = adapter\r\n\r\n        tabLayout = view.findViewById<TabLayout>(R.id.tablayout01)\r\n        tabLayout.setupWithViewPager(viewPager)\r\n        tabLayout.addOnTabSelectedListener(this)\r\n\r\n        filter = view.findViewById<Button>(R.id.conditionButton)\r\n        filter.setOnClickListener() {\r\n            val fragment1 = WantedFilteringFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, fragment1)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        searchContent = view.findViewById<EditText>(R.id.searchContent)\r\n        searchContent.setOnTouchListener { _, _ ->\r\n            val currentTab = tabLayout.selectedTabPosition\r\n            if (currentTab == 1) {\r\n                val wantedWorkNetSearchFragment = WantedWorkNetSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedWorkNetSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"워크넷 채용공고 검색\"\r\n            } else if (currentTab == 0) {\r\n                val wantedRequestingSearchFragment = WantedRequestingSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedRequestingSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n            }\r\n            true\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    override fun onTabSelected(tab: TabLayout.Tab?) {\r\n        val currentTab = tab?.position\r\n        if (currentTab == 1) {\r\n            searchContent.hint = \"워크넷 채용공고 검색\"\r\n        } else if (currentTab == 0) {\r\n            searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n        }\r\n    }\r\n\r\n    override fun onTabUnselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n\r\n    override fun onTabReselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
+++ b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(date 1689769956000)
@@ -12,7 +12,7 @@
 import android.widget.EditText
 import androidx.viewpager.widget.ViewPager
 import com.google.android.material.tabs.TabLayout
-import kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*
+//import kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*
 
 class WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {
     private lateinit var filter: Button
@@ -38,13 +38,13 @@
         tabLayout.addOnTabSelectedListener(this)
 
         filter = view.findViewById<Button>(R.id.conditionButton)
-        filter.setOnClickListener() {
-            val fragment1 = WantedFilteringFragment()
-            requireActivity().supportFragmentManager.beginTransaction()
-                .replace(R.id.fl_container, fragment1)
-                .addToBackStack(null)
-                .commit()
-        }
+//        filter.setOnClickListener() {
+//            val fragment1 = WantedFilteringFragment()
+//            requireActivity().supportFragmentManager.beginTransaction()
+//                .replace(R.id.fl_container, fragment1)
+//                .addToBackStack(null)
+//                .commit()
+//        }
 
         searchContent = view.findViewById<EditText>(R.id.searchContent)
         searchContent.setOnTouchListener { _, _ ->
Index: app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.KeyEvent\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.net.URLEncoder\r\n\r\nclass WantedWorkNetSearchFragment : Fragment() {\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var searchButton: Button\r\n    private lateinit var searchListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private var currentPage = 1\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        val rootView = inflater.inflate(R.layout.fragment_wanted_work_net_search, container, false)\r\n\r\n        searchContent = rootView.findViewById(R.id.searchContent)\r\n        searchListView = rootView.findViewById(R.id.searchListView)\r\n        prevButton = rootView.findViewById(R.id.prevButton)\r\n        nextButton = rootView.findViewById(R.id.nextButton)\r\n\r\n        searchContent.setOnKeyListener { _, keyCode, event ->\r\n            if (event.action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {\r\n                fetchJobDataWithSearch()\r\n                return@setOnKeyListener true\r\n            }\r\n            return@setOnKeyListener false\r\n        }\r\n\r\n        val closeButton = rootView.findViewById<ImageButton>(R.id.backButton)\r\n        closeButton.setOnClickListener {\r\n            requireActivity().onBackPressed()\r\n        }\r\n\r\n        prevButton.visibility = View.GONE\r\n        nextButton.visibility = View.GONE\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobDataWithSearch()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobDataWithSearch()\r\n        }\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchJobDataWithSearch() {\r\n        val searchKeyword = searchContent.text.toString().trim()\r\n\r\n        if (searchKeyword.isNotEmpty()) {\r\n            val encodedKeyword = URLEncoder.encode(searchKeyword, \"UTF-8\")\r\n            val url = \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10&keyword=$encodedKeyword\"\r\n            FetchJobData().execute(url)\r\n        } else {\r\n            // 검색어가 비어있을 때 처리할 내용\r\n        }\r\n    }\r\n\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            if (currentPage > 1 && result.isEmpty()) {\r\n                // nextButton을 누른 후에 빈 리스트가 반환된 경우, \"마지막 페이지입니다\" 토스트 메시지를 표시합니다.\r\n                Toast.makeText(requireContext(), \"마지막 페이지입니다\", Toast.LENGTH_SHORT).show()\r\n                currentPage -= 1 // 이전 페이지로 돌아갑니다.\r\n                nextButton.isEnabled = false // nextButton을 비활성화합니다.\r\n            } else {\r\n                jobList = result\r\n                showJobList()\r\n\r\n                if (searchContent.text.toString().trim().isEmpty()) {\r\n                    // EditText에 입력값이 없을 때\r\n                    prevButton.visibility = View.GONE\r\n                    nextButton.visibility = View.GONE\r\n                } else {\r\n                    // EditText에 입력값이 있을 때\r\n                    if (currentPage > 1 || jobList.size >= 10) {\r\n                        prevButton.visibility = View.VISIBLE\r\n                    } else {\r\n                        prevButton.visibility = View.GONE\r\n                    }\r\n                    nextButton.visibility = View.VISIBLE\r\n                }\r\n\r\n                nextButton.isEnabled = true // nextButton을 활성화합니다.\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter(this, jobList)\r\n        searchListView.adapter = adapter\r\n\r\n        searchListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
+++ b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(date 1689770542000)
@@ -205,7 +205,7 @@
     }
 
     private fun showJobList() {
-        val adapter = CustomAdapter(this, jobList)
+        val adapter = CustomAdapter(this,jobList)
         searchListView.adapter = adapter
 
         searchListView.setOnItemClickListener { _, _, position, _ ->
Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\nimport kotlinx.android.synthetic.main.activity_job_detail.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689769772000)
@@ -1,169 +1,169 @@
-package com.example.a23_hf069
-
-import android.content.Intent
-import android.os.Bundle
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.Button
-import androidx.appcompat.app.AppCompatActivity
-import androidx.fragment.app.Fragment
-import androidx.fragment.app.setFragmentResult
-import kotlinx.android.synthetic.main.activity_job_detail.*
-import kotlinx.android.synthetic.main.fragment_wanted_filtering.*
-import kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*
-
-
-class WantedFilteringFragment : Fragment()  {
-    lateinit var region_btn: Button
-
-    lateinit var edu_btn1 : Button
-    lateinit var edu_btn2 : Button
-    lateinit var edu_btn3 : Button
-    lateinit var edu_btn4 : Button
-    lateinit var edu_btn5 : Button
-    lateinit var edu_btn6 : Button
-
-    lateinit var career_btn1 : Button
-    lateinit var career_btn2 : Button
-    lateinit var career_btn3 : Button
-
-    lateinit var closeDt_btn1 : Button
-    lateinit var closeDt_btn2 : Button
-    lateinit var closeDt_btn3 : Button
-    lateinit var closeDt_btn4 : Button
-    lateinit var closeDt_btn5 : Button
-    lateinit var closeDt_btn6 : Button
-
-    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
-    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
-    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
-
-    private val selectedEducationList: MutableSet<Int> = mutableSetOf()
-    private val selectedCareerList: MutableSet<Int> = mutableSetOf()
-    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()
-
-    lateinit var complete_btn1 : Button //완료버튼
-
-    // 화면 띄우기
-    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-
-    ): View? {
-        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-        //지역
-        region_btn = view.findViewById<Button>(R.id.region_btn)
-
-        //학력 체크
-        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체
-        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교
-        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교
-        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교
-        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)
-        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)
-
-        //경력 체크
-        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체
-        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입
-        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력
-
-        //마감일 체크
-        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)
-        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)
-        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)
-        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)
-        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)
-        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)
-
-
-       /* region_btn.setOnClickListener {
-            val regionFragment = RegionFragment()
-            requireActivity().supportFragmentManager.beginTransaction()
-                .replace(R.id.fl_container, regionFragment)
-                .addToBackStack(null)
-                .commit()
-        }
-*/
-        // 학력 버튼 클릭 리스너
-        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체
-        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교
-        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교
-        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교
-        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)
-        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)
-
-        // 경력 버튼 클릭 리스너
-        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체
-        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입
-        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력
-
-        // 마감일 버튼 클릭 리스너
-        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체
-        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내
-        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내
-        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내
-        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내
-        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내
-
-    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
-        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)
-        complete_btn1.setOnClickListener {
-            val wantedFilteredFragment = WantedFilteredFragment()
-            requireActivity().supportFragmentManager.beginTransaction()
-                .replace(R.id.fl_container, wantedFilteredFragment)
-                .addToBackStack(null)
-                .commit()
-        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
-    }
-
-    private fun SelectedEducation(selected: Int) {
-        if (selectedEducation == 0 || selected > selectedEducation) {
-            selectedEducation = selected
-            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
-            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
-                // 0번과 같은 결과
-
-
-            }
-        }
-        filterItems()
-    }
-
-    private fun SelectedCareer(selected: Int) {
-        if (selectedCareer == 0 || selected > selectedCareer) {
-            selectedCareer = selected
-        }
-        filterItems()
-    }
-
-    private fun SelectedCloseDate(selected: Int) {
-        if (selectedCloseDate == 0 || selected > selectedCloseDate) {
-            selectedCloseDate = selected
-        }
-        filterItems()
-    }
-
-    private fun filterItems() {
-        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)
-        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
-        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
-        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
-
-        // 세 리스트에서 중복되는 값들을 찾습니다.
-        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
-
-        for (item in intersectedItems) {
-            println(item)
-            // 필요한 처리를 수행합니다.
-        }
-    }
-
-
-
-    }
\ No newline at end of file
+//package com.example.a23_hf069
+//
+//import android.content.Intent
+//import android.os.Bundle
+//import android.view.LayoutInflater
+//import android.view.View
+//import android.view.ViewGroup
+//import android.widget.Button
+//import androidx.appcompat.app.AppCompatActivity
+//import androidx.fragment.app.Fragment
+//import androidx.fragment.app.setFragmentResult
+//import kotlinx.android.synthetic.main.activity_job_detail.*
+//import kotlinx.android.synthetic.main.fragment_wanted_filtering.*
+//import kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*
+//
+//
+//class WantedFilteringFragment : Fragment()  {
+//    lateinit var region_btn: Button
+//
+//    lateinit var edu_btn1 : Button
+//    lateinit var edu_btn2 : Button
+//    lateinit var edu_btn3 : Button
+//    lateinit var edu_btn4 : Button
+//    lateinit var edu_btn5 : Button
+//    lateinit var edu_btn6 : Button
+//
+//    lateinit var career_btn1 : Button
+//    lateinit var career_btn2 : Button
+//    lateinit var career_btn3 : Button
+//
+//    lateinit var closeDt_btn1 : Button
+//    lateinit var closeDt_btn2 : Button
+//    lateinit var closeDt_btn3 : Button
+//    lateinit var closeDt_btn4 : Button
+//    lateinit var closeDt_btn5 : Button
+//    lateinit var closeDt_btn6 : Button
+//
+//    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
+//    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
+//    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
+//
+//    private val selectedEducationList: MutableSet<Int> = mutableSetOf()
+//    private val selectedCareerList: MutableSet<Int> = mutableSetOf()
+//    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()
+//
+//    lateinit var complete_btn1 : Button //완료버튼
+//
+//    // 화면 띄우기
+//    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
+//        inflater: LayoutInflater,
+//        container: ViewGroup?,
+//        savedInstanceState: Bundle?
+//
+//    ): View? {
+//        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)
+//    }
+//
+//    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+//        super.onViewCreated(view, savedInstanceState)
+//        //지역
+//        region_btn = view.findViewById<Button>(R.id.region_btn)
+//
+//        //학력 체크
+//        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체
+//        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교
+//        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교
+//        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교
+//        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)
+//        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)
+//
+//        //경력 체크
+//        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체
+//        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입
+//        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력
+//
+//        //마감일 체크
+//        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)
+//        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)
+//        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)
+//        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)
+//        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)
+//        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)
+//
+//
+//       /* region_btn.setOnClickListener {
+//            val regionFragment = RegionFragment()
+//            requireActivity().supportFragmentManager.beginTransaction()
+//                .replace(R.id.fl_container, regionFragment)
+//                .addToBackStack(null)
+//                .commit()
+//        }
+//*/
+//        // 학력 버튼 클릭 리스너
+//        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체
+//        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교
+//        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교
+//        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교
+//        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)
+//        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)
+//
+//        // 경력 버튼 클릭 리스너
+//        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체
+//        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입
+//        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력
+//
+//        // 마감일 버튼 클릭 리스너
+//        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체
+//        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내
+//        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내
+//        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내
+//        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내
+//        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내
+//
+//    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
+//        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)
+//        complete_btn1.setOnClickListener {
+//            val wantedFilteredFragment = WantedFilteredFragment()
+//            requireActivity().supportFragmentManager.beginTransaction()
+//                .replace(R.id.fl_container, wantedFilteredFragment)
+//                .addToBackStack(null)
+//                .commit()
+//        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
+//    }
+//
+//    private fun SelectedEducation(selected: Int) {
+//        if (selectedEducation == 0 || selected > selectedEducation) {
+//            selectedEducation = selected
+//            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
+//            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
+//                // 0번과 같은 결과
+//
+//
+//            }
+//        }
+//        filterItems()
+//    }
+//
+//    private fun SelectedCareer(selected: Int) {
+//        if (selectedCareer == 0 || selected > selectedCareer) {
+//            selectedCareer = selected
+//        }
+//        filterItems()
+//    }
+//
+//    private fun SelectedCloseDate(selected: Int) {
+//        if (selectedCloseDate == 0 || selected > selectedCloseDate) {
+//            selectedCloseDate = selected
+//        }
+//        filterItems()
+//    }
+//
+//    private fun filterItems() {
+//        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)
+//        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
+//        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
+//        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
+//
+//        // 세 리스트에서 중복되는 값들을 찾습니다.
+//        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
+//
+//        for (item in intersectedItems) {
+//            println(item)
+//            // 필요한 처리를 수행합니다.
+//        }
+//    }
+//
+//
+//
+//    }
\ No newline at end of file
