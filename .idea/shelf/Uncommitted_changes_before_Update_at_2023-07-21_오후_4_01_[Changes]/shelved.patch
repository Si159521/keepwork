Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.ListView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.time.LocalDate\r\n\r\n\r\nclass WantedFilteringFragment : Fragment() {\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var jobListView: ListView\r\n\r\n    lateinit var regioncl_btn: Button\r\n    lateinit var jobcl_btn: Button\r\n    lateinit var tv_jobcl_selected: TextView\r\n    lateinit var tv_regioncl_selected: TextView\r\n\r\n    lateinit var edu_btn1: Button\r\n    lateinit var edu_btn2: Button\r\n    lateinit var edu_btn3: Button\r\n    lateinit var edu_btn4: Button\r\n    lateinit var edu_btn5: Button\r\n    lateinit var edu_btn6: Button\r\n\r\n    lateinit var career_btn1: Button\r\n    lateinit var career_btn2: Button\r\n    lateinit var career_btn3: Button\r\n\r\n    lateinit var closeDt_btn1: Button\r\n    lateinit var closeDt_btn2: Button\r\n    lateinit var closeDt_btn3: Button\r\n    lateinit var closeDt_btn4: Button\r\n    lateinit var closeDt_btn5: Button\r\n    lateinit var closeDt_btn6: Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1: Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역 선택\r\n        regioncl_btn = view.findViewById<Button>(R.id.regioncl_btn)\r\n        //직종 선택\r\n        jobcl_btn = view.findViewById<Button>(R.id.jobcl_btn)\r\n\r\n        jobcl_btn.setOnClickListener {\r\n            val jobSelectionFragment = JobWorkNetSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, jobSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        regioncl_btn.setOnClickListener {\r\n            val regionSelectionFragment = RegionSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        // 선택된 지역 정보를 나타낼 TextView 초기화\r\n        tv_regioncl_selected = view.findViewById(R.id.tv_regioncl_selected)\r\n\r\n        // RegionSelectionFragment에서 선택된 직종 정보를 가져와서 tv_regioncl_selected에 설정\r\n        val selectedRegion = arguments?.getString(\"selectedRegion\")\r\n        tv_regioncl_selected.text = selectedRegion\r\n\r\n        // 선택된 직종 정보를 나타낼 TextView 초기화\r\n        tv_jobcl_selected = view.findViewById(R.id.tv_jobcl_selected)\r\n\r\n        // JobSelectionFragment에서 선택된 직종 정보를 가져와서 tv_jobcl_selected에 설정\r\n        val selectedJob = arguments?.getString(\"selectedJob\")\r\n        tv_jobcl_selected.text = selectedJob\r\n\r\n\r\n\r\n\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n    // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 오늘\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 내일\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 1주이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 30일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이상\r\n\r\n        //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val fetchJobData = FetchJobData()\r\n            fetchJobData.execute(\"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=1&display=10\")\r\n\r\n        // 새로운 리스트를 생성하여 필터링된 항목을 저장\r\n            val filteredJobList = fetchJobData.get().toMutableList()\r\n\r\n        // WantedFilteredFragment로 전달\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            val args = Bundle()\r\n            args.putParcelableArrayList(\"filteredJobList\", ArrayList(filteredJobList))\r\n            wantedFilteredFragment.arguments = args\r\n\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n                selectedEducationList.add(0)\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList =\r\n            if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList =\r\n            if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        //각각의 리스트에 담긴 Int형의 데이터들을 String 타입으로 변환\r\n        val convertedEducationList = filteredEducationList.map { value ->\r\n            when (value) {\r\n                0 -> \"00\"\r\n                1 -> \"01\"\r\n                2 -> \"02\"\r\n                3 -> \"03\"\r\n                4 -> \"04\"\r\n                5 -> \"05\"\r\n                else -> {}\r\n            }\r\n        }\r\n        val convertedCareerList = filteredCareerList.map { value ->\r\n            when (value) {\r\n                0 -> \"N\"\r\n                1 -> \"E\"\r\n                2 -> \"Z\"\r\n\r\n                else -> {}\r\n            }\r\n        }\r\n    val convertedCloseDateList = filteredCloseDateList.map { value ->\r\n        val today = LocalDate.now()\r\n        val deadlineDate = when (value) {\r\n           // 0 ->      //전체\r\n            1 -> today // 오늘\r\n            2 -> today.plusDays(1) // 내일\r\n            3 -> today.plusDays(7) // 1주 이내\r\n            4 -> today.plusMonths(1) // 한달 이내\r\n            else -> {today.plusMonths(1) // 한달 이상\r\n             }\r\n        }\r\n        deadlineDate.toString() // 날짜를 문자열로 변환하여 반환\r\n        //xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값\r\n    }\r\n}\r\n\r\n    //워크넷 api 채용목록 xml파일 parsing하는 코드\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        //각각의 리스트에서 추출된 값을 파싱된 xml파일과 대조 -> 중복 건 찾기\r\n        @RequiresApi(Build.VERSION_CODES.O)\r\n        private fun isJobMatched(job: Job): Boolean {\r\n            val convertedEducationList = listOf(\r\n                \"00\", \"01\", \"02\", \"03\", \"04\", \"05\"\r\n            ) // 전체, 초등학교, 중학교, 고등학교, 대학(2년제), 대학(4년제)\r\n            val convertedCareerList = listOf(\r\n                \"N\", \"E\", \"Z\"\r\n            ) // 전체, 신입, 경력\r\n            val convertedCloseDateList = listOf(\r\n                LocalDate.now().toString(), // 오늘\r\n                LocalDate.now().plusDays(1).toString(), // 내일\r\n                LocalDate.now().plusDays(7).toString(), // 1주 이내\r\n                LocalDate.now().plusMonths(1).toString(), // 한달 이내\r\n                LocalDate.now().plusMonths(1).toString() // 한달 이상\r\n            )\r\n\r\n            return convertedEducationList.contains(job.minEdubg) &&\r\n                    convertedCareerList.contains(job.career) &&\r\n                    convertedCloseDateList.contains(job.closeDt)\r\n        }\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter3(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity3.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter3(private val context3: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context3, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context3).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity3 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity3::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689867005254)
@@ -244,11 +244,10 @@
             2 -> today.plusDays(1) // 내일
             3 -> today.plusDays(7) // 1주 이내
             4 -> today.plusMonths(1) // 한달 이내
-            else -> {today.plusMonths(1) // 한달 이상
-             }
+            else -> {}
         }
         deadlineDate.toString() // 날짜를 문자열로 변환하여 반환
-        //xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값
+        //남은기한 = xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값
     }
 }
 
@@ -369,6 +368,8 @@
                     convertedCareerList.contains(job.career) &&
                     convertedCloseDateList.contains(job.closeDt)
         }
+
+
         override fun onPostExecute(result: List<Job>) {
             jobList = result
             showJobList()
@@ -376,6 +377,7 @@
     }
 
     private fun showJobList() {
+        if (::jobListView.isInitialized) {
         val adapter = CustomAdapter3(requireActivity(), jobList)
         jobListView.adapter = adapter
 
@@ -384,6 +386,7 @@
             val intent = JobDetailActivity3.newIntent(requireContext(), job)
             startActivity(intent)
         }
+        }
     }
 }
 
Index: app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.os.Parcel\r\nimport android.os.Parcelable\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Button\r\nimport android.widget.ListView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContentProviderCompat.requireContext\r\nimport androidx.fragment.app.Fragment\r\nimport com.example.a23_hf069.databinding.FragmentWantedWorkNetBinding\r\nimport com.example.a23_hf069.databinding.ActivityJobDetailBinding\r\nimport com.example.a23_hf069.databinding.JobItemBinding\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedWorkNetFragment : Fragment() {\r\n\r\n    private lateinit var binding: FragmentWantedWorkNetBinding\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var jobListView: ListView  // jobListView 변수 선언\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentWantedWorkNetBinding.inflate(inflater, container, false)\r\n        val view = binding.root\r\n\r\n        // UI 요소 초기화\r\n        jobListView = binding.jobListView  // jobListView 초기화\r\n        prevButton = binding.prevButton\r\n        nextButton = binding.nextButton\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // API 호출\r\n        fetchJobData()\r\n\r\n        return view\r\n    }\r\n\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter(jobList, requireContext())\r\n        binding.jobListView.adapter = adapter\r\n\r\n        binding.jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter(private val jobList: List<Job>, private val fragmentContext: Context) :\r\n    ArrayAdapter<Job>(fragmentContext, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val binding = convertView?.let { JobItemBinding.bind(it) }\r\n            ?: JobItemBinding.inflate(LayoutInflater.from(fragmentContext), parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        binding.titleTextView.text = job.title\r\n        binding.companyTextView.text = job.company\r\n        binding.regionContTextView.text = job.region\r\n\r\n        return binding.root\r\n    }\r\n}\r\n\r\n\r\nclass JobDetailActivity : AppCompatActivity() {\r\n\r\n    private lateinit var binding: ActivityJobDetailBinding\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context: Context, job: Job): Intent {\r\n            return Intent(context, JobDetailActivity::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityJobDetailBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        setContentView(view)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        binding.company.text = job?.company\r\n        binding.title.text = job?.title\r\n        binding.salTpNm.text = job?.salTpNm\r\n        binding.sal.text = job?.sal\r\n        binding.region.text = job?.region\r\n        binding.holidayTpNm.text = job?.holidayTpNm\r\n        binding.minEdubg.text = job?.minEdubg\r\n        binding.career.text = job?.career\r\n        binding.closeDt.text = job?.closeDt\r\n        binding.wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        binding.jobsCd.text = job?.jobsCd\r\n\r\n        binding.backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}\r\n\r\ndata class Job(\r\n    val company: String,\r\n    val title: String,\r\n    val salTpNm: String?,\r\n    val sal: String?,\r\n    val region: String?,\r\n    val holidayTpNm: String?,\r\n    val minEdubg: String?,\r\n    val career: String?,\r\n    val closeDt: String?,\r\n    val wantedMobileInfoUrl: String?,\r\n    val jobsCd: String?\r\n) : Parcelable {\r\n    constructor(parcel: Parcel) : this(\r\n        parcel.readString() ?: \"\",\r\n        parcel.readString() ?: \"\",\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString()\r\n    )\r\n\r\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\r\n        parcel.writeString(company)\r\n        parcel.writeString(title)\r\n        parcel.writeString(salTpNm)\r\n        parcel.writeString(sal)\r\n        parcel.writeString(region)\r\n        parcel.writeString(holidayTpNm)\r\n        parcel.writeString(minEdubg)\r\n        parcel.writeString(career)\r\n        parcel.writeString(closeDt)\r\n        parcel.writeString(wantedMobileInfoUrl)\r\n        parcel.writeString(jobsCd)\r\n    }\r\n\r\n    override fun describeContents(): Int {\r\n        return 0\r\n    }\r\n\r\n    companion object CREATOR : Parcelable.Creator<Job> {\r\n        override fun createFromParcel(parcel: Parcel): Job {\r\n            return Job(parcel)\r\n        }\r\n\r\n        override fun newArray(size: Int): Array<Job?> {\r\n            return arrayOfNulls(size)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
+++ b/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt	(date 1689864881019)
@@ -204,7 +204,6 @@
     }
 }
 
-
 class JobDetailActivity : AppCompatActivity() {
 
     private lateinit var binding: ActivityJobDetailBinding
Index: app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedFilteredFragment : Fragment() {\r\n    private lateinit var jobListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)\r\n\r\n        // UI 요소 초기화\r\n        jobListView = view.findViewById(R.id.jobListView)\r\n        prevButton = view.findViewById(R.id.prevButton)\r\n        nextButton = view.findViewById(R.id.nextButton)\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // WantedFilteringFragment.kt에서 argument를 넘겨받아 필터링된 데이터 출력\r\n        val args = arguments\r\n        val filteredJobList = args?.getParcelableArrayList<Job>(\"filteredJobList\")\r\n        filteredJobList?.let {\r\n            jobList = it\r\n            showJobList()\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter2(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity2.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity2 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity2::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(date 1689865964085)
@@ -4,12 +4,15 @@
 import android.content.Intent
 import android.os.AsyncTask
 import android.os.Bundle
+import android.os.Parcel
+import android.os.Parcelable
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import android.widget.*
 import androidx.appcompat.app.AppCompatActivity
 import androidx.fragment.app.Fragment
+import com.example.a23_hf069.databinding.ActivityJobDetailBinding
 import org.xmlpull.v1.XmlPullParser
 import org.xmlpull.v1.XmlPullParserFactory
 import java.io.InputStream
@@ -200,6 +203,7 @@
     }
 }
 
+//채용공고 클릭하면 상세정보 출력
 class JobDetailActivity2 : AppCompatActivity() {
     private lateinit var backButton: ImageView
     private lateinit var company: TextView // 회사명
@@ -244,7 +248,7 @@
         wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
         jobsCd = findViewById(R.id.jobsCd)
 
-        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
+        val job = intent.getParcelableExtra<Job2>(JOB_EXTRA)
 
         company.text = job?.company
         title.text = job?.title
@@ -262,4 +266,60 @@
             onBackPressed()
         }
     }
+}
+
+data class Job2(
+    val company: String,
+    val title: String,
+    val salTpNm: String?,
+    val sal: String?,
+    val region: String?,
+    val holidayTpNm: String?,
+    val minEdubg: String?,
+    val career: String?,
+    val closeDt: String?,
+    val wantedMobileInfoUrl: String?,
+    val jobsCd: String?
+) : Parcelable {
+    constructor(parcel: Parcel) : this(
+        parcel.readString() ?: "",
+        parcel.readString() ?: "",
+        parcel.readString(),
+        parcel.readString(),
+        parcel.readString(),
+        parcel.readString(),
+        parcel.readString(),
+        parcel.readString(),
+        parcel.readString(),
+        parcel.readString(),
+        parcel.readString()
+    )
+
+    override fun writeToParcel(parcel: Parcel, flags: Int) {
+        parcel.writeString(company)
+        parcel.writeString(title)
+        parcel.writeString(salTpNm)
+        parcel.writeString(sal)
+        parcel.writeString(region)
+        parcel.writeString(holidayTpNm)
+        parcel.writeString(minEdubg)
+        parcel.writeString(career)
+        parcel.writeString(closeDt)
+        parcel.writeString(wantedMobileInfoUrl)
+        parcel.writeString(jobsCd)
+    }
+
+    override fun describeContents(): Int {
+        return 0
+    }
+
+    companion object CREATOR : Parcelable.Creator<Job> {
+        override fun createFromParcel(parcel: Parcel): Job {
+            return Job(parcel)
+        }
+
+        override fun newArray(size: Int): Array<Job?> {
+            return arrayOfNulls(size)
+        }
+    }
 }
\ No newline at end of file
