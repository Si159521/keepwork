Index: app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.IOException\r\n\r\nclass ResumeChangeActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"3.34.48.60\" // Replace with your IP address.\r\n    private var userId: String = \"\" // User ID\r\n    private var resumeListNum: Int = -1\r\n    private lateinit var editResumeTitle: EditText\r\n    private lateinit var editTextAcademic: EditText\r\n    private lateinit var editTextCareer: EditText\r\n    private lateinit var editTextIntroduction: EditText\r\n    private lateinit var editTextCertificate: EditText\r\n    private lateinit var editTextEducation: EditText\r\n    private lateinit var editTextDesire: EditText\r\n    private lateinit var buttonSubmit1: Button\r\n    private lateinit var buttonSubmit2: Button\r\n\r\n    private lateinit var backButton_change: ImageButton\r\n\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_resume_change)\r\n\r\n        // Get user ID\r\n        resumeListNum = intent.getIntExtra(\"resumeListNum\", -1)\r\n        userId = intent.getStringExtra(\"userId\") ?: \"\"\r\n\r\n        val textID = findViewById<TextView>(R.id.tvChange_ID)\r\n        textID.text = userId\r\n\r\n        editTextAcademic = findViewById(R.id.edtChange_academic)\r\n        editResumeTitle = findViewById(R.id.edtChange_title)\r\n        editTextCareer = findViewById(R.id.edtChange_career)\r\n        editTextIntroduction = findViewById(R.id.edtChange_introduction)\r\n        editTextCertificate = findViewById(R.id.edtChange_certificate)\r\n        editTextEducation = findViewById(R.id.edtChange_education)\r\n        editTextDesire = findViewById(R.id.edtChange_desire)\r\n        buttonSubmit1 = findViewById(R.id.buttonSubmit_temporary_change)\r\n        buttonSubmit2 = findViewById(R.id.buttonSubmit_complete_change)\r\n\r\n        backButton_change = findViewById(R.id.backButton_change)\r\n\r\n        backButton_change.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n\r\n        buttonSubmit1.setOnClickListener { // 임시 저장\r\n            val resume_listnum = resumeListNum.toString()\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 중\"\r\n\r\n            updateResumeData(\r\n                resume_listnum,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 임시저장되었습니다\", Toast.LENGTH_SHORT).show()\r\n            onBackPressed()\r\n        }\r\n\r\n        buttonSubmit2.setOnClickListener { // 작성완료\r\n            val resume_listnum = resumeListNum.toString()\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 완료\"\r\n\r\n            updateResumeData(\r\n                resume_listnum,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 작성완료되었습니다\", Toast.LENGTH_SHORT).show()\r\n            onBackPressed()\r\n        }\r\n\r\n        // 이력서 아이템 데이터 불러오기\r\n        getResumeItemData(resumeListNum)\r\n    }\r\n\r\n    private fun updateResumeData(\r\n        resume_listnum: String,\r\n        resume_title: String,\r\n        resume_academic: String,\r\n        resume_career: String,\r\n        resume_introduction: String,\r\n        resume_certificate: String,\r\n        resume_learning: String,\r\n        resume_desire: String,\r\n        resume_complete: String\r\n    ) {\r\n        val url =\r\n            \"http://$IP_ADDRESS/android_resume_update.php\" // URL of the hosting server with PHP script\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val formBody = FormBody.Builder()\r\n            .add(\"resume_listnum\", resume_listnum) // ListNum\r\n            .add(\"resume_title\", resume_title) // Title\r\n            .add(\"resume_academic\", resume_academic) // Education\r\n            .add(\"resume_career\", resume_career) // Career\r\n            .add(\"resume_introduction\", resume_introduction) // Introduction\r\n            .add(\"resume_certificate\", resume_certificate) // Certification\r\n            .add(\"resume_learning\", resume_learning) // Education history\r\n            .add(\"resume_desire\", resume_desire) // Desired job position\r\n            .add(\"resume_complete\", resume_complete)\r\n            .build()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .post(formBody)\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                // Handle request success\r\n                val responseData = response.body?.string()\r\n\r\n                // UI 업데이트를 위한 runOnUiThread 호출\r\n                runOnUiThread {\r\n                    Toast.makeText(this@ResumeChangeActivity, responseData, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 아이템 데이터 불러오기\r\n    private fun getResumeItemData(resumeListNum: Int) {\r\n        val url =\r\n            \"http://$IP_ADDRESS/android_resume_change.php?resume_listnum=$resumeListNum\" // 데이터를 불러올 PHP 스크립트의 주소\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .get() // GET 방식으로 요청 변경\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                // 이력서 아이템 데이터를 파싱하여 UI 업데이트\r\n                runOnUiThread {\r\n                    handleResumeItemData(responseData)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 아이템 데이터를 처리하는 함수 추가\r\n    private fun handleResumeItemData(responseData: String?) {\r\n        try {\r\n            val jsonObject = JSONObject(responseData) // JSONObject로 파싱\r\n\r\n            // 이력서 아이템 데이터가 존재하는 경우에만 UI 업데이트\r\n            if (jsonObject.length() > 0) {\r\n                // 여기서 이력서 아이템 데이터를 파싱하여 UI에 표시하는 작업을 수행하면 됩니다.\r\n                // 예를 들어, 다음과 같이 각 EditText에 데이터를 설정할 수 있습니다.\r\n                editResumeTitle.setText(jsonObject.optString(\"resumeTitle\", \"\"))\r\n                editTextAcademic.setText(jsonObject.optString(\"resumeAcademic\", \"\"))\r\n                editTextCareer.setText(jsonObject.optString(\"resumeCareer\", \"\"))\r\n                editTextIntroduction.setText(jsonObject.optString(\"resumeIntroduction\", \"\"))\r\n                editTextCertificate.setText(jsonObject.optString(\"resumeCertificate\", \"\"))\r\n                editTextEducation.setText(jsonObject.optString(\"resumeLearning\", \"\"))\r\n                editTextDesire.setText(jsonObject.optString(\"resumeDesire\", \"\"))\r\n            }\r\n        } catch (e: JSONException) {\r\n            // JSON 파싱 오류 처리\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt b/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt
--- a/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/java/com/example/a23_hf069/ResumeChangeActivity.kt	(date 1690551843023)
@@ -14,7 +14,7 @@
 import java.io.IOException
 
 class ResumeChangeActivity : AppCompatActivity() {
-    private var IP_ADDRESS = "3.34.48.60" // Replace with your IP address.
+    private var IP_ADDRESS = "3.34.136.178" // Replace with your IP address.
     private var userId: String = "" // User ID
     private var resumeListNum: Int = -1
     private lateinit var editResumeTitle: EditText
Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"3.34.48.60\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1690551843048)
@@ -19,7 +19,7 @@
 
 
 class P_loginFragment : Fragment() { //개인로그인
-    private var IP_ADDRESS = "3.34.48.60" // 본인 IP주소를 넣으세요.
+    private var IP_ADDRESS = "3.34.136.178" // 본인 IP주소를 넣으세요.
 
     private var TAG = "phptest" // phptest log 찍으려는 용도
     private lateinit var id_text_input_edit_text: EditText // id
Index: app/src/main/res/layout/activity_individual_sign_up.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".PersonalSignUpActivity\">\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/toolbar\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"?attr/actionBarSize\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/titleTextView\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:text=\"개인회원가입\"\r\n            android:textStyle=\"bold\"\r\n            android:textColor=\"@android:color/black\"\r\n            android:textSize=\"18sp\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/backButton_notice\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"start|center_vertical\"\r\n            android:background=\"@null\"\r\n            android:src=\"@drawable/ic_baseline_arrow_back_ios_24\" />\r\n\r\n    </androidx.appcompat.widget.Toolbar>\r\n\r\n    <ScrollView\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/toolbar\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <!--아이디-->\r\n            <TextView\r\n                android:id=\"@+id/id_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"50dp\"\r\n                android:text=\"아이디\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/id_text_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                app:counterEnabled=\"true\"\r\n                app:counterMaxLength=\"20\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/id_text_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/idCheck_button\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"end\"\r\n                    android:text=\"중복확인\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n\r\n            <!--비밀번호-->\r\n            <TextView\r\n                android:id=\"@+id/password_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"비밀번호\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/password_text_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                app:counterEnabled=\"true\"\r\n                app:counterMaxLength=\"16\"\r\n                app:passwordToggleEnabled=\"true\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/password_text_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:inputType=\"textPassword\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--비밀번호 확인-->\r\n            <TextView\r\n                android:id=\"@+id/password_recheck_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"비밀번호 확인\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/password_recheck_text_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                app:passwordToggleEnabled=\"true\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/password_recheck_text_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:inputType=\"textPassword\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--이름-->\r\n            <TextView\r\n                android:id=\"@+id/name_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"이름\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/name_textview_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/name_textview_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--이메일-->\r\n            <TextView\r\n                android:id=\"@+id/email_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"이메일\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/email_textview_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/email_textview_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--전화번호-->\r\n            <TextView\r\n                android:id=\"@+id/phone_number_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"전화번호\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/phoneNumber_textview_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/phoneNumber_textview_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/phoneNumber_button\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"end\"\r\n                    android:text=\"본인인증\" />\r\n\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--전화번호 인증번호-->\r\n            <TextView\r\n                android:id=\"@+id/phoneNumberCheck_textview\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"40dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"인증번호\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/phoneNumberCheck_textview_input_layout\"\r\n                style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"40dp\"\r\n                android:layout_marginTop=\"10dp\">\r\n\r\n                <com.google.android.material.textfield.TextInputEditText\r\n                    android:id=\"@+id/phoneNumberCheck_textview_input_edit_text\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:textAppearance=\"@style/TextLabel\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/phoneNumberCheck_button\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"end\"\r\n                    android:text=\"확인\" />\r\n\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <!--회원가입 버튼-->\r\n            <Button\r\n                android:id=\"@+id/signUp_button\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:text=\"회원가입\"\r\n                android:textSize=\"15sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/textView_main_result\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:visibility=\"invisible\" />\r\n\r\n        </LinearLayout>\r\n\r\n    </ScrollView>\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_individual_sign_up.xml b/app/src/main/res/layout/activity_individual_sign_up.xml
--- a/app/src/main/res/layout/activity_individual_sign_up.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/res/layout/activity_individual_sign_up.xml	(date 1690552596343)
@@ -224,50 +224,50 @@
                     android:layout_height="wrap_content"
                     android:textAppearance="@style/TextLabel" />
 
-                <Button
-                    android:id="@+id/phoneNumber_button"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_gravity="end"
-                    android:text="본인인증" />
+<!--                <Button-->
+<!--                    android:id="@+id/phoneNumber_button"-->
+<!--                    android:layout_width="wrap_content"-->
+<!--                    android:layout_height="wrap_content"-->
+<!--                    android:layout_gravity="end"-->
+<!--                    android:text="본인인증" />-->
 
             </com.google.android.material.textfield.TextInputLayout>
 
             <!--전화번호 인증번호-->
-            <TextView
-                android:id="@+id/phoneNumberCheck_textview"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginStart="40dp"
-                android:layout_marginTop="20dp"
-                android:text="인증번호"
-                android:textColor="@color/black"
-                android:textSize="15sp"
-                android:textStyle="bold" />
+<!--            <TextView-->
+<!--                android:id="@+id/phoneNumberCheck_textview"-->
+<!--                android:layout_width="wrap_content"-->
+<!--                android:layout_height="wrap_content"-->
+<!--                android:layout_marginStart="40dp"-->
+<!--                android:layout_marginTop="20dp"-->
+<!--                android:text="인증번호"-->
+<!--                android:textColor="@color/black"-->
+<!--                android:textSize="15sp"-->
+<!--                android:textStyle="bold" />-->
 
 
-            <com.google.android.material.textfield.TextInputLayout
-                android:id="@+id/phoneNumberCheck_textview_input_layout"
-                style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginHorizontal="40dp"
-                android:layout_marginTop="10dp">
+<!--            <com.google.android.material.textfield.TextInputLayout-->
+<!--                android:id="@+id/phoneNumberCheck_textview_input_layout"-->
+<!--                style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"-->
+<!--                android:layout_width="match_parent"-->
+<!--                android:layout_height="wrap_content"-->
+<!--                android:layout_marginHorizontal="40dp"-->
+<!--                android:layout_marginTop="10dp">-->
 
-                <com.google.android.material.textfield.TextInputEditText
-                    android:id="@+id/phoneNumberCheck_textview_input_edit_text"
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:textAppearance="@style/TextLabel" />
+<!--                <com.google.android.material.textfield.TextInputEditText-->
+<!--                    android:id="@+id/phoneNumberCheck_textview_input_edit_text"-->
+<!--                    android:layout_width="match_parent"-->
+<!--                    android:layout_height="wrap_content"-->
+<!--                    android:textAppearance="@style/TextLabel" />-->
 
-                <Button
-                    android:id="@+id/phoneNumberCheck_button"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_gravity="end"
-                    android:text="확인" />
+<!--                <Button-->
+<!--                    android:id="@+id/phoneNumberCheck_button"-->
+<!--                    android:layout_width="wrap_content"-->
+<!--                    android:layout_height="wrap_content"-->
+<!--                    android:layout_gravity="end"-->
+<!--                    android:text="확인" />-->
 
-            </com.google.android.material.textfield.TextInputLayout>
+<!--            </com.google.android.material.textfield.TextInputLayout>-->
 
             <!--회원가입 버튼-->
             <Button
Index: app/src/main/res/layout/fragment_c_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".C_loginFragment\">\r\n\r\n    <EditText\r\n        android:id=\"@+id/id_text\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"50dp\"\r\n        android:hint=\"아이디\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/pw_text\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"100dp\"\r\n        android:hint=\"비밀번호\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/login_btn\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"180dp\"\r\n        android:text=\"로그인\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/findID_btn\"\r\n        android:layout_width=\"110dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"아이디찾기\"\r\n        android:layout_marginLeft=\"30dp\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/findPW_btn\"\r\n        android:layout_width=\"120dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"비밀번호찾기\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/signUp_btn\"\r\n        android:layout_width=\"100dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"회원가입\"\r\n        android:layout_marginLeft=\"220dp\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n\r\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_c_login.xml b/app/src/main/res/layout/fragment_c_login.xml
--- a/app/src/main/res/layout/fragment_c_login.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/res/layout/fragment_c_login.xml	(date 1690552920330)
@@ -42,13 +42,13 @@
 
     <Button
         android:id="@+id/findPW_btn"
-        android:layout_width="120dp"
+        android:layout_width="129dp"
         android:layout_height="50dp"
+        android:layout_gravity="center_horizontal"
         android:layout_marginTop="250dp"
         android:backgroundTint="#00FFFFFF"
         android:outlineProvider="none"
         android:text="비밀번호찾기"
-        android:layout_gravity="center_horizontal"
         android:textColor="@color/black" />
 
     <Button
@@ -59,7 +59,7 @@
         android:backgroundTint="#00FFFFFF"
         android:outlineProvider="none"
         android:text="회원가입"
-        android:layout_marginLeft="220dp"
+        android:layout_marginLeft="270dp"
         android:textColor="@color/black" />
 
 
Index: app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.widget.ImageButton\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.TextView\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.IOException\r\n\r\nclass NoticeContentActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"3.34.48.60\" // Replace with your IP address.\r\n    private var noticeListNum: Int = -1\r\n    private lateinit var noticeTitle: TextView\r\n    private lateinit var noticeContent: TextView\r\n    private lateinit var noticeDate: TextView\r\n\r\n    private lateinit var backButton_click: ImageButton\r\n\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_notice_content)\r\n\r\n        // Get user ID\r\n        noticeListNum = intent.getIntExtra(\"noticeListNum\", -1)\r\n\r\n        noticeTitle = findViewById(R.id.notice_title)\r\n        noticeContent = findViewById(R.id.notice_content)\r\n        noticeDate = findViewById(R.id.notice_date)\r\n\r\n        backButton_click = findViewById(R.id.backButton_click)\r\n\r\n        // 공지사항 아이템 데이터 불러오기\r\n        getNoticeItemData(noticeListNum)\r\n\r\n        backButton_click.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    // 공지사항 아이템 데이터 불러오기\r\n    private fun getNoticeItemData(noticeListNum: Int) {\r\n        val url =\r\n            \"http://$IP_ADDRESS/android_notice_content.php?notice_listnum=$noticeListNum\" // 데이터를 불러올 PHP 스크립트의 주소\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .get() // GET 방식으로 요청 변경\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val noticeData = response.body?.string()\r\n                // 공지사항 아이템 데이터를 파싱하여 UI 업데이트\r\n                runOnUiThread {\r\n                    handleNoticeItemData(noticeData)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 공지사항 아이템 데이터를 처리하는 함수 추가\r\n    private fun handleNoticeItemData(responseData: String?) {\r\n        try {\r\n            val jsonObject = JSONObject(responseData) // JSONObject로 파싱\r\n\r\n            // 공지사항 아이템 데이터가 존재하는 경우에만 UI 업데이트\r\n            if (jsonObject.length() > 0) {\r\n                // 여기서 공지사항 아이템 데이터를 파싱하여 UI에 표시하는 작업을 수행하면 됩니다.\r\n                // 예를 들어, 다음과 같이 각 EditText에 데이터를 설정할 수 있습니다.\r\n                noticeTitle.setText(jsonObject.optString(\"noticeTitle\", \"\"))\r\n                noticeContent.setText(jsonObject.optString(\"noticeContent\", \"\"))\r\n                noticeDate.setText(jsonObject.optString(\"noticeDate\", \"\"))\r\n            }\r\n        } catch (e: JSONException) {\r\n            // JSON 파싱 오류 처리\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt b/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt
--- a/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/java/com/example/a23_hf069/NoticeContentActivity.kt	(date 1690553572725)
@@ -11,7 +11,7 @@
 import java.io.IOException
 
 class NoticeContentActivity : AppCompatActivity() {
-    private var IP_ADDRESS = "3.34.48.60" // Replace with your IP address.
+    private var IP_ADDRESS = "3.34.136.178" // Replace with your IP address.
     private var noticeListNum: Int = -1
     private lateinit var noticeTitle: TextView
     private lateinit var noticeContent: TextView
Index: app/src/main/res/layout/fragment_p_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".P_loginFragment\">\r\n\r\n    <EditText\r\n        android:id=\"@+id/id_text\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"50dp\"\r\n        android:hint=\"아이디\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/pw_text\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"100dp\"\r\n        android:hint=\"비밀번호\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/login_btn\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginTop=\"180dp\"\r\n        android:text=\"로그인\" />\r\n\r\n\r\n\r\n    <Button\r\n        android:id=\"@+id/findID_btn\"\r\n        android:layout_width=\"110dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"아이디찾기\"\r\n        android:layout_marginLeft=\"30dp\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/findPW_btn\"\r\n        android:layout_width=\"120dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"비밀번호찾기\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/signUp_btn\"\r\n        android:layout_width=\"100dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginLeft=\"270dp\"\r\n        android:layout_marginTop=\"250dp\"\r\n        android:backgroundTint=\"#00FFFFFF\"\r\n        android:outlineProvider=\"none\"\r\n        android:text=\"회원가입\"\r\n        android:textColor=\"@color/black\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textView_plogin_result\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"600dp\" />\r\n\r\n\r\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_p_login.xml b/app/src/main/res/layout/fragment_p_login.xml
--- a/app/src/main/res/layout/fragment_p_login.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/res/layout/fragment_p_login.xml	(date 1690552920317)
@@ -44,13 +44,13 @@
 
     <Button
         android:id="@+id/findPW_btn"
-        android:layout_width="120dp"
+        android:layout_width="130dp"
         android:layout_height="50dp"
+        android:layout_gravity="center_horizontal"
         android:layout_marginTop="250dp"
         android:backgroundTint="#00FFFFFF"
         android:outlineProvider="none"
         android:text="비밀번호찾기"
-        android:layout_gravity="center_horizontal"
         android:textColor="@color/black" />
 
     <Button
Index: app/src/main/java/com/example/a23_hf069/NoticeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.a23_hf069.R\r\nimport com.google.gson.Gson\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport java.io.IOException\r\n\r\nclass NoticeActivity : AppCompatActivity() {\r\n    // 서버의 IP 주소를 저장할 변수\r\n    private var IP_ADDRESS = \"3.34.48.60\"\r\n\r\n    private lateinit var backButton_notice: ImageButton\r\n\r\n    // 데이터를 담을 리스트\r\n    private var dataList: List<NoticeItem> = emptyList()\r\n\r\n    // 공지사항 목록을 표시할 RecyclerView 변수\r\n    private lateinit var recyclerViewNotice: RecyclerView\r\n\r\n    // 어댑터를 RecyclerView에 설정\r\n    private lateinit var dataAdapterNotice: RecyclerView.Adapter<NoticeActivity.ViewHolder>\r\n\r\n    data class NoticeItem(val noticeListNum: Int, val noticeTitle: String, val noticeDate: String)\r\n    data class DataListContainer(val noticeList: List<NoticeItem>)\r\n\r\n    // View holder class for DataAdapter\r\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val titleTextView: Button = itemView.findViewById(R.id.tvNotice_title)\r\n        val dateTextView: TextView = itemView.findViewById(R.id.tvNotice_date)\r\n    }\r\n\r\n    // 어댑터 클래스\r\n    inner class DataAdapterNotice : RecyclerView.Adapter<ViewHolder>() {\r\n        // Inflate the layout for each item and return a ViewHolder\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            val itemView = LayoutInflater.from(parent.context)\r\n                .inflate(R.layout.notice_item, parent, false)\r\n            return ViewHolder(itemView)\r\n\r\n        }\r\n\r\n        // Bind data to each item in the RecyclerView\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n            val item = dataList[position]\r\n            holder.titleTextView.setText(item.noticeTitle)\r\n            holder.dateTextView.text = item.noticeDate\r\n\r\n            // 공지사항 제목 버튼 클릭 리스너 설정\r\n            holder.titleTextView.setOnClickListener {\r\n                val intent = Intent(holder.itemView.context, NoticeContentActivity::class.java)\r\n                intent.putExtra(\"noticeListNum\", item.noticeListNum)\r\n                holder.itemView.context.startActivity(intent)\r\n            }\r\n        }\r\n\r\n        // Get the number of items in the list\r\n        override fun getItemCount(): Int {\r\n            return dataList.size\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_notice)\r\n\r\n        // RecyclerView 초기화 후 어댑터 설정\r\n        recyclerViewNotice = findViewById(R.id.recyclerviewNotice)\r\n        recyclerViewNotice.layoutManager = LinearLayoutManager(this)\r\n\r\n        // 어댑터 생성 및 RecyclerView에 설정\r\n        dataAdapterNotice = DataAdapterNotice()\r\n        recyclerViewNotice.adapter = dataAdapterNotice\r\n\r\n        // 사용자의 작성중 이력서 개수와 작성완료 이력서 개수를 업데이트\r\n        fetchDataFromServer()\r\n\r\n        backButton_notice = findViewById(R.id.backButton_notice)\r\n\r\n        backButton_notice.setOnClickListener {\r\n            finish()\r\n        }\r\n    }\r\n\r\n    // 서버로부터 데이터를 가져오는 메서드\r\n    private fun fetchDataFromServer() {\r\n        // 서버로 사용자 아이디를 전송하여 이력서 데이터를 가져오도록 요청\r\n        val phpUrl = \"http://$IP_ADDRESS/android_notice.php\"\r\n        val requestBody = FormBody.Builder()\r\n            .build()\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .post(requestBody)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                // 서버로부터 응답을 받았을 때 호출되는 콜백 메서드\r\n                val responseData = response.body?.string()\r\n                Log.d(\"ServerResponse\", responseData ?: \"No response data\")\r\n                if (responseData != null) {\r\n                    try {\r\n                        // JSON 파싱을 위해 Gson 객체 생성\r\n                        val gson = Gson()\r\n\r\n                        // 서버 응답 데이터를 담는 컨테이너 클래스로 파싱\r\n                        val dataListContainer =\r\n                            gson.fromJson(responseData, DataListContainer::class.java)\r\n\r\n                        // UI 업데이트는 메인 스레드에서 실행되어야 함\r\n                        runOnUiThread {\r\n                            // 가져온 공지사항 데이터 리스트를 어댑터에 설정하여 RecyclerView 업데이트\r\n                            dataList = dataListContainer?.noticeList?.reversed() ?: emptyList() // 데이터를 역순으로 설정\r\n                            dataAdapterNotice.notifyDataSetChanged()\r\n                        }\r\n                    } catch (e: JSONException) {\r\n                        // JSON 파싱 오류 발생한 경우\r\n                        Log.e(\"JSONParsingError\", \"Invalid JSON format: $responseData\")\r\n                    }\r\n                } else {\r\n                    // responseData가 null인 경우에 대한 처리를 여기에 추가\r\n                    Log.e(\"ServerResponse\", \"Response data is null\")\r\n                    Toast.makeText(this@NoticeActivity, \"서버로부터 응답이 없습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/NoticeActivity.kt b/app/src/main/java/com/example/a23_hf069/NoticeActivity.kt
--- a/app/src/main/java/com/example/a23_hf069/NoticeActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/java/com/example/a23_hf069/NoticeActivity.kt	(date 1690553572706)
@@ -21,7 +21,7 @@
 
 class NoticeActivity : AppCompatActivity() {
     // 서버의 IP 주소를 저장할 변수
-    private var IP_ADDRESS = "3.34.48.60"
+    private var IP_ADDRESS = "3.34.136.178"
 
     private lateinit var backButton_notice: ImageButton
 
Index: app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.AdapterView\r\nimport androidx.appcompat.app.ActionBar\r\nimport android.app.ProgressDialog\r\nimport android.os.AsyncTask\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass PersonalSignUpActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener {\r\n\r\n    // IP 주소와 태그를 초기화\r\n    private var IP_ADDRESS = \"3.34.48.60\" // 본인 IP주소를 넣으세요.\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private var checkID = false\r\n\r\n    // 뷰 요소들을 선언\r\n    private lateinit var backButton: ImageButton // go back to prev page\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var idcheck_button: Button // id duplicate check\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var password_recheck_text_input_edit_text: EditText // password recheck\r\n    private lateinit var name_textview_input_edit_text: EditText // name\r\n    private lateinit var email_textview_input_edit_text: EditText // email\r\n    private lateinit var phoneNumber_textview_input_edit_text: EditText // phone number\r\n    private lateinit var phoneNumber_button: Button // identification\r\n    private lateinit var phoneNumberCheck_textview_input_edit_text: EditText // identification number\r\n    private lateinit var phoneNumberCheck_button: Button // identification check button\r\n    private lateinit var signUp_button: Button // sign up button\r\n\r\n    // TextView 요소인 mTextViewResult 선언\r\n    private lateinit var mTextViewResult: TextView\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_individual_sign_up)\r\n\r\n        // 기본 툴바 숨기기\r\n        val actionBar: ActionBar? = supportActionBar\r\n        if (actionBar != null) {\r\n            actionBar.hide()\r\n        }\r\n\r\n        // 각 뷰의 요소들과 레이아웃 파일에서의 아이디 연결\r\n        backButton = findViewById(R.id.backButton_notice)  // go back to prev page\r\n        id_text_input_edit_text = findViewById(R.id.id_text_input_edit_text) // personal id\r\n        idcheck_button = findViewById(R.id.idCheck_button) // id duplicate check\r\n        password_text_input_edit_text = findViewById(R.id.password_text_input_edit_text) // personal password\r\n        password_recheck_text_input_edit_text = findViewById(R.id.password_recheck_text_input_edit_text) // password recheck\r\n        name_textview_input_edit_text = findViewById(R.id.name_textview_input_edit_text) // personal name\r\n        email_textview_input_edit_text = findViewById(R.id.email_textview_input_edit_text) // personal email\r\n        phoneNumber_textview_input_edit_text = findViewById(R.id.phoneNumber_textview_input_edit_text) // personal phonenum\r\n        phoneNumber_button = findViewById(R.id.phoneNumber_button) // identification\r\n        phoneNumberCheck_textview_input_edit_text = findViewById(R.id.phoneNumberCheck_textview_input_edit_text) // identification number\r\n        phoneNumberCheck_button = findViewById(R.id.phoneNumberCheck_button) // identification check button\r\n        signUp_button = findViewById(R.id.signUp_button) // sign up button\r\n\r\n        // mTextViewResult를 스크롤 가능하도록 설정\r\n        mTextViewResult = findViewById(R.id.textView_main_result)\r\n        mTextViewResult.movementMethod = ScrollingMovementMethod()\r\n\r\n        // 클릭 시 현재 액티비티 종료\r\n        backButton.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        // 버튼 클릭 시 아이디 중복 확인 과정 수행\r\n        idcheck_button.setOnClickListener {\r\n            val id = id_text_input_edit_text.text.toString().trim()\r\n\r\n            // 아이디가 비어있는지 확인\r\n            if (id.isEmpty()) {\r\n                Toast.makeText(this@PersonalSignUpActivity, \"아이디를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                // 'CheckIdDuplicate' 클래스의 인스턴스인 'task'를 생성\r\n                val task = CheckIdDuplicate()\r\n\r\n                // 'task'의 'execute' 메서드를 호출해 백그라운드에서 아이디 중복 여부 확인\r\n                task.execute(\"http://$IP_ADDRESS/android_id_check.php\", id)\r\n            }\r\n        }\r\n\r\n        // 버튼 클릭 시 회원가입 과정 수행\r\n        signUp_button.setOnClickListener {\r\n            val id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n            val password_recheck = password_recheck_text_input_edit_text.text.toString().trim()\r\n            val name = name_textview_input_edit_text.text.toString().trim()\r\n            val email = email_textview_input_edit_text.text.toString().trim()\r\n            val phoneNumber = phoneNumber_textview_input_edit_text.text.toString().trim()\r\n            val phoneNumberCheck = phoneNumberCheck_textview_input_edit_text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty() || password_recheck.isEmpty() || name.isEmpty() || email.isEmpty() || phoneNumber.isEmpty()) {\r\n                Toast.makeText(this@PersonalSignUpActivity, \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                if (password == password_recheck) {\r\n                    if (password.length <= 5) {\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"비밀번호를 6자리 이상 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                    } else if (!email.contains(\"@\")) {\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"아이디에 @ 및 .com을 포함시키세요.\", Toast.LENGTH_SHORT).show()\r\n                    } else if (phoneNumber.contains(\"-\") || !(phoneNumber[1] == '1')) {\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"올바른 전화번호 형식으로 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n                    } else if (checkID == false) {\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"아이디를 확인해주세요.\", Toast.LENGTH_SHORT).show()\r\n                    } else {\r\n                        // 'InsertData' 클래스의 인스턴스인 'task'를 생성\r\n                        val task = InsertData()\r\n\r\n                        // 'task'의 'execute'메서드를 호출해 백그라운드에서 데이터를 삽입\r\n                        task.execute(\r\n                            // 'execute' 메서드에 서버 URL과 회원가입에 필요한 개인정보를 전달\r\n                            \"http://$IP_ADDRESS/android_log_insert_php.php\",\r\n                            id,\r\n                            password,\r\n                            password_recheck,\r\n                            name,\r\n                            email,\r\n                            phoneNumber\r\n                        )\r\n                        Toast.makeText(this@PersonalSignUpActivity, \"회원가입에 성공하셨습니다.\", Toast.LENGTH_SHORT).show()\r\n                        finish()\r\n                    }\r\n                } else {\r\n                    Toast.makeText(this@PersonalSignUpActivity, \"비밀번호가 일치하지 않습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // AsyncTask를 상속받고, 서버로 데이터를 전송\r\n    inner class InsertData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n\r\n        // 백그라운드 작업 실행 전 실행, 프로그레스 다이얼로그 표시\r\n        override fun onPreExecute() {\r\n            super.onPreExecute()\r\n            progressDialog = ProgressDialog.show(\r\n                this@PersonalSignUpActivity,\r\n                \"Please Wait\",\r\n                null,\r\n                true,\r\n                true\r\n            )\r\n        }\r\n\r\n        // 백그라운드 작업 완료 후 실행, 결과를 처리하고 프로그레스 다이얼로그 종료\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n            progressDialog?.dismiss()\r\n            mTextViewResult.text = result\r\n            Log.d(TAG, \"POST response  - $result\")\r\n        }\r\n\r\n        // 백그라운드에서 수행될 작업 정의, 서버로 데이터 전송 & 응답을 받아 처리\r\n        // AsyncTask의 Params 매개변수로 가변 인자를 받아 String을 반환\r\n        override fun doInBackground(vararg params: String): String {\r\n\r\n            // param 배열에서 서버 URL과 각각의 개인정보 추출\r\n            val serverURL = params[0]\r\n            val personal_id = params[1]\r\n            val personal_password = params[2]\r\n            val personal_password_chk = params[3]\r\n            val personal_name = params[4]\r\n            val personal_email = params[5]\r\n            val personal_phonenum = params[6]\r\n\r\n            // POST 요청으로 전송할 파라미터 문자열 구성\r\n            val postParameters =\r\n                \"personal_id=$personal_id&personal_password=$personal_password&personal_password_chk=$personal_password_chk&personal_name=$personal_name&personal_email=$personal_email&personal_phonenum=$personal_phonenum\"\r\n\r\n            // 'serverURL'을 기반으로 URL 객체 생성, 'openConnection'메서드를 사용해 HttpURLconnection 객체 얻음\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                // 연결과 읽기 타임아웃 설정\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n\r\n                // 요청 메서드를 POST로 설정정\r\n                httpURLConnection.requestMethod = \"POST\"\r\n\r\n                // 서버에 연결\r\n                httpURLConnection.connect()\r\n\r\n                // 연결에 대한 출력 스트림을 얻고, 파라미터를 'UTF-8'로 인코딩하여 전송\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                // 서버로부터 응답 상태 코드 얻음\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                // 응답 상태 코드가 'HTTP_OK(200)'인 경우, 'inputStream'을 얻고, 아닌 경우 'errorStream'을 얻음\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                // 'inputStream'을 'UTF-8'로 읽기 위해 'InputStreadReader'와 'BufferedReader'를 생성\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n\r\n                // 'StringBuilder'를 사용해 응답 데이터를 한 줄씩 읽어 연결\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                // 'bufferReader' 닫기\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n\r\n                // 'sb.toString()'을 반환하여 응답 데이터를 반환\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"InsertData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n    }\r\n\r\n    // 아이템이 선택되었을 때 호출\r\n    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {}\r\n\r\n    // 아무것도 선택되지 않았을 때 호출\r\n    override fun onNothingSelected(parent: AdapterView<*>?) {}\r\n\r\n    // AsyncTask를 상속받고, 서버로 아이디 중복 여부 확인을 위한 데이터를 전송\r\n    inner class CheckIdDuplicate : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n\r\n        // 백그라운드 작업 실행 전 실행, 프로그레스 다이얼로그 표시\r\n        override fun onPreExecute() {\r\n            super.onPreExecute()\r\n            progressDialog = ProgressDialog.show(\r\n                this@PersonalSignUpActivity,\r\n                \"Please Wait\",\r\n                null,\r\n                true,\r\n                true\r\n            )\r\n        }\r\n\r\n        // 백그라운드 작업 완료 후 실행, 결과를 처리하고 프로그레스 다이얼로그 종료\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n            progressDialog?.dismiss()\r\n            if (result == \"duplicate\") {\r\n                Toast.makeText(this@PersonalSignUpActivity, \"중복된 아이디입니다.\", Toast.LENGTH_SHORT).show()\r\n                checkID = false\r\n            } else {\r\n                Toast.makeText(this@PersonalSignUpActivity, \"사용 가능한 아이디입니다.\", Toast.LENGTH_SHORT).show()\r\n                checkID = true\r\n            }\r\n        }\r\n\r\n        // 백그라운드에서 수행될 작업 정의, 서버로 데이터 전송 & 응답을 받아 처리\r\n        // AsyncTask의 Params 매개변수로 가변 인자를 받아 String을 반환\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val id = params[1]\r\n\r\n            // POST 요청으로 전송할 파라미터 문자열 구성\r\n            val postParameters = \"personal_id=$id\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(TAG, \"php 값: ${sb.toString()}\")\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"CheckIdDuplicate: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt b/app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt
--- a/app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/java/com/example/a23_hf069/PersonalSignUpActivity.kt	(date 1690553197685)
@@ -23,7 +23,7 @@
 class PersonalSignUpActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener {
 
     // IP 주소와 태그를 초기화
-    private var IP_ADDRESS = "3.34.48.60" // 본인 IP주소를 넣으세요.
+    private var IP_ADDRESS = "3.34.136.178" // 본인 IP주소를 넣으세요.
     private var TAG = "phptest" // phptest log 찍으려는 용도
     private var checkID = false
 
@@ -63,9 +63,9 @@
         name_textview_input_edit_text = findViewById(R.id.name_textview_input_edit_text) // personal name
         email_textview_input_edit_text = findViewById(R.id.email_textview_input_edit_text) // personal email
         phoneNumber_textview_input_edit_text = findViewById(R.id.phoneNumber_textview_input_edit_text) // personal phonenum
-        phoneNumber_button = findViewById(R.id.phoneNumber_button) // identification
-        phoneNumberCheck_textview_input_edit_text = findViewById(R.id.phoneNumberCheck_textview_input_edit_text) // identification number
-        phoneNumberCheck_button = findViewById(R.id.phoneNumberCheck_button) // identification check button
+        // phoneNumber_button = findViewById(R.id.phoneNumber_button) // identification
+        // phoneNumberCheck_textview_input_edit_text = findViewById(R.id.phoneNumberCheck_textview_input_edit_text) // identification number
+        // phoneNumberCheck_button = findViewById(R.id.phoneNumberCheck_button) // identification check button
         signUp_button = findViewById(R.id.signUp_button) // sign up button
 
         // mTextViewResult를 스크롤 가능하도록 설정
@@ -101,7 +101,7 @@
             val name = name_textview_input_edit_text.text.toString().trim()
             val email = email_textview_input_edit_text.text.toString().trim()
             val phoneNumber = phoneNumber_textview_input_edit_text.text.toString().trim()
-            val phoneNumberCheck = phoneNumberCheck_textview_input_edit_text.toString().trim()
+            // val phoneNumberCheck = phoneNumberCheck_textview_input_edit_text.toString().trim()
 
             if (id.isEmpty() || password.isEmpty() || password_recheck.isEmpty() || name.isEmpty() || email.isEmpty() || phoneNumber.isEmpty()) {
                 Toast.makeText(this@PersonalSignUpActivity, "정보를 입력해주세요.", Toast.LENGTH_SHORT).show()
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ /dev/null	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
@@ -1,83 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport okhttp3.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONException\r\nimport java.io.IOException\r\n\r\nclass ResumeFragment : Fragment() {\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n    private lateinit var userId: String // 사용자 아이디\r\n\r\n    private lateinit var buttonSubmit: Button\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var dataAdapter: DataAdapter\r\n    private val dataList: MutableList<Data> = mutableListOf()  // DB에서 가져온 데이터 리스트\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view = inflater.inflate(R.layout.fragment_resume, container, false)\r\n\r\n        // 사용자 아이디 받아오기\r\n        if (arguments != null) {\r\n            userId = arguments?.getString(\"userId\", \"\") ?: \"\"\r\n        }\r\n\r\n        val textID = view.findViewById<TextView>(R.id.tvID1)\r\n        textID.text = userId\r\n\r\n        // RecyclerView 초기화\r\n        recyclerView = view.findViewById(R.id.recyclerviewResume)\r\n        recyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n        dataAdapter = DataAdapter(dataList)\r\n        recyclerView.adapter = dataAdapter\r\n\r\n        // PHP 파일 URL\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_php.php\"\r\n\r\n        // HTTP 요청 보내기\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (responseData != null) {\r\n                    // 응답 데이터 처리\r\n                    handleResponseData(responseData)\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n\r\n        buttonSubmit = view.findViewById<Button>(R.id.buttonSubmit)\r\n        buttonSubmit.setOnClickListener {\r\n            val intent = Intent(requireContext(), ResumeWriteActivity::class.java)\r\n            intent.putExtra(\"userId\", userId)\r\n            startActivity(intent)\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    private fun handleResponseData(responseData: String) {\r\n        try {\r\n            // JSON 데이터 파싱\r\n            val jsonArray = JSONArray(responseData)\r\n            for (i in 0 until jsonArray.length()) {\r\n                val jsonObject = jsonArray.getJSONObject(i)\r\n                val resumeTitle = jsonObject.getString(\"resumeTitle\")\r\n                val writeStatus = jsonObject.getString(\"writeStatus\")\r\n                val data = Data(resumeTitle, writeStatus)\r\n                dataList.add(data)\r\n            }\r\n\r\n            // RecyclerView 갱신\r\n            dataAdapter.notifyDataSetChanged()\r\n        } catch (e: JSONException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n\r\ndata class Data(val resumeTitle: String, val writeStatus: String)\r\n\r\nclass DataAdapter(private val dataList: List<Data>) :\r\n    RecyclerView.Adapter<DataAdapter.ViewHolder>() {\r\n\r\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val textViewTitle: TextView = itemView.findViewById(R.id.tvResumeTitle)\r\n        val textViewStatus: TextView = itemView.findViewById(R.id.tvWriteStatus)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.resume_item, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val data = dataList[position]\r\n        holder.textViewTitle.text = data.resumeTitle\r\n        holder.textViewStatus.text = data.writeStatus\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return dataList.size\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(revision fd535982a1c40adfc88f35a19b767f6492daa760)
-+++ b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(date 1689778945719)
-@@ -13,12 +13,12 @@
- import okhttp3.*
- import org.json.JSONArray
- import org.json.JSONException
-+import org.json.JSONObject
- import java.io.IOException
- 
- class ResumeFragment : Fragment() {
--    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
-+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
-     private lateinit var userId: String // 사용자 아이디
--
-     private lateinit var buttonSubmit: Button
-     private lateinit var recyclerView: RecyclerView
-     private lateinit var dataAdapter: DataAdapter
-@@ -42,11 +42,15 @@
-         recyclerView.adapter = dataAdapter
- 
-         // PHP 파일 URL
--        val phpUrl = "http://$IP_ADDRESS/android_resume_php.php"
-+        val phpUrl = "http://$IP_ADDRESS/android_resume2.php"
- 
--        // HTTP 요청 보내기
-+        val requestBody = FormBody.Builder()
-+            .add("personal_id", userId)
-+            .build()
-+
-         val request = Request.Builder()
-             .url(phpUrl)
-+            .post(requestBody)
-             .build()
- 
-         val client = OkHttpClient()
-@@ -77,18 +81,32 @@
- 
-     private fun handleResponseData(responseData: String) {
-         try {
--            // JSON 데이터 파싱
--            val jsonArray = JSONArray(responseData)
--            for (i in 0 until jsonArray.length()) {
--                val jsonObject = jsonArray.getJSONObject(i)
--                val resumeTitle = jsonObject.getString("resumeTitle")
--                val writeStatus = jsonObject.getString("writeStatus")
-+            val jsonObject = JSONObject(responseData)
-+            // cnt1_result와 cnt2_result 값 추출
-+            val cnt1Result = jsonObject.getInt("cnt1_result")
-+            val cnt2Result = jsonObject.getInt("cnt2_result")
-+
-+            // UI 업데이트를 메인 스레드에서 수행
-+            requireActivity().runOnUiThread {
-+                val resumeTemCnt = requireView().findViewById<TextView>(R.id.textView_resume_temporary_count)
-+                val resumeComCnt = requireView().findViewById<TextView>(R.id.textView_resume_complete_count)
-+                resumeTemCnt.text = cnt1Result.toString()
-+                resumeComCnt.text = cnt2Result.toString()
-+            }
-+
-+            val dataArray = jsonObject.getJSONArray("data")
-+            for (i in 0 until dataArray.length()) {
-+                val dataObject = dataArray.getJSONObject(i)
-+                val resumeTitle = dataObject.getString("resume_title")
-+                val writeStatus = dataObject.getString("resume_complete")
-                 val data = Data(resumeTitle, writeStatus)
-                 dataList.add(data)
-             }
- 
-             // RecyclerView 갱신
--            dataAdapter.notifyDataSetChanged()
-+            requireActivity().runOnUiThread {
-+                dataAdapter.notifyDataSetChanged()
-+            }
-         } catch (e: JSONException) {
-             e.printStackTrace()
-         }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__8_07__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__8_07__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__8_07__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__8_07__Changes_.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ /dev/null	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]" date="1689937643616" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_8_07_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-21 오후 8:07 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__4_01__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__4_01__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__4_01__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21__4_01__Changes_.xml	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ /dev/null	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]" date="1689922917922" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-21 오후 4:01 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-21_오후_4_01_[Changes]/shelved.patch	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ /dev/null	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
@@ -1,172 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.ListView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.time.LocalDate\r\n\r\n\r\nclass WantedFilteringFragment : Fragment() {\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var jobListView: ListView\r\n\r\n    lateinit var regioncl_btn: Button\r\n    lateinit var jobcl_btn: Button\r\n    lateinit var tv_jobcl_selected: TextView\r\n    lateinit var tv_regioncl_selected: TextView\r\n\r\n    lateinit var edu_btn1: Button\r\n    lateinit var edu_btn2: Button\r\n    lateinit var edu_btn3: Button\r\n    lateinit var edu_btn4: Button\r\n    lateinit var edu_btn5: Button\r\n    lateinit var edu_btn6: Button\r\n\r\n    lateinit var career_btn1: Button\r\n    lateinit var career_btn2: Button\r\n    lateinit var career_btn3: Button\r\n\r\n    lateinit var closeDt_btn1: Button\r\n    lateinit var closeDt_btn2: Button\r\n    lateinit var closeDt_btn3: Button\r\n    lateinit var closeDt_btn4: Button\r\n    lateinit var closeDt_btn5: Button\r\n    lateinit var closeDt_btn6: Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1: Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역 선택\r\n        regioncl_btn = view.findViewById<Button>(R.id.regioncl_btn)\r\n        //직종 선택\r\n        jobcl_btn = view.findViewById<Button>(R.id.jobcl_btn)\r\n\r\n        jobcl_btn.setOnClickListener {\r\n            val jobSelectionFragment = JobWorkNetSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, jobSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        regioncl_btn.setOnClickListener {\r\n            val regionSelectionFragment = RegionSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        // 선택된 지역 정보를 나타낼 TextView 초기화\r\n        tv_regioncl_selected = view.findViewById(R.id.tv_regioncl_selected)\r\n\r\n        // RegionSelectionFragment에서 선택된 직종 정보를 가져와서 tv_regioncl_selected에 설정\r\n        val selectedRegion = arguments?.getString(\"selectedRegion\")\r\n        tv_regioncl_selected.text = selectedRegion\r\n\r\n        // 선택된 직종 정보를 나타낼 TextView 초기화\r\n        tv_jobcl_selected = view.findViewById(R.id.tv_jobcl_selected)\r\n\r\n        // JobSelectionFragment에서 선택된 직종 정보를 가져와서 tv_jobcl_selected에 설정\r\n        val selectedJob = arguments?.getString(\"selectedJob\")\r\n        tv_jobcl_selected.text = selectedJob\r\n\r\n\r\n\r\n\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n    // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 오늘\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 내일\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 1주이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 30일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이상\r\n\r\n        //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val fetchJobData = FetchJobData()\r\n            fetchJobData.execute(\"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=1&display=10\")\r\n\r\n        // 새로운 리스트를 생성하여 필터링된 항목을 저장\r\n            val filteredJobList = fetchJobData.get().toMutableList()\r\n\r\n        // WantedFilteredFragment로 전달\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            val args = Bundle()\r\n            args.putParcelableArrayList(\"filteredJobList\", ArrayList(filteredJobList))\r\n            wantedFilteredFragment.arguments = args\r\n\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n                selectedEducationList.add(0)\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList =\r\n            if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList =\r\n            if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        //각각의 리스트에 담긴 Int형의 데이터들을 String 타입으로 변환\r\n        val convertedEducationList = filteredEducationList.map { value ->\r\n            when (value) {\r\n                0 -> \"00\"\r\n                1 -> \"01\"\r\n                2 -> \"02\"\r\n                3 -> \"03\"\r\n                4 -> \"04\"\r\n                5 -> \"05\"\r\n                else -> {}\r\n            }\r\n        }\r\n        val convertedCareerList = filteredCareerList.map { value ->\r\n            when (value) {\r\n                0 -> \"N\"\r\n                1 -> \"E\"\r\n                2 -> \"Z\"\r\n\r\n                else -> {}\r\n            }\r\n        }\r\n    val convertedCloseDateList = filteredCloseDateList.map { value ->\r\n        val today = LocalDate.now()\r\n        val deadlineDate = when (value) {\r\n           // 0 ->      //전체\r\n            1 -> today // 오늘\r\n            2 -> today.plusDays(1) // 내일\r\n            3 -> today.plusDays(7) // 1주 이내\r\n            4 -> today.plusMonths(1) // 한달 이내\r\n            else -> {today.plusMonths(1) // 한달 이상\r\n             }\r\n        }\r\n        deadlineDate.toString() // 날짜를 문자열로 변환하여 반환\r\n        //xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값\r\n    }\r\n}\r\n\r\n    //워크넷 api 채용목록 xml파일 parsing하는 코드\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        //각각의 리스트에서 추출된 값을 파싱된 xml파일과 대조 -> 중복 건 찾기\r\n        @RequiresApi(Build.VERSION_CODES.O)\r\n        private fun isJobMatched(job: Job): Boolean {\r\n            val convertedEducationList = listOf(\r\n                \"00\", \"01\", \"02\", \"03\", \"04\", \"05\"\r\n            ) // 전체, 초등학교, 중학교, 고등학교, 대학(2년제), 대학(4년제)\r\n            val convertedCareerList = listOf(\r\n                \"N\", \"E\", \"Z\"\r\n            ) // 전체, 신입, 경력\r\n            val convertedCloseDateList = listOf(\r\n                LocalDate.now().toString(), // 오늘\r\n                LocalDate.now().plusDays(1).toString(), // 내일\r\n                LocalDate.now().plusDays(7).toString(), // 1주 이내\r\n                LocalDate.now().plusMonths(1).toString(), // 한달 이내\r\n                LocalDate.now().plusMonths(1).toString() // 한달 이상\r\n            )\r\n\r\n            return convertedEducationList.contains(job.minEdubg) &&\r\n                    convertedCareerList.contains(job.career) &&\r\n                    convertedCloseDateList.contains(job.closeDt)\r\n        }\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter3(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity3.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter3(private val context3: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context3, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context3).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity3 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity3::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    }
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689867005254)
-@@ -244,11 +244,10 @@
-             2 -> today.plusDays(1) // 내일
-             3 -> today.plusDays(7) // 1주 이내
-             4 -> today.plusMonths(1) // 한달 이내
--            else -> {today.plusMonths(1) // 한달 이상
--             }
-+            else -> {}
-         }
-         deadlineDate.toString() // 날짜를 문자열로 변환하여 반환
--        //xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값
-+        //남은기한 = xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값
-     }
- }
- 
-@@ -369,6 +368,8 @@
-                     convertedCareerList.contains(job.career) &&
-                     convertedCloseDateList.contains(job.closeDt)
-         }
-+
-+
-         override fun onPostExecute(result: List<Job>) {
-             jobList = result
-             showJobList()
-@@ -376,6 +377,7 @@
-     }
- 
-     private fun showJobList() {
-+        if (::jobListView.isInitialized) {
-         val adapter = CustomAdapter3(requireActivity(), jobList)
-         jobListView.adapter = adapter
- 
-@@ -384,6 +386,7 @@
-             val intent = JobDetailActivity3.newIntent(requireContext(), job)
-             startActivity(intent)
-         }
-+        }
-     }
- }
- 
-Index: app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.os.Parcel\r\nimport android.os.Parcelable\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Button\r\nimport android.widget.ListView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContentProviderCompat.requireContext\r\nimport androidx.fragment.app.Fragment\r\nimport com.example.a23_hf069.databinding.FragmentWantedWorkNetBinding\r\nimport com.example.a23_hf069.databinding.ActivityJobDetailBinding\r\nimport com.example.a23_hf069.databinding.JobItemBinding\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedWorkNetFragment : Fragment() {\r\n\r\n    private lateinit var binding: FragmentWantedWorkNetBinding\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var jobListView: ListView  // jobListView 변수 선언\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentWantedWorkNetBinding.inflate(inflater, container, false)\r\n        val view = binding.root\r\n\r\n        // UI 요소 초기화\r\n        jobListView = binding.jobListView  // jobListView 초기화\r\n        prevButton = binding.prevButton\r\n        nextButton = binding.nextButton\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // API 호출\r\n        fetchJobData()\r\n\r\n        return view\r\n    }\r\n\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter(jobList, requireContext())\r\n        binding.jobListView.adapter = adapter\r\n\r\n        binding.jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter(private val jobList: List<Job>, private val fragmentContext: Context) :\r\n    ArrayAdapter<Job>(fragmentContext, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val binding = convertView?.let { JobItemBinding.bind(it) }\r\n            ?: JobItemBinding.inflate(LayoutInflater.from(fragmentContext), parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        binding.titleTextView.text = job.title\r\n        binding.companyTextView.text = job.company\r\n        binding.regionContTextView.text = job.region\r\n\r\n        return binding.root\r\n    }\r\n}\r\n\r\n\r\nclass JobDetailActivity : AppCompatActivity() {\r\n\r\n    private lateinit var binding: ActivityJobDetailBinding\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context: Context, job: Job): Intent {\r\n            return Intent(context, JobDetailActivity::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityJobDetailBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        setContentView(view)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        binding.company.text = job?.company\r\n        binding.title.text = job?.title\r\n        binding.salTpNm.text = job?.salTpNm\r\n        binding.sal.text = job?.sal\r\n        binding.region.text = job?.region\r\n        binding.holidayTpNm.text = job?.holidayTpNm\r\n        binding.minEdubg.text = job?.minEdubg\r\n        binding.career.text = job?.career\r\n        binding.closeDt.text = job?.closeDt\r\n        binding.wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        binding.jobsCd.text = job?.jobsCd\r\n\r\n        binding.backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}\r\n\r\ndata class Job(\r\n    val company: String,\r\n    val title: String,\r\n    val salTpNm: String?,\r\n    val sal: String?,\r\n    val region: String?,\r\n    val holidayTpNm: String?,\r\n    val minEdubg: String?,\r\n    val career: String?,\r\n    val closeDt: String?,\r\n    val wantedMobileInfoUrl: String?,\r\n    val jobsCd: String?\r\n) : Parcelable {\r\n    constructor(parcel: Parcel) : this(\r\n        parcel.readString() ?: \"\",\r\n        parcel.readString() ?: \"\",\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString(),\r\n        parcel.readString()\r\n    )\r\n\r\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\r\n        parcel.writeString(company)\r\n        parcel.writeString(title)\r\n        parcel.writeString(salTpNm)\r\n        parcel.writeString(sal)\r\n        parcel.writeString(region)\r\n        parcel.writeString(holidayTpNm)\r\n        parcel.writeString(minEdubg)\r\n        parcel.writeString(career)\r\n        parcel.writeString(closeDt)\r\n        parcel.writeString(wantedMobileInfoUrl)\r\n        parcel.writeString(jobsCd)\r\n    }\r\n\r\n    override fun describeContents(): Int {\r\n        return 0\r\n    }\r\n\r\n    companion object CREATOR : Parcelable.Creator<Job> {\r\n        override fun createFromParcel(parcel: Parcel): Job {\r\n            return Job(parcel)\r\n        }\r\n\r\n        override fun newArray(size: Int): Array<Job?> {\r\n            return arrayOfNulls(size)\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedWorkNetFragment.kt	(date 1689864881019)
-@@ -204,7 +204,6 @@
-     }
- }
- 
--
- class JobDetailActivity : AppCompatActivity() {
- 
-     private lateinit var binding: ActivityJobDetailBinding
-Index: app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedFilteredFragment : Fragment() {\r\n    private lateinit var jobListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)\r\n\r\n        // UI 요소 초기화\r\n        jobListView = view.findViewById(R.id.jobListView)\r\n        prevButton = view.findViewById(R.id.prevButton)\r\n        nextButton = view.findViewById(R.id.nextButton)\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // WantedFilteringFragment.kt에서 argument를 넘겨받아 필터링된 데이터 출력\r\n        val args = arguments\r\n        val filteredJobList = args?.getParcelableArrayList<Job>(\"filteredJobList\")\r\n        filteredJobList?.let {\r\n            jobList = it\r\n            showJobList()\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter2(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity2.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity2 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity2::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(revision 286e268f55d79ba3f704bd4283943749f6596cd2)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(date 1689865964085)
-@@ -4,12 +4,15 @@
- import android.content.Intent
- import android.os.AsyncTask
- import android.os.Bundle
-+import android.os.Parcel
-+import android.os.Parcelable
- import android.view.LayoutInflater
- import android.view.View
- import android.view.ViewGroup
- import android.widget.*
- import androidx.appcompat.app.AppCompatActivity
- import androidx.fragment.app.Fragment
-+import com.example.a23_hf069.databinding.ActivityJobDetailBinding
- import org.xmlpull.v1.XmlPullParser
- import org.xmlpull.v1.XmlPullParserFactory
- import java.io.InputStream
-@@ -200,6 +203,7 @@
-     }
- }
- 
-+//채용공고 클릭하면 상세정보 출력
- class JobDetailActivity2 : AppCompatActivity() {
-     private lateinit var backButton: ImageView
-     private lateinit var company: TextView // 회사명
-@@ -244,7 +248,7 @@
-         wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
-         jobsCd = findViewById(R.id.jobsCd)
- 
--        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
-+        val job = intent.getParcelableExtra<Job2>(JOB_EXTRA)
- 
-         company.text = job?.company
-         title.text = job?.title
-@@ -262,4 +266,60 @@
-             onBackPressed()
-         }
-     }
-+}
-+
-+data class Job2(
-+    val company: String,
-+    val title: String,
-+    val salTpNm: String?,
-+    val sal: String?,
-+    val region: String?,
-+    val holidayTpNm: String?,
-+    val minEdubg: String?,
-+    val career: String?,
-+    val closeDt: String?,
-+    val wantedMobileInfoUrl: String?,
-+    val jobsCd: String?
-+) : Parcelable {
-+    constructor(parcel: Parcel) : this(
-+        parcel.readString() ?: "",
-+        parcel.readString() ?: "",
-+        parcel.readString(),
-+        parcel.readString(),
-+        parcel.readString(),
-+        parcel.readString(),
-+        parcel.readString(),
-+        parcel.readString(),
-+        parcel.readString(),
-+        parcel.readString(),
-+        parcel.readString()
-+    )
-+
-+    override fun writeToParcel(parcel: Parcel, flags: Int) {
-+        parcel.writeString(company)
-+        parcel.writeString(title)
-+        parcel.writeString(salTpNm)
-+        parcel.writeString(sal)
-+        parcel.writeString(region)
-+        parcel.writeString(holidayTpNm)
-+        parcel.writeString(minEdubg)
-+        parcel.writeString(career)
-+        parcel.writeString(closeDt)
-+        parcel.writeString(wantedMobileInfoUrl)
-+        parcel.writeString(jobsCd)
-+    }
-+
-+    override fun describeContents(): Int {
-+        return 0
-+    }
-+
-+    companion object CREATOR : Parcelable.Creator<Job> {
-+        override fun createFromParcel(parcel: Parcel): Job {
-+            return Job(parcel)
-+        }
-+
-+        override fun newArray(size: Int): Array<Job?> {
-+            return arrayOfNulls(size)
-+        }
-+    }
- }
-\ No newline at end of file
Index: app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContentProviderCompat.requireContext\r\nimport androidx.core.content.ContextCompat.startActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.a23_hf069.R\r\nimport com.example.a23_hf069.ResumeChangeActivity\r\nimport com.example.a23_hf069.ResumeClickActivity\r\nimport com.example.a23_hf069.ResumeWriteActivity\r\nimport com.google.gson.Gson\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.IOException\r\n\r\nclass ResumeFragment : Fragment() {\r\n    // 서버의 IP 주소를 저장할 변수\r\n    private var IP_ADDRESS = \"3.34.48.60\"\r\n\r\n    // 사용자 ID를 저장할 변수\r\n    private lateinit var userId: String\r\n\r\n    // 사용자의 작성중 이력서 개수를 표시할 TextView 변수\r\n    private lateinit var tvResume_temporary_count: TextView\r\n\r\n    // 사용자의 작성완료 이력서 개수를 표시할 TextView 변수\r\n    private lateinit var tvResume_complete_count: TextView\r\n\r\n    // 이력서 추가 버튼을 나타낼 Button 변수\r\n    private lateinit var buttonAddResume: Button\r\n\r\n    // 이력서 목록을 표시할 RecyclerView 변수\r\n    private lateinit var recyclerView: RecyclerView\r\n\r\n    // 이력서 목록을 표시하는 어댑터를 담을 변수\r\n    private lateinit var dataAdapter: DataAdapter\r\n\r\n    // 이력서 목록을 업데이트하는 주기를 지정하는 변수 (2초로 설정)\r\n    private val updateIntervalMillis: Long = 2000\r\n\r\n    // 업데이트를 위해 사용할 핸들러 객체\r\n    private val handler = Handler()\r\n\r\n    // Handler 동작 여부를 나타내는 변수\r\n    private var isHandlerRunning = false\r\n\r\n    // Fragment가 화면에 보일 때 호출되는 메서드\r\n    override fun onStart() {\r\n        super.onStart()\r\n        // Handler 시작 (주기적인 작업 시작)\r\n        startHandler()\r\n    }\r\n\r\n    // Fragment가 화면에서 사라질 때 호출되는 메서드\r\n    override fun onStop() {\r\n        super.onStop()\r\n        // Handler 중지 (주기적인 작업 중지)\r\n        stopHandler()\r\n    }\r\n\r\n    // Handler 시작 메서드\r\n    private fun startHandler() {\r\n        if (!isHandlerRunning) {\r\n            handler.postDelayed(updateDataRunnable, updateIntervalMillis)\r\n            isHandlerRunning = true\r\n        }\r\n    }\r\n\r\n    // Handler 중지 메서드\r\n    private fun stopHandler() {\r\n        handler.removeCallbacks(updateDataRunnable)\r\n        isHandlerRunning = false\r\n    }\r\n\r\n    // 서버로부터 데이터를 가져오는 작업을 반복할 Runnable 객체\r\n    private val updateDataRunnable = object : Runnable {\r\n        override fun run() {\r\n            fetchDataFromServer()\r\n            handler.postDelayed(this, updateIntervalMillis) // 일정 간격 후 다시 호출\r\n        }\r\n    }\r\n\r\n    // Fragment의 뷰를 생성하는 메서드\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // 뷰를 생성하여 반환하는 코드\r\n        val view = inflater.inflate(R.layout.fragment_resume, container, false)\r\n\r\n        // Argument로부터 전달받은 사용자 ID를 변수에 저장\r\n        if (arguments != null) {\r\n            userId = arguments?.getString(\"userId\", \"\") ?: \"\"\r\n        }\r\n\r\n        // 사용자 ID를 표시할 TextView 초기화\r\n        val textID = view.findViewById<TextView>(R.id.tvID1)\r\n        textID.text = userId\r\n\r\n        // RecyclerView 초기화 후 빈 어댑터 설정\r\n        recyclerView = view.findViewById(R.id.recyclerviewResume)\r\n        recyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n\r\n        // 빈 어댑터 생성 및 RecyclerView에 설정\r\n        dataAdapter = DataAdapter(emptyList(), userId)\r\n        recyclerView.adapter = dataAdapter\r\n\r\n        // 작성중 이력서 개수와 작성완료 이력서 개수를 표시할 TextView 초기화\r\n        tvResume_temporary_count = view.findViewById(R.id.tvResume_temporary_count)\r\n        tvResume_complete_count = view.findViewById(R.id.tvResume_complete_count)\r\n\r\n        // 서버로 사용자 아이디를 전송하여 이력서 데이터를 가져오도록 요청\r\n        fetchDataFromServer()\r\n\r\n        // 이력서 추가 버튼 클릭 리스너 설정\r\n        buttonAddResume = view.findViewById<Button>(R.id.btnAddResume)\r\n        buttonAddResume.setOnClickListener {\r\n            val intent = Intent(requireContext(), ResumeWriteActivity::class.java)\r\n            intent.putExtra(\"userId\", userId)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 생성한 뷰 반환\r\n        return view\r\n    }\r\n\r\n    // Fragment의 뷰가 생성되었을 때 호출되는 메서드\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // 이력서 삭제 버튼 클릭 리스너 설정\r\n        dataAdapter.setOnDeleteClickListener(object : DataAdapter.OnDeleteClickListener {\r\n            override fun onDeleteClick(resumeData: ResumeData) {\r\n                // 서버에서 이력서 데이터 삭제 요청\r\n                deleteResumeFromServer(resumeData.resumeListNum)\r\n            }\r\n        })\r\n\r\n        // 사용자의 작성중 이력서 개수와 작성완료 이력서 개수를 업데이트\r\n        fetchDataFromServer()\r\n\r\n        // 일정 간격으로 서버에서 데이터를 가져오고 UI를 업데이트하는 작업 시작\r\n        handler.postDelayed(updateDataRunnable, updateIntervalMillis)\r\n\r\n        // 이력서 삭제 버튼 클릭 리스너 설정\r\n        setupDeleteButtonClickListener()\r\n    }\r\n\r\n\r\n\r\n    // 서버로부터 데이터를 가져오는 메서드\r\n    private fun fetchDataFromServer() {\r\n        // 서버로 사용자 아이디를 전송하여 이력서 데이터를 가져오도록 요청\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_fragment.php\"\r\n        val requestBody = FormBody.Builder()\r\n            .add(\"personal_id\", userId)\r\n            .build()\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .post(requestBody)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                // 서버로부터 응답을 받았을 때 호출되는 콜백 메서드\r\n                val responseData = response.body?.string()\r\n                Log.d(\"ServerResponse\", responseData ?: \"No response data\")\r\n                if (responseData != null) {\r\n                    try {\r\n                        // JSON 파싱을 위해 Gson 객체 생성\r\n                        val gson = Gson()\r\n\r\n                        // 서버 응답 데이터를 담는 컨테이너 클래스로 파싱\r\n                        val dataListContainer = gson.fromJson(responseData, DataListContainer::class.java)\r\n\r\n                        // UI 업데이트는 메인 스레드에서 실행되어야 함\r\n                        requireActivity().runOnUiThread {\r\n                            // 가져온 이력서 데이터 리스트를 어댑터에 설정하여 RecyclerView 업데이트\r\n                            val dataList = dataListContainer?.resumeList\r\n                            if (dataList != null) {\r\n                                dataAdapter.setData(dataList)\r\n\r\n                                // 이력서 개수 설정\r\n                                val cnt1 = dataListContainer.cnt1\r\n                                val cnt2 = dataListContainer.cnt2\r\n\r\n                                // cnt1, cnt2가 null이 아닌지 확인하여 텍스트뷰에 업데이트\r\n                                if (cnt1 != null && cnt2 != null) {\r\n                                    tvResume_temporary_count.text = cnt1.toString()\r\n                                    tvResume_complete_count.text = cnt2.toString()\r\n                                } else {\r\n                                    // cnt1 또는 cnt2가 null인 경우에 대한 처리를 여기에 추가\r\n                                    Toast.makeText(view?.context, \"이력서 개수를 가져오지 못했습니다.\", Toast.LENGTH_SHORT).show()\r\n                                }\r\n                            } else {\r\n                                // dataList가 null인 경우에 대한 처리를 여기에 추가\r\n                                Toast.makeText(view?.context, \"서버로부터 이력서 데이터를 가져오지 못했습니다.\", Toast.LENGTH_SHORT).show()\r\n                            }\r\n                        }\r\n                    } catch (e: JSONException) {\r\n                        // JSON 파싱 오류 발생한 경우\r\n                        Log.e(\"JSONParsingError\", \"Invalid JSON format: $responseData\")\r\n                    }\r\n                } else {\r\n                    // responseData가 null인 경우에 대한 처리를 여기에 추가\r\n                    Log.e(\"ServerResponse\", \"Response data is null\")\r\n                    Toast.makeText(view?.context, \"서버로부터 응답이 없습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 삭제 버튼 클릭 리스너 설정\r\n    private fun setupDeleteButtonClickListener() {\r\n        dataAdapter.setOnDeleteClickListener(object : DataAdapter.OnDeleteClickListener {\r\n            override fun onDeleteClick(resumeData: ResumeData) {\r\n                // 서버에서 이력서 데이터 삭제 요청\r\n                deleteResumeFromServer(resumeData.resumeListNum)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 서버로 이력서 삭제 요청\r\n    private fun deleteResumeFromServer(resumeListNum: Int?) {\r\n        // resumeListNum이 null인 경우에 대비하여 처리\r\n        if (resumeListNum == null) {\r\n            // null인 경우, 서버 요청을 보낼 수 없으므로 오류 처리\r\n            requireActivity().runOnUiThread {\r\n                Toast.makeText(view?.context, \"잘못된 이력서 번호입니다.\", Toast.LENGTH_SHORT).show()\r\n            }\r\n            return\r\n        }\r\n\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_delete.php\"\r\n        val requestBody = FormBody.Builder()\r\n            .add(\"personal_id\", userId)\r\n            .add(\"resume_listnum\", resumeListNum.toString())\r\n            .build()\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .post(requestBody)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                // 서버로부터 응답을 받았을 때 호출되는 콜백 메서드\r\n                val responseData = response.body?.string()\r\n                Log.d(\"DeleteResponse\", responseData ?: \"No response data\")\r\n                if (responseData != null && responseData.contains(\"Record deleted successfully\")) {\r\n                    // 삭제 성공\r\n                    requireActivity().runOnUiThread {\r\n                        // RecyclerView에서 아이템 삭제\r\n                        dataAdapter.removeDataByListNum(resumeListNum)\r\n                        // 작성중 이력서 개수와 작성완료 이력서 개수 업데이트\r\n                        fetchDataFromServer()\r\n                        // 삭제 성공 메시지 출력\r\n                        Toast.makeText(view?.context, \"이력서를 성공적으로 삭제했습니다.\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                } else {\r\n                    // 삭제 실패 또는 응답 데이터 오류\r\n                    requireActivity().runOnUiThread {\r\n                        Toast.makeText(view?.context, \"이력서를 삭제했습니다.\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n                requireActivity().runOnUiThread {\r\n                    Toast.makeText(view?.context, \"서버와 연결할 수 없습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 데이터 클래스\r\n    data class ResumeData(val resumeListNum: Int, val resumeTitle: String, val writeStatus: String)\r\n\r\n    // 이력서 데이터 리스트 컨테이너 클래스\r\n    data class DataListContainer(\r\n        val resumeList: List<ResumeData> = emptyList(),\r\n        val cnt1: Int = 0,\r\n        val cnt2: Int = 0\r\n    )\r\n\r\n    // 이력서 목록을 표시하는 어댑터 클래스\r\n    class DataAdapter(private var dataList: List<ResumeData>,\r\n                      private val userId: String\r\n    ) : RecyclerView.Adapter<DataAdapter.ViewHolder>() {\r\n\r\n        // 각각의 뷰를 보유하는 뷰홀더 클래스\r\n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n            val textViewTitle: Button = itemView.findViewById(R.id.tvResumeTitle)\r\n            val textViewStatus: TextView = itemView.findViewById(R.id.tvWriteStatus)\r\n            val buttonRemove: Button = itemView.findViewById(R.id.buttonRemove)\r\n            val buttonChange: Button = itemView.findViewById(R.id.buttonEdit)\r\n        }\r\n\r\n        // 뷰홀더 생성\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            val view = LayoutInflater.from(parent.context)\r\n                .inflate(R.layout.resume_item, parent, false)\r\n            return ViewHolder(view)\r\n        }\r\n\r\n        // 삭제 버튼 클릭 리스너 인터페이스\r\n        interface OnDeleteClickListener {\r\n            fun onDeleteClick(resumeData: ResumeData)\r\n        }\r\n\r\n        private var deleteClickListener: OnDeleteClickListener? = null\r\n\r\n        // 삭제 버튼 클릭 리스너 설정\r\n        fun setOnDeleteClickListener(listener: OnDeleteClickListener) {\r\n            deleteClickListener = listener\r\n        }\r\n\r\n        // 아이템 삭제 메서드\r\n        fun removeDataByListNum(resumeListNum: Int) {\r\n            val updatedList = dataList.toMutableList()\r\n            val position = updatedList.indexOfFirst { it.resumeListNum == resumeListNum }\r\n            if (position != -1) {\r\n                updatedList.removeAt(position)\r\n                dataList = updatedList\r\n                notifyItemRemoved(position)\r\n            }\r\n        }\r\n\r\n\r\n        // 뷰홀더의 뷰에 데이터를 바인딩\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n            val data = dataList[position]\r\n            holder.textViewTitle.setText(data.resumeTitle)\r\n            holder.textViewStatus.text = data.writeStatus\r\n\r\n            // 삭제 버튼 클릭 리스너 설정\r\n            holder.buttonRemove.setOnClickListener {\r\n                deleteClickListener?.onDeleteClick(data)\r\n            }\r\n\r\n            // 수정 버튼 클릭 리스너 설정\r\n            holder.buttonChange.setOnClickListener {\r\n                val intent = Intent(holder.itemView.context, ResumeChangeActivity::class.java)\r\n                intent.putExtra(\"resumeListNum\", data.resumeListNum)\r\n                intent.putExtra(\"userId\", userId)\r\n                holder.itemView.context.startActivity(intent)\r\n            }\r\n\r\n            // 이력서 제목 버튼 클릭 리스너 설정\r\n            holder.textViewTitle.setOnClickListener {\r\n                val intent = Intent(holder.itemView.context, ResumeClickActivity::class.java)\r\n                intent.putExtra(\"resumeListNum\", data.resumeListNum)\r\n                intent.putExtra(\"userId\", userId)\r\n                holder.itemView.context.startActivity(intent)\r\n            }\r\n        }\r\n\r\n        // 전체 아이템 개수 반환\r\n        override fun getItemCount(): Int {\r\n            return dataList.size\r\n        }\r\n\r\n        // 외부에서 데이터를 설정할 수 있도록 setData() 함수 추가\r\n        fun setData(newDataList: List<ResumeData>) {\r\n            dataList = newDataList\r\n            notifyDataSetChanged()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(date 1690551843009)
@@ -26,7 +26,7 @@
 
 class ResumeFragment : Fragment() {
     // 서버의 IP 주소를 저장할 변수
-    private var IP_ADDRESS = "3.34.48.60"
+    private var IP_ADDRESS = "3.34.136.178"
 
     // 사용자 ID를 저장할 변수
     private lateinit var userId: String
Index: app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.widget.ImageButton\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.TextView\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.IOException\r\n\r\nclass ResumeClickActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"3.34.48.60\" // Replace with your IP address.\r\n    private var userId: String = \"\" // User ID\r\n    private var resumeListNum: Int = -1\r\n    private lateinit var editResumeTitle: TextView\r\n    private lateinit var editTextAcademic: TextView\r\n    private lateinit var editTextCareer: TextView\r\n    private lateinit var editTextIntroduction: TextView\r\n    private lateinit var editTextCertificate: TextView\r\n    private lateinit var editTextEducation: TextView\r\n    private lateinit var editTextDesire: TextView\r\n\r\n    private lateinit var backButton_click: ImageButton\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_resume_click)\r\n\r\n        // Get user ID\r\n        resumeListNum = intent.getIntExtra(\"resumeListNum\", -1)\r\n        userId = intent.getStringExtra(\"userId\") ?: \"\"\r\n\r\n        val textID = findViewById<TextView>(R.id.tvClick_ID)\r\n        textID.text = userId\r\n\r\n        editTextAcademic = findViewById(R.id.edtClick_academic)\r\n        editResumeTitle = findViewById(R.id.edtClick_title)\r\n        editTextCareer = findViewById(R.id.edtClick_career)\r\n        editTextIntroduction = findViewById(R.id.edtClick_introduction)\r\n        editTextCertificate = findViewById(R.id.edtClick_certificate)\r\n        editTextEducation = findViewById(R.id.edtClick_education)\r\n        editTextDesire = findViewById(R.id.edtClick_desire)\r\n\r\n        backButton_click = findViewById(R.id.backButton_click)\r\n\r\n        // 이력서 아이템 데이터 불러오기\r\n        getResumeItemData(resumeListNum)\r\n\r\n        backButton_click.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    // 이력서 아이템 데이터 불러오기\r\n    private fun getResumeItemData(resumeListNum: Int) {\r\n        val url =\r\n            \"http://$IP_ADDRESS/android_resume_change.php?resume_listnum=$resumeListNum\" // 데이터를 불러올 PHP 스크립트의 주소\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .get() // GET 방식으로 요청 변경\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                // 이력서 아이템 데이터를 파싱하여 UI 업데이트\r\n                runOnUiThread {\r\n                    handleResumeItemData(responseData)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 이력서 아이템 데이터를 처리하는 함수 추가\r\n    private fun handleResumeItemData(responseData: String?) {\r\n        try {\r\n            val jsonObject = JSONObject(responseData) // JSONObject로 파싱\r\n\r\n            // 이력서 아이템 데이터가 존재하는 경우에만 UI 업데이트\r\n            if (jsonObject.length() > 0) {\r\n                // 여기서 이력서 아이템 데이터를 파싱하여 UI에 표시하는 작업을 수행하면 됩니다.\r\n                // 예를 들어, 다음과 같이 각 EditText에 데이터를 설정할 수 있습니다.\r\n                editResumeTitle.setText(jsonObject.optString(\"resumeTitle\", \"\"))\r\n                editTextAcademic.setText(jsonObject.optString(\"resumeAcademic\", \"\"))\r\n                editTextCareer.setText(jsonObject.optString(\"resumeCareer\", \"\"))\r\n                editTextIntroduction.setText(jsonObject.optString(\"resumeIntroduction\", \"\"))\r\n                editTextCertificate.setText(jsonObject.optString(\"resumeCertificate\", \"\"))\r\n                editTextEducation.setText(jsonObject.optString(\"resumeLearning\", \"\"))\r\n                editTextDesire.setText(jsonObject.optString(\"resumeDesire\", \"\"))\r\n            }\r\n        } catch (e: JSONException) {\r\n            // JSON 파싱 오류 처리\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt b/app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt
--- a/app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/java/com/example/a23_hf069/ResumeClickActivity.kt	(date 1690551843073)
@@ -10,7 +10,7 @@
 import java.io.IOException
 
 class ResumeClickActivity : AppCompatActivity() {
-    private var IP_ADDRESS = "3.34.48.60" // Replace with your IP address.
+    private var IP_ADDRESS = "3.34.136.178" // Replace with your IP address.
     private var userId: String = "" // User ID
     private var resumeListNum: Int = -1
     private lateinit var editResumeTitle: TextView
Index: app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport okhttp3.*\r\nimport java.io.IOException\r\n\r\nclass ResumeWriteActivity : AppCompatActivity() {\r\n    private var IP_ADDRESS = \"3.34.48.60\" // Replace with your IP address.\r\n    private var userId: String = \"\" // User ID\r\n    private lateinit var backButton: ImageButton\r\n    private lateinit var editResumeTitle: EditText\r\n    private lateinit var editTextAcademic: EditText\r\n    private lateinit var editTextCareer: EditText\r\n    private lateinit var editTextIntroduction: EditText\r\n    private lateinit var editTextCertificate: EditText\r\n    private lateinit var editTextEducation: EditText\r\n    private lateinit var editTextDesire: EditText\r\n    private lateinit var buttonSubmit_temporary: Button\r\n    private lateinit var buttonSubmit_complete: Button\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide()\r\n        setContentView(R.layout.activity_resume_write)\r\n\r\n// Get user ID\r\n        userId = intent.getStringExtra(\"userId\") ?: \"\"\r\n\r\n        val textID = findViewById<TextView>(R.id.tvWrite_ID)\r\n        textID.text = userId\r\n\r\n        backButton = findViewById(R.id.backButton_notice)\r\n        editTextAcademic = findViewById(R.id.edtWrite_academic)\r\n        editResumeTitle = findViewById(R.id.edtWrite_title)\r\n        editTextCareer = findViewById(R.id.edtWrite_career)\r\n        editTextIntroduction = findViewById(R.id.edtWrite_introduction)\r\n        editTextCertificate = findViewById(R.id.edtWrite_certificate)\r\n        editTextEducation = findViewById(R.id.edtWrite_education)\r\n        editTextDesire = findViewById(R.id.edtWrite_desire)\r\n        buttonSubmit_temporary = findViewById(R.id.buttonSubmit_temporary_write) // 임시 저장 버튼\r\n        buttonSubmit_complete = findViewById(R.id.buttonSubmit_complete_write) // 작성 완료 버튼\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n\r\n        buttonSubmit_temporary.setOnClickListener { // 임시 저장\r\n            val personal_id = userId\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 중\"\r\n\r\n            sendResumeData(\r\n                personal_id,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 임시저장되었습니다\", Toast.LENGTH_SHORT).show()\r\n\r\n            onBackPressed()\r\n        }\r\n\r\n        buttonSubmit_complete.setOnClickListener { // 작성완료\r\n            val personal_id = userId\r\n            val resume_title = editResumeTitle.text.toString()\r\n            val resume_academic = editTextAcademic.text.toString()\r\n            val resume_career = editTextCareer.text.toString()\r\n            val resume_introduction = editTextIntroduction.text.toString()\r\n            val resume_certificate = editTextCertificate.text.toString()\r\n            val resume_learning = editTextEducation.text.toString()\r\n            val resume_desire = editTextDesire.text.toString()\r\n            val resume_complete = \"작성 완료\"\r\n\r\n            sendResumeData(\r\n                personal_id,\r\n                resume_title,\r\n                resume_academic,\r\n                resume_career,\r\n                resume_introduction,\r\n                resume_certificate,\r\n                resume_learning,\r\n                resume_desire,\r\n                resume_complete\r\n            )\r\n\r\n            Toast.makeText(this, \"이력서가 작성완료되었습니다\", Toast.LENGTH_SHORT).show()\r\n\r\n            onBackPressed()\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        super.onBackPressed()\r\n    }\r\n\r\n\r\n    private fun sendResumeData(\r\n        personal_id: String,\r\n        resume_title: String,\r\n        resume_academic: String,\r\n        resume_career: String,\r\n        resume_introduction: String,\r\n        resume_certificate: String,\r\n        resume_learning: String,\r\n        resume_desire: String,\r\n        resume_complete: String\r\n    ) {\r\n        val url = \"http://$IP_ADDRESS/android_resume_write_php.php\" // URL of the hosting server with PHP script\r\n\r\n        val client = OkHttpClient()\r\n\r\n        val formBody = FormBody.Builder()\r\n            .add(\"personal_id\", personal_id) // ID\r\n            .add(\"resume_title\", resume_title) // Title\r\n            .add(\"resume_academic\", resume_academic) // Education\r\n            .add(\"resume_career\", resume_career) // Career\r\n            .add(\"resume_introduction\", resume_introduction) // Introduction\r\n            .add(\"resume_certificate\", resume_certificate) // Certification\r\n            .add(\"resume_learning\", resume_learning) // Education history\r\n            .add(\"resume_desire\", resume_desire) // Desired job position\r\n            .add(\"resume_complete\", resume_complete)\r\n            .build()\r\n\r\n        val request = Request.Builder()\r\n            .url(url)\r\n            .post(formBody)\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : okhttp3.Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n// Handle request failure\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n// Handle request success\r\n                val responseData = response.body?.string()\r\n            }\r\n        })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt b/app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt
--- a/app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt	(revision 20af94613ac9c996aad41d36e6d54cab61851e7e)
+++ b/app/src/main/java/com/example/a23_hf069/ResumeWriteActivity.kt	(date 1690551843034)
@@ -11,7 +11,7 @@
 import java.io.IOException
 
 class ResumeWriteActivity : AppCompatActivity() {
-    private var IP_ADDRESS = "3.34.48.60" // Replace with your IP address.
+    private var IP_ADDRESS = "3.34.136.178" // Replace with your IP address.
     private var userId: String = "" // User ID
     private lateinit var backButton: ImageButton
     private lateinit var editResumeTitle: EditText
