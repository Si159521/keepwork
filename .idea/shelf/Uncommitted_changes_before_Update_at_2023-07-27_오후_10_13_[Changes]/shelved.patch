Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,123 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
-+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689770913472)
-@@ -19,7 +19,7 @@
- 
- 
- class P_loginFragment : Fragment() { //개인로그인
--    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
-+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
- 
-     private var TAG = "phptest" // phptest log 찍으려는 용도
-     private lateinit var id_text_input_edit_text: EditText // id
-Index: app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.util.Xml\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ListView\r\nimport android.widget.Toast\r\nimport com.github.kittinunf.fuel.core.FuelManager\r\nimport com.github.kittinunf.fuel.core.extensions.authentication\r\nimport com.github.kittinunf.fuel.httpGet\r\nimport com.github.kittinunf.result.Result\r\nimport okhttp3.OkHttpClient\r\nimport org.json.JSONObject\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserException\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport org.w3c.dom.Document\r\nimport org.w3c.dom.Node\r\nimport org.w3c.dom.NodeList\r\nimport org.w3c.dom.Element\r\nimport javax.xml.parsers.DocumentBuilderFactory\r\n\r\nclass RegionFragment1 : Fragment() {\r\n\r\n    // API 인증키\r\n    val apiKey = \"WNLJYZLM2VZXTT2TZA9XR2VR1HK\"\r\n    val regionUrl = \"http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1\"\r\n\r\n    // 지역 대분류 리스트 (시/도)\r\n    private var superRegionList = mutableListOf<String>()\r\n    // 지역 중분류 리스트 (시/군/구)\r\n    private var middleRegionList = mutableListOf<String>()\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Fragment의 레이아웃 인플레이션\r\n        val rootView = inflater.inflate(R.layout.fragment_region, container, false)\r\n\r\n        // 지역 정보 리스트에 담기\r\n        fetchSRegionNames()\r\n        //fetchMRegionNames()\r\n\r\n        // ListView를 찾고, 어댑터 설정\r\n        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)\r\n        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)\r\n        listView1.adapter = adapter1\r\n        listView2.adapter = adapter2\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchSRegionNames() {\r\n        val params = listOf(\"returnType\" to \"XML\", \"target\" to \"CMCD\", \"authKey\" to apiKey, \"dtlGb\" to \"1\")\r\n\r\n        val request = Request.Builder()\r\n            .url(\"$regionUrl?${params.joinToString(\"&\")}\")\r\n            .get()\r\n            .header(\"Authorization\", \"Bearer $apiKey\")\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                println(e.message)\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (response.isSuccessful && responseData != null) {\r\n                    println(\"API 응답 데이터: $responseData\")\r\n                    try {\r\n                        val superRegionList = parseXmlResponse(responseData)\r\n                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김\r\n                        // TODO: 원하는 작업 수행\r\n                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리\r\n                        requireActivity().runOnUiThread {\r\n                            updateUIWithRegionData(superRegionList)\r\n                        }\r\n                    } catch (e: XmlPullParserException) {\r\n                        println(e.message)\r\n                    }\r\n                } else {\r\n                    println(\"서버 응답 실패: ${response.code}\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun parseXmlResponse(xmlData: String): List<String> {\r\n        superRegionList = mutableListOf<String>()\r\n        try {\r\n            val parser = Xml.newPullParser()\r\n            parser.setInput(StringReader(xmlData))\r\n\r\n            var eventType = parser.eventType\r\n            var currentRegionName: String? = null\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\") {\r\n                            currentRegionName = parser.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\" && currentRegionName != null) {\r\n                            superRegionList.add(currentRegionName)\r\n                            currentRegionName = null\r\n                        }\r\n                    }\r\n                }\r\n\r\n                eventType = parser.next()\r\n            }\r\n        } catch (e: XmlPullParserException) {\r\n            println(\"${e.message}\")\r\n        } catch (e: IOException) {\r\n            println(\"${e.message}\")\r\n        }\r\n\r\n        return superRegionList\r\n    }\r\n\r\n\r\n    private fun updateUIWithRegionData(superRegionList: List<String>) {\r\n        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        listView1.adapter = adapter1\r\n\r\n        // 시/도 버튼 클릭 시 이벤트 처리\r\n        listView1.setOnItemClickListener { _, _, position, _ ->\r\n            val item = superRegionList[position]\r\n            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가\r\n        }\r\n    }\r\n\r\n//    private fun fetchMRegionNames() {\r\n//        val workplaceUrl = \"http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do\"\r\n//        val params = listOf(\"returnType\" to \"JSON\", \"authKey\" to apiKey, \"callTp\" to \"L\")\r\n//\r\n//        FuelManager.instance.get(workplaceUrl, params)\r\n//            .authentication().bearer(apiKey)\r\n//            .responseString { _, _, result ->\r\n//                when (result) {\r\n//                    is Result.Success -> {\r\n//                        val responseData = result.get()\r\n//                        val jsonObject = JSONObject(responseData)\r\n//                        val workplaces = jsonObject.getJSONArray(\"dhsOpenEmpInfo\")\r\n//                        middleRegionList = mutableListOf<String>()\r\n//\r\n//                        for (i in 0 until workplaces.length()) {\r\n//                            val workplace = workplaces.getJSONObject(i)\r\n//                            //val workplaceName = workplace.getString(\"wkpl_nm\")\r\n//                            val jurisdictionLv2 = workplace.getString(\"wkpl_juris_lv2_nm\")\r\n//                            middleRegionList.add(\"$jurisdictionLv2\")\r\n//                        }\r\n//\r\n//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김\r\n//                        // TODO: 원하는 작업 수행\r\n//                    }\r\n//                    is Result.Failure -> {\r\n//                        println(\"근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.\")\r\n//                    }\r\n//                }\r\n//            }\r\n//    }\r\n\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
---- a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
-+++ b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(date 1689777993051)
-@@ -9,10 +9,6 @@
- import android.widget.ArrayAdapter
- import android.widget.ListView
- import android.widget.Toast
--import com.github.kittinunf.fuel.core.FuelManager
--import com.github.kittinunf.fuel.core.extensions.authentication
--import com.github.kittinunf.fuel.httpGet
--import com.github.kittinunf.result.Result
- import okhttp3.OkHttpClient
- import org.json.JSONObject
- import okhttp3.*
-Index: app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport okhttp3.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONException\r\nimport java.io.IOException\r\n\r\nclass ResumeFragment : Fragment() {\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n    private lateinit var userId: String // 사용자 아이디\r\n\r\n    private lateinit var buttonSubmit: Button\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var dataAdapter: DataAdapter\r\n    private val dataList: MutableList<Data> = mutableListOf()  // DB에서 가져온 데이터 리스트\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view = inflater.inflate(R.layout.fragment_resume, container, false)\r\n\r\n        // 사용자 아이디 받아오기\r\n        if (arguments != null) {\r\n            userId = arguments?.getString(\"userId\", \"\") ?: \"\"\r\n        }\r\n\r\n        val textID = view.findViewById<TextView>(R.id.tvID1)\r\n        textID.text = userId\r\n\r\n        // RecyclerView 초기화\r\n        recyclerView = view.findViewById(R.id.recyclerviewResume)\r\n        recyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n        dataAdapter = DataAdapter(dataList)\r\n        recyclerView.adapter = dataAdapter\r\n\r\n        // PHP 파일 URL\r\n        val phpUrl = \"http://$IP_ADDRESS/android_resume_php.php\"\r\n\r\n        // HTTP 요청 보내기\r\n        val request = Request.Builder()\r\n            .url(phpUrl)\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (responseData != null) {\r\n                    // 응답 데이터 처리\r\n                    handleResponseData(responseData)\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // 요청 실패 처리\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n\r\n        buttonSubmit = view.findViewById<Button>(R.id.buttonSubmit)\r\n        buttonSubmit.setOnClickListener {\r\n            val intent = Intent(requireContext(), ResumeWriteActivity::class.java)\r\n            intent.putExtra(\"userId\", userId)\r\n            startActivity(intent)\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    private fun handleResponseData(responseData: String) {\r\n        try {\r\n            // JSON 데이터 파싱\r\n            val jsonArray = JSONArray(responseData)\r\n            for (i in 0 until jsonArray.length()) {\r\n                val jsonObject = jsonArray.getJSONObject(i)\r\n                val resumeTitle = jsonObject.getString(\"resumeTitle\")\r\n                val writeStatus = jsonObject.getString(\"writeStatus\")\r\n                val data = Data(resumeTitle, writeStatus)\r\n                dataList.add(data)\r\n            }\r\n\r\n            // RecyclerView 갱신\r\n            dataAdapter.notifyDataSetChanged()\r\n        } catch (e: JSONException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n\r\ndata class Data(val resumeTitle: String, val writeStatus: String)\r\n\r\nclass DataAdapter(private val dataList: List<Data>) :\r\n    RecyclerView.Adapter<DataAdapter.ViewHolder>() {\r\n\r\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val textViewTitle: TextView = itemView.findViewById(R.id.tvResumeTitle)\r\n        val textViewStatus: TextView = itemView.findViewById(R.id.tvWriteStatus)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.resume_item, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val data = dataList[position]\r\n        holder.textViewTitle.text = data.resumeTitle\r\n        holder.textViewStatus.text = data.writeStatus\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return dataList.size\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
-+++ b/app/src/main/java/com/example/a23_hf069/ResumeFragment.kt	(date 1689778749490)
-@@ -13,12 +13,12 @@
- import okhttp3.*
- import org.json.JSONArray
- import org.json.JSONException
-+import org.json.JSONObject
- import java.io.IOException
- 
- class ResumeFragment : Fragment() {
--    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
-+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
-     private lateinit var userId: String // 사용자 아이디
--
-     private lateinit var buttonSubmit: Button
-     private lateinit var recyclerView: RecyclerView
-     private lateinit var dataAdapter: DataAdapter
-@@ -42,11 +42,15 @@
-         recyclerView.adapter = dataAdapter
- 
-         // PHP 파일 URL
--        val phpUrl = "http://$IP_ADDRESS/android_resume_php.php"
-+        val phpUrl = "http://$IP_ADDRESS/android_resume2.php"
- 
--        // HTTP 요청 보내기
-+        val requestBody = FormBody.Builder()
-+            .add("personal_id", userId)
-+            .build()
-+
-         val request = Request.Builder()
-             .url(phpUrl)
-+            .post(requestBody)
-             .build()
- 
-         val client = OkHttpClient()
-@@ -77,18 +81,32 @@
- 
-     private fun handleResponseData(responseData: String) {
-         try {
--            // JSON 데이터 파싱
--            val jsonArray = JSONArray(responseData)
--            for (i in 0 until jsonArray.length()) {
--                val jsonObject = jsonArray.getJSONObject(i)
--                val resumeTitle = jsonObject.getString("resumeTitle")
--                val writeStatus = jsonObject.getString("writeStatus")
-+            val jsonObject = JSONObject(responseData)
-+            // cnt1_result와 cnt2_result 값 추출
-+            val cnt1Result = jsonObject.getInt("cnt1_result")
-+            val cnt2Result = jsonObject.getInt("cnt2_result")
-+
-+            // UI 업데이트를 메인 스레드에서 수행
-+            requireActivity().runOnUiThread {
-+                val resumeTemCnt = requireView().findViewById<TextView>(R.id.textView_resume_temporary_count)
-+                val resumeComCnt = requireView().findViewById<TextView>(R.id.textView_resume_complete_count)
-+                resumeTemCnt.text = cnt1Result.toString()
-+                resumeComCnt.text = cnt2Result.toString()
-+            }
-+
-+            val dataArray = jsonObject.getJSONArray("data")
-+            for (i in 0 until dataArray.length()) {
-+                val dataObject = dataArray.getJSONObject(i)
-+                val resumeTitle = dataObject.getString("resume_title")
-+                val writeStatus = dataObject.getString("resume_complete")
-                 val data = Data(resumeTitle, writeStatus)
-                 dataList.add(data)
-             }
- 
-             // RecyclerView 갱신
--            dataAdapter.notifyDataSetChanged()
-+            requireActivity().runOnUiThread {
-+                dataAdapter.notifyDataSetChanged()
-+            }
-         } catch (e: JSONException) {
-             e.printStackTrace()
-         }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,1323 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass WantedFilteredFragment : Fragment() {\r\n    private lateinit var jobListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n    private var currentPage = 1\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)\r\n\r\n        // UI 요소 초기화\r\n        jobListView = view.findViewById(R.id.jobListView)\r\n        prevButton = view.findViewById(R.id.prevButton)\r\n        nextButton = view.findViewById(R.id.nextButton)\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobData()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobData()\r\n        }\r\n\r\n        // API 호출 후 필터링된 값 출력\r\n        fetchJobData()\r\n        //추가예정\r\n        \r\n        return view\r\n    }\r\n\r\n    private fun fetchJobData() {\r\n        val url =\r\n            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n        FetchJobData().execute(url)\r\n    }\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            jobList = result\r\n            showJobList()\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter2(requireActivity(), jobList)\r\n        jobListView.adapter = adapter\r\n\r\n        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity2.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\nclass CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :\r\n    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {\r\n\r\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view =\r\n            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)\r\n\r\n        val job = jobList[position]\r\n\r\n        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n\r\n        titleTextView.text = job.title\r\n        companyTextView.text = job.company\r\n        regionContTextView.text = job.region\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nclass JobDetailActivity2 : AppCompatActivity() {\r\n    private lateinit var backButton: ImageView\r\n    private lateinit var company: TextView // 회사명\r\n    private lateinit var title: TextView // 제목\r\n    private lateinit var salTpNm: TextView // 임금형태\r\n    private lateinit var sal: TextView // 급여\r\n    private lateinit var region: TextView // 근무지역\r\n    private lateinit var holidayTpNm: TextView // 근무형태\r\n    private lateinit var minEdubg: TextView // 최소학력\r\n    private lateinit var career: TextView // 경력\r\n    private lateinit var closeDt: TextView // 마감일자\r\n    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n    private lateinit var jobsCd: TextView // 직종코드\r\n\r\n    companion object {\r\n        private const val JOB_EXTRA = \"job\"\r\n\r\n        fun newIntent(context2: Context, job: Job): Intent {\r\n            return Intent(context2, JobDetailActivity2::class.java).apply {\r\n                putExtra(JOB_EXTRA, job)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_job_detail)\r\n\r\n        // 기본 툴바 숨기기\r\n        supportActionBar?.hide()\r\n\r\n        backButton = findViewById(R.id.backButton)\r\n        company = findViewById(R.id.company)\r\n        title = findViewById(R.id.title)\r\n        salTpNm = findViewById(R.id.salTpNm)\r\n        sal = findViewById(R.id.sal)\r\n        region = findViewById(R.id.region)\r\n        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n        minEdubg = findViewById(R.id.minEdubg)\r\n        career = findViewById(R.id.career)\r\n        closeDt = findViewById(R.id.closeDt)\r\n        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n        jobsCd = findViewById(R.id.jobsCd)\r\n\r\n        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n\r\n        company.text = job?.company\r\n        title.text = job?.title\r\n        salTpNm.text = job?.salTpNm\r\n        sal.text = job?.sal\r\n        region.text = job?.region\r\n        holidayTpNm.text = job?.holidayTpNm\r\n        minEdubg.text = job?.minEdubg\r\n        career.text = job?.career\r\n        closeDt.text = job?.closeDt\r\n        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n        jobsCd.text = job?.jobsCd\r\n\r\n        backButton.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(date 1689769772000)
-@@ -1,261 +1,261 @@
--package com.example.a23_hf069
--
--import android.content.Context
--import android.content.Intent
--import android.os.AsyncTask
--import android.os.Bundle
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.*
--import androidx.appcompat.app.AppCompatActivity
--import androidx.fragment.app.Fragment
--import org.xmlpull.v1.XmlPullParser
--import org.xmlpull.v1.XmlPullParserFactory
--import java.io.InputStream
--import java.net.HttpURLConnection
--import java.net.URL
--
--class WantedFilteredFragment : Fragment() {
--    private lateinit var jobListView: ListView
--    private lateinit var jobList: List<Job>
--    private lateinit var prevButton: Button
--    private lateinit var nextButton: Button
--    private var currentPage = 1
--
--    override fun onCreateView(
--        inflater: LayoutInflater,
--        container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View? {
--        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
--
--        // UI 요소 초기화
--        jobListView = view.findViewById(R.id.jobListView)
--        prevButton = view.findViewById(R.id.prevButton)
--        nextButton = view.findViewById(R.id.nextButton)
--
--        // 이전 페이지 버튼 클릭 이벤트 처리
--        prevButton.setOnClickListener {
--            if (currentPage > 1) {
--                currentPage -= 1
--                fetchJobData()
--            }
--        }
--
--        // 다음 페이지 버튼 클릭 이벤트 처리
--        nextButton.setOnClickListener {
--            currentPage += 1
--            fetchJobData()
--        }
--
--        // API 호출 후 필터링된 값 출력
--        fetchJobData()
--        //추가예정
--        
--        return view
--    }
--
--    private fun fetchJobData() {
--        val url =
--            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
--        FetchJobData().execute(url)
--    }
--
--    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
--        override fun doInBackground(vararg urls: String): List<Job> {
--            val urlString = urls[0]
--            var result: List<Job> = emptyList()
--            var connection: HttpURLConnection? = null
--
--            try {
--                val url = URL(urlString)
--                connection = url.openConnection() as HttpURLConnection
--                connection.requestMethod = "GET"
--                connection.readTimeout = 15 * 1000
--                connection.connectTimeout = 15 * 1000
--
--                val responseCode = connection.responseCode
--                if (responseCode == HttpURLConnection.HTTP_OK) {
--                    val inputStream = connection.inputStream
--                    result = parseXml(inputStream)
--                }
--            } catch (e: Exception) {
--                e.printStackTrace()
--            } finally {
--                connection?.disconnect()
--            }
--
--            return result
--        }
--
--        private fun parseXml(inputStream: InputStream): List<Job> {
--            val jobList = mutableListOf<Job>()
--            val factory = XmlPullParserFactory.newInstance()
--            val xpp = factory.newPullParser()
--            xpp.setInput(inputStream, null)
--
--            var eventType = xpp.eventType
--            var company: String? = null // 회사명
--            var title: String? = null // 채용제목
--            var salTpNm: String? = null // 임금형태
--            var sal: String? = null // 급여
--            var region: String? = null // 근무지역
--            var holidayTpNm: String? = null // 근무형태
--            var minEdubg: String? = null // 최소학력
--            var career: String? = null // 경력
--            var closeDt: String? = null // 마감일자
--            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
--            var jobsCd: String? = null // 직종코드
--
--            while (eventType != XmlPullParser.END_DOCUMENT) {
--                when (eventType) {
--                    XmlPullParser.START_TAG -> {
--                        when (xpp.name) {
--                            "company" -> company = xpp.nextText()
--                            "title" -> title = xpp.nextText()
--                            "salTpNm" -> salTpNm = xpp.nextText()
--                            "sal" -> sal = xpp.nextText()
--                            "region" -> region = xpp.nextText()
--                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
--                            "minEdubg" -> minEdubg = xpp.nextText()
--                            "career" -> career = xpp.nextText()
--                            "closeDt" -> closeDt = xpp.nextText()
--                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
--                            "jobsCd" -> jobsCd = xpp.nextText()
--                        }
--                    }
--                    XmlPullParser.END_TAG -> {
--                        if (xpp.name == "wanted") {
--                            company?.let { c ->
--                                title?.let { t ->
--                                    jobList.add(
--                                        Job(
--                                            c, t, salTpNm, sal, region, holidayTpNm,
--                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
--                                        )
--                                    )
--                                }
--                            }
--                            company = null
--                            title = null
--                            salTpNm = null
--                            sal = null
--                            region = null
--                            holidayTpNm = null
--                            minEdubg = null
--                            career = null
--                            closeDt = null
--                            wantedMobileInfoUrl = null
--                            jobsCd = null
--                        }
--                    }
--                }
--                eventType = xpp.next()
--            }
--
--            return jobList
--        }
--
--        override fun onPostExecute(result: List<Job>) {
--            jobList = result
--            showJobList()
--        }
--    }
--
--    private fun showJobList() {
--        val adapter = CustomAdapter2(requireActivity(), jobList)
--        jobListView.adapter = adapter
--
--        jobListView.setOnItemClickListener { _, _, position, _ ->
--            val job = jobList[position]
--            val intent = JobDetailActivity2.newIntent(requireContext(), job)
--            startActivity(intent)
--        }
--    }
--}
--
--class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
--    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
--
--    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
--        val view =
--            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
--
--        val job = jobList[position]
--
--        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
--        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
--        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
--
--        titleTextView.text = job.title
--        companyTextView.text = job.company
--        regionContTextView.text = job.region
--
--        return view
--    }
--}
--
--class JobDetailActivity2 : AppCompatActivity() {
--    private lateinit var backButton: ImageView
--    private lateinit var company: TextView // 회사명
--    private lateinit var title: TextView // 제목
--    private lateinit var salTpNm: TextView // 임금형태
--    private lateinit var sal: TextView // 급여
--    private lateinit var region: TextView // 근무지역
--    private lateinit var holidayTpNm: TextView // 근무형태
--    private lateinit var minEdubg: TextView // 최소학력
--    private lateinit var career: TextView // 경력
--    private lateinit var closeDt: TextView // 마감일자
--    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
--    private lateinit var jobsCd: TextView // 직종코드
--
--    companion object {
--        private const val JOB_EXTRA = "job"
--
--        fun newIntent(context2: Context, job: Job): Intent {
--            return Intent(context2, JobDetailActivity2::class.java).apply {
--                putExtra(JOB_EXTRA, job)
--            }
--        }
--    }
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        setContentView(R.layout.activity_job_detail)
--
--        // 기본 툴바 숨기기
--        supportActionBar?.hide()
--
--        backButton = findViewById(R.id.backButton)
--        company = findViewById(R.id.company)
--        title = findViewById(R.id.title)
--        salTpNm = findViewById(R.id.salTpNm)
--        sal = findViewById(R.id.sal)
--        region = findViewById(R.id.region)
--        holidayTpNm = findViewById(R.id.holidayTpNm)
--        minEdubg = findViewById(R.id.minEdubg)
--        career = findViewById(R.id.career)
--        closeDt = findViewById(R.id.closeDt)
--        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
--        jobsCd = findViewById(R.id.jobsCd)
--
--        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
--
--        company.text = job?.company
--        title.text = job?.title
--        salTpNm.text = job?.salTpNm
--        sal.text = job?.sal
--        region.text = job?.region
--        holidayTpNm.text = job?.holidayTpNm
--        minEdubg.text = job?.minEdubg
--        career.text = job?.career
--        closeDt.text = job?.closeDt
--        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
--        jobsCd.text = job?.jobsCd
--
--        backButton.setOnClickListener {
--            onBackPressed()
--        }
--    }
--}
-\ No newline at end of file
-+//package com.example.a23_hf069
-+//
-+//import android.content.Context
-+//import android.content.Intent
-+//import android.os.AsyncTask
-+//import android.os.Bundle
-+//import android.view.LayoutInflater
-+//import android.view.View
-+//import android.view.ViewGroup
-+//import android.widget.*
-+//import androidx.appcompat.app.AppCompatActivity
-+//import androidx.fragment.app.Fragment
-+//import org.xmlpull.v1.XmlPullParser
-+//import org.xmlpull.v1.XmlPullParserFactory
-+//import java.io.InputStream
-+//import java.net.HttpURLConnection
-+//import java.net.URL
-+//
-+//class WantedFilteredFragment : Fragment() {
-+//    private lateinit var jobListView: ListView
-+//    private lateinit var jobList: List<Job>
-+//    private lateinit var prevButton: Button
-+//    private lateinit var nextButton: Button
-+//    private var currentPage = 1
-+//
-+//    override fun onCreateView(
-+//        inflater: LayoutInflater,
-+//        container: ViewGroup?,
-+//        savedInstanceState: Bundle?
-+//    ): View? {
-+//        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
-+//
-+//        // UI 요소 초기화
-+//        jobListView = view.findViewById(R.id.jobListView)
-+//        prevButton = view.findViewById(R.id.prevButton)
-+//        nextButton = view.findViewById(R.id.nextButton)
-+//
-+//        // 이전 페이지 버튼 클릭 이벤트 처리
-+//        prevButton.setOnClickListener {
-+//            if (currentPage > 1) {
-+//                currentPage -= 1
-+//                fetchJobData()
-+//            }
-+//        }
-+//
-+//        // 다음 페이지 버튼 클릭 이벤트 처리
-+//        nextButton.setOnClickListener {
-+//            currentPage += 1
-+//            fetchJobData()
-+//        }
-+//
-+//        // API 호출 후 필터링된 값 출력
-+//        fetchJobData()
-+//        //추가예정
-+//
-+//        return view
-+//    }
-+//
-+//    private fun fetchJobData() {
-+//        val url =
-+//            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
-+//        FetchJobData().execute(url)
-+//    }
-+//
-+//    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
-+//        override fun doInBackground(vararg urls: String): List<Job> {
-+//            val urlString = urls[0]
-+//            var result: List<Job> = emptyList()
-+//            var connection: HttpURLConnection? = null
-+//
-+//            try {
-+//                val url = URL(urlString)
-+//                connection = url.openConnection() as HttpURLConnection
-+//                connection.requestMethod = "GET"
-+//                connection.readTimeout = 15 * 1000
-+//                connection.connectTimeout = 15 * 1000
-+//
-+//                val responseCode = connection.responseCode
-+//                if (responseCode == HttpURLConnection.HTTP_OK) {
-+//                    val inputStream = connection.inputStream
-+//                    result = parseXml(inputStream)
-+//                }
-+//            } catch (e: Exception) {
-+//                e.printStackTrace()
-+//            } finally {
-+//                connection?.disconnect()
-+//            }
-+//
-+//            return result
-+//        }
-+//
-+//        private fun parseXml(inputStream: InputStream): List<Job> {
-+//            val jobList = mutableListOf<Job>()
-+//            val factory = XmlPullParserFactory.newInstance()
-+//            val xpp = factory.newPullParser()
-+//            xpp.setInput(inputStream, null)
-+//
-+//            var eventType = xpp.eventType
-+//            var company: String? = null // 회사명
-+//            var title: String? = null // 채용제목
-+//            var salTpNm: String? = null // 임금형태
-+//            var sal: String? = null // 급여
-+//            var region: String? = null // 근무지역
-+//            var holidayTpNm: String? = null // 근무형태
-+//            var minEdubg: String? = null // 최소학력
-+//            var career: String? = null // 경력
-+//            var closeDt: String? = null // 마감일자
-+//            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
-+//            var jobsCd: String? = null // 직종코드
-+//
-+//            while (eventType != XmlPullParser.END_DOCUMENT) {
-+//                when (eventType) {
-+//                    XmlPullParser.START_TAG -> {
-+//                        when (xpp.name) {
-+//                            "company" -> company = xpp.nextText()
-+//                            "title" -> title = xpp.nextText()
-+//                            "salTpNm" -> salTpNm = xpp.nextText()
-+//                            "sal" -> sal = xpp.nextText()
-+//                            "region" -> region = xpp.nextText()
-+//                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
-+//                            "minEdubg" -> minEdubg = xpp.nextText()
-+//                            "career" -> career = xpp.nextText()
-+//                            "closeDt" -> closeDt = xpp.nextText()
-+//                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
-+//                            "jobsCd" -> jobsCd = xpp.nextText()
-+//                        }
-+//                    }
-+//                    XmlPullParser.END_TAG -> {
-+//                        if (xpp.name == "wanted") {
-+//                            company?.let { c ->
-+//                                title?.let { t ->
-+//                                    jobList.add(
-+//                                        Job(
-+//                                            c, t, salTpNm, sal, region, holidayTpNm,
-+//                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
-+//                                        )
-+//                                    )
-+//                                }
-+//                            }
-+//                            company = null
-+//                            title = null
-+//                            salTpNm = null
-+//                            sal = null
-+//                            region = null
-+//                            holidayTpNm = null
-+//                            minEdubg = null
-+//                            career = null
-+//                            closeDt = null
-+//                            wantedMobileInfoUrl = null
-+//                            jobsCd = null
-+//                        }
-+//                    }
-+//                }
-+//                eventType = xpp.next()
-+//            }
-+//
-+//            return jobList
-+//        }
-+//
-+//        override fun onPostExecute(result: List<Job>) {
-+//            jobList = result
-+//            showJobList()
-+//        }
-+//    }
-+//
-+//    private fun showJobList() {
-+//        val adapter = CustomAdapter2(requireActivity(), jobList)
-+//        jobListView.adapter = adapter
-+//
-+//        jobListView.setOnItemClickListener { _, _, position, _ ->
-+//            val job = jobList[position]
-+//            val intent = JobDetailActivity2.newIntent(requireContext(), job)
-+//            startActivity(intent)
-+//        }
-+//    }
-+//}
-+//
-+//class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
-+//    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
-+//
-+//    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
-+//        val view =
-+//            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
-+//
-+//        val job = jobList[position]
-+//
-+//        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
-+//        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
-+//        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
-+//
-+//        titleTextView.text = job.title
-+//        companyTextView.text = job.company
-+//        regionContTextView.text = job.region
-+//
-+//        return view
-+//    }
-+//}
-+//
-+//class JobDetailActivity2 : AppCompatActivity() {
-+//    private lateinit var backButton: ImageView
-+//    private lateinit var company: TextView // 회사명
-+//    private lateinit var title: TextView // 제목
-+//    private lateinit var salTpNm: TextView // 임금형태
-+//    private lateinit var sal: TextView // 급여
-+//    private lateinit var region: TextView // 근무지역
-+//    private lateinit var holidayTpNm: TextView // 근무형태
-+//    private lateinit var minEdubg: TextView // 최소학력
-+//    private lateinit var career: TextView // 경력
-+//    private lateinit var closeDt: TextView // 마감일자
-+//    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
-+//    private lateinit var jobsCd: TextView // 직종코드
-+//
-+//    companion object {
-+//        private const val JOB_EXTRA = "job"
-+//
-+//        fun newIntent(context2: Context, job: Job): Intent {
-+//            return Intent(context2, JobDetailActivity2::class.java).apply {
-+//                putExtra(JOB_EXTRA, job)
-+//            }
-+//        }
-+//    }
-+//
-+//    override fun onCreate(savedInstanceState: Bundle?) {
-+//        super.onCreate(savedInstanceState)
-+//        setContentView(R.layout.activity_job_detail)
-+//
-+//        // 기본 툴바 숨기기
-+//        supportActionBar?.hide()
-+//
-+//        backButton = findViewById(R.id.backButton)
-+//        company = findViewById(R.id.company)
-+//        title = findViewById(R.id.title)
-+//        salTpNm = findViewById(R.id.salTpNm)
-+//        sal = findViewById(R.id.sal)
-+//        region = findViewById(R.id.region)
-+//        holidayTpNm = findViewById(R.id.holidayTpNm)
-+//        minEdubg = findViewById(R.id.minEdubg)
-+//        career = findViewById(R.id.career)
-+//        closeDt = findViewById(R.id.closeDt)
-+//        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
-+//        jobsCd = findViewById(R.id.jobsCd)
-+//
-+//        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
-+//
-+//        company.text = job?.company
-+//        title.text = job?.title
-+//        salTpNm.text = job?.salTpNm
-+//        sal.text = job?.sal
-+//        region.text = job?.region
-+//        holidayTpNm.text = job?.holidayTpNm
-+//        minEdubg.text = job?.minEdubg
-+//        career.text = job?.career
-+//        closeDt.text = job?.closeDt
-+//        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
-+//        jobsCd.text = job?.jobsCd
-+//
-+//        backButton.setOnClickListener {
-+//            onBackPressed()
-+//        }
-+//    }
-+//}
-\ No newline at end of file
-Index: app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.util.Xml\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ListView\r\nimport android.widget.Toast\r\nimport com.github.kittinunf.fuel.core.FuelManager\r\nimport com.github.kittinunf.fuel.core.extensions.authentication\r\nimport com.github.kittinunf.fuel.httpGet\r\nimport com.github.kittinunf.result.Result\r\nimport okhttp3.OkHttpClient\r\nimport org.json.JSONObject\r\nimport okhttp3.*\r\nimport org.json.JSONException\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserException\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport org.w3c.dom.Document\r\nimport org.w3c.dom.Node\r\nimport org.w3c.dom.NodeList\r\nimport org.w3c.dom.Element\r\nimport javax.xml.parsers.DocumentBuilderFactory\r\n\r\nclass RegionFragment1 : Fragment() {\r\n\r\n    // API 인증키\r\n    val apiKey = \"WNLJYZLM2VZXTT2TZA9XR2VR1HK\"\r\n    val regionUrl = \"http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1\"\r\n\r\n    // 지역 대분류 리스트 (시/도)\r\n    private var superRegionList = mutableListOf<String>()\r\n    // 지역 중분류 리스트 (시/군/구)\r\n    private var middleRegionList = mutableListOf<String>()\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Fragment의 레이아웃 인플레이션\r\n        val rootView = inflater.inflate(R.layout.fragment_region, container, false)\r\n\r\n        // 지역 정보 리스트에 담기\r\n        fetchSRegionNames()\r\n        //fetchMRegionNames()\r\n\r\n        // ListView를 찾고, 어댑터 설정\r\n        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)\r\n        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)\r\n        listView1.adapter = adapter1\r\n        listView2.adapter = adapter2\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchSRegionNames() {\r\n        val params = listOf(\"returnType\" to \"XML\", \"target\" to \"CMCD\", \"authKey\" to apiKey, \"dtlGb\" to \"1\")\r\n\r\n        val request = Request.Builder()\r\n            .url(\"$regionUrl?${params.joinToString(\"&\")}\")\r\n            .get()\r\n            .header(\"Authorization\", \"Bearer $apiKey\")\r\n            .build()\r\n\r\n        val client = OkHttpClient()\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                println(e.message)\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                val responseData = response.body?.string()\r\n                if (response.isSuccessful && responseData != null) {\r\n                    println(\"API 응답 데이터: $responseData\")\r\n                    try {\r\n                        val superRegionList = parseXmlResponse(responseData)\r\n                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김\r\n                        // TODO: 원하는 작업 수행\r\n                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리\r\n                        requireActivity().runOnUiThread {\r\n                            updateUIWithRegionData(superRegionList)\r\n                        }\r\n                    } catch (e: XmlPullParserException) {\r\n                        println(e.message)\r\n                    }\r\n                } else {\r\n                    println(\"서버 응답 실패: ${response.code}\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun parseXmlResponse(xmlData: String): List<String> {\r\n        superRegionList = mutableListOf<String>()\r\n        try {\r\n            val parser = Xml.newPullParser()\r\n            parser.setInput(StringReader(xmlData))\r\n\r\n            var eventType = parser.eventType\r\n            var currentRegionName: String? = null\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\") {\r\n                            currentRegionName = parser.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        val tagName = parser.name\r\n\r\n                        if (tagName == \"regionNm\" && currentRegionName != null) {\r\n                            superRegionList.add(currentRegionName)\r\n                            currentRegionName = null\r\n                        }\r\n                    }\r\n                }\r\n\r\n                eventType = parser.next()\r\n            }\r\n        } catch (e: XmlPullParserException) {\r\n            println(\"${e.message}\")\r\n        } catch (e: IOException) {\r\n            println(\"${e.message}\")\r\n        }\r\n\r\n        return superRegionList\r\n    }\r\n\r\n\r\n    private fun updateUIWithRegionData(superRegionList: List<String>) {\r\n        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)\r\n        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)\r\n        listView1.adapter = adapter1\r\n\r\n        // 시/도 버튼 클릭 시 이벤트 처리\r\n        listView1.setOnItemClickListener { _, _, position, _ ->\r\n            val item = superRegionList[position]\r\n            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가\r\n        }\r\n    }\r\n\r\n//    private fun fetchMRegionNames() {\r\n//        val workplaceUrl = \"http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do\"\r\n//        val params = listOf(\"returnType\" to \"JSON\", \"authKey\" to apiKey, \"callTp\" to \"L\")\r\n//\r\n//        FuelManager.instance.get(workplaceUrl, params)\r\n//            .authentication().bearer(apiKey)\r\n//            .responseString { _, _, result ->\r\n//                when (result) {\r\n//                    is Result.Success -> {\r\n//                        val responseData = result.get()\r\n//                        val jsonObject = JSONObject(responseData)\r\n//                        val workplaces = jsonObject.getJSONArray(\"dhsOpenEmpInfo\")\r\n//                        middleRegionList = mutableListOf<String>()\r\n//\r\n//                        for (i in 0 until workplaces.length()) {\r\n//                            val workplace = workplaces.getJSONObject(i)\r\n//                            //val workplaceName = workplace.getString(\"wkpl_nm\")\r\n//                            val jurisdictionLv2 = workplace.getString(\"wkpl_juris_lv2_nm\")\r\n//                            middleRegionList.add(\"$jurisdictionLv2\")\r\n//                        }\r\n//\r\n//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김\r\n//                        // TODO: 원하는 작업 수행\r\n//                    }\r\n//                    is Result.Failure -> {\r\n//                        println(\"근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.\")\r\n//                    }\r\n//                }\r\n//            }\r\n//    }\r\n\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt
---- a/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/RegionFragment1.kt	(date 1689769910000)
-@@ -1,187 +1,187 @@
--package com.example.a23_hf069
--
--import android.os.Bundle
--import android.util.Xml
--import androidx.fragment.app.Fragment
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.ArrayAdapter
--import android.widget.ListView
--import android.widget.Toast
--import com.github.kittinunf.fuel.core.FuelManager
--import com.github.kittinunf.fuel.core.extensions.authentication
--import com.github.kittinunf.fuel.httpGet
--import com.github.kittinunf.result.Result
--import okhttp3.OkHttpClient
--import org.json.JSONObject
--import okhttp3.*
--import org.json.JSONException
--import org.xmlpull.v1.XmlPullParser
--import org.xmlpull.v1.XmlPullParserException
--import java.io.IOException
--import java.io.StringReader
--import androidx.appcompat.app.AppCompatActivity
--import android.util.Log
--import android.widget.Button
--import org.w3c.dom.Document
--import org.w3c.dom.Node
--import org.w3c.dom.NodeList
--import org.w3c.dom.Element
--import javax.xml.parsers.DocumentBuilderFactory
--
--class RegionFragment1 : Fragment() {
--
--    // API 인증키
--    val apiKey = "WNLJYZLM2VZXTT2TZA9XR2VR1HK"
--    val regionUrl = "http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1"
--
--    // 지역 대분류 리스트 (시/도)
--    private var superRegionList = mutableListOf<String>()
--    // 지역 중분류 리스트 (시/군/구)
--    private var middleRegionList = mutableListOf<String>()
--    override fun onCreateView(
--        inflater: LayoutInflater, container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View? {
--        // Fragment의 레이아웃 인플레이션
--        val rootView = inflater.inflate(R.layout.fragment_region, container, false)
--
--        // 지역 정보 리스트에 담기
--        fetchSRegionNames()
--        //fetchMRegionNames()
--
--        // ListView를 찾고, 어댑터 설정
--        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)
--        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)
--        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
--        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)
--        listView1.adapter = adapter1
--        listView2.adapter = adapter2
--
--
--        return rootView
--    }
--
--    private fun fetchSRegionNames() {
--        val params = listOf("returnType" to "XML", "target" to "CMCD", "authKey" to apiKey, "dtlGb" to "1")
--
--        val request = Request.Builder()
--            .url("$regionUrl?${params.joinToString("&")}")
--            .get()
--            .header("Authorization", "Bearer $apiKey")
--            .build()
--
--        val client = OkHttpClient()
--        client.newCall(request).enqueue(object : Callback {
--            override fun onFailure(call: Call, e: IOException) {
--                println(e.message)
--            }
--
--            override fun onResponse(call: Call, response: Response) {
--                val responseData = response.body?.string()
--                if (response.isSuccessful && responseData != null) {
--                    println("API 응답 데이터: $responseData")
--                    try {
--                        val superRegionList = parseXmlResponse(responseData)
--                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김
--                        // TODO: 원하는 작업 수행
--                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리
--                        requireActivity().runOnUiThread {
--                            updateUIWithRegionData(superRegionList)
--                        }
--                    } catch (e: XmlPullParserException) {
--                        println(e.message)
--                    }
--                } else {
--                    println("서버 응답 실패: ${response.code}")
--                }
--            }
--        })
--    }
--
--    private fun parseXmlResponse(xmlData: String): List<String> {
--        superRegionList = mutableListOf<String>()
--        try {
--            val parser = Xml.newPullParser()
--            parser.setInput(StringReader(xmlData))
--
--            var eventType = parser.eventType
--            var currentRegionName: String? = null
--
--            while (eventType != XmlPullParser.END_DOCUMENT) {
--                when (eventType) {
--                    XmlPullParser.START_TAG -> {
--                        val tagName = parser.name
--
--                        if (tagName == "regionNm") {
--                            currentRegionName = parser.nextText()
--                        }
--                    }
--                    XmlPullParser.END_TAG -> {
--                        val tagName = parser.name
--
--                        if (tagName == "regionNm" && currentRegionName != null) {
--                            superRegionList.add(currentRegionName)
--                            currentRegionName = null
--                        }
--                    }
--                }
--
--                eventType = parser.next()
--            }
--        } catch (e: XmlPullParserException) {
--            println("${e.message}")
--        } catch (e: IOException) {
--            println("${e.message}")
--        }
--
--        return superRegionList
--    }
--
--
--    private fun updateUIWithRegionData(superRegionList: List<String>) {
--        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)
--        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
--        listView1.adapter = adapter1
--
--        // 시/도 버튼 클릭 시 이벤트 처리
--        listView1.setOnItemClickListener { _, _, position, _ ->
--            val item = superRegionList[position]
--            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가
--        }
--    }
--
--//    private fun fetchMRegionNames() {
--//        val workplaceUrl = "http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do"
--//        val params = listOf("returnType" to "JSON", "authKey" to apiKey, "callTp" to "L")
-+//package com.example.a23_hf069
-+//
-+//import android.os.Bundle
-+//import android.util.Xml
-+//import androidx.fragment.app.Fragment
-+//import android.view.LayoutInflater
-+//import android.view.View
-+//import android.view.ViewGroup
-+//import android.widget.ArrayAdapter
-+//import android.widget.ListView
-+//import android.widget.Toast
-+//import com.github.kittinunf.fuel.core.FuelManager
-+//import com.github.kittinunf.fuel.core.extensions.authentication
-+//import com.github.kittinunf.fuel.httpGet
-+//import com.github.kittinunf.result.Result
-+//import okhttp3.OkHttpClient
-+//import org.json.JSONObject
-+//import okhttp3.*
-+//import org.json.JSONException
-+//import org.xmlpull.v1.XmlPullParser
-+//import org.xmlpull.v1.XmlPullParserException
-+//import java.io.IOException
-+//import java.io.StringReader
-+//import androidx.appcompat.app.AppCompatActivity
-+//import android.util.Log
-+//import android.widget.Button
-+//import org.w3c.dom.Document
-+//import org.w3c.dom.Node
-+//import org.w3c.dom.NodeList
-+//import org.w3c.dom.Element
-+//import javax.xml.parsers.DocumentBuilderFactory
-+//
-+//class RegionFragment1 : Fragment() {
-+//
-+//    // API 인증키
-+//    val apiKey = "WNLJYZLM2VZXTT2TZA9XR2VR1HK"
-+//    val regionUrl = "http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1"
-+//
-+//    // 지역 대분류 리스트 (시/도)
-+//    private var superRegionList = mutableListOf<String>()
-+//    // 지역 중분류 리스트 (시/군/구)
-+//    private var middleRegionList = mutableListOf<String>()
-+//    override fun onCreateView(
-+//        inflater: LayoutInflater, container: ViewGroup?,
-+//        savedInstanceState: Bundle?
-+//    ): View? {
-+//        // Fragment의 레이아웃 인플레이션
-+//        val rootView = inflater.inflate(R.layout.fragment_region, container, false)
-+//
-+//        // 지역 정보 리스트에 담기
-+//        fetchSRegionNames()
-+//        //fetchMRegionNames()
-+//
-+//        // ListView를 찾고, 어댑터 설정
-+//        val listView1: ListView = rootView.findViewById(R.id.lv_superRegion)
-+//        val listView2: ListView = rootView.findViewById(R.id.lv_middleRegion)
-+//        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
-+//        val adapter2 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, middleRegionList)
-+//        listView1.adapter = adapter1
-+//        listView2.adapter = adapter2
- //
--//        FuelManager.instance.get(workplaceUrl, params)
--//            .authentication().bearer(apiKey)
--//            .responseString { _, _, result ->
--//                when (result) {
--//                    is Result.Success -> {
--//                        val responseData = result.get()
--//                        val jsonObject = JSONObject(responseData)
--//                        val workplaces = jsonObject.getJSONArray("dhsOpenEmpInfo")
--//                        middleRegionList = mutableListOf<String>()
- //
--//                        for (i in 0 until workplaces.length()) {
--//                            val workplace = workplaces.getJSONObject(i)
--//                            //val workplaceName = workplace.getString("wkpl_nm")
--//                            val jurisdictionLv2 = workplace.getString("wkpl_juris_lv2_nm")
--//                            middleRegionList.add("$jurisdictionLv2")
--//                        }
-+//        return rootView
-+//    }
- //
--//                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김
-+//    private fun fetchSRegionNames() {
-+//        val params = listOf("returnType" to "XML", "target" to "CMCD", "authKey" to apiKey, "dtlGb" to "1")
-+//
-+//        val request = Request.Builder()
-+//            .url("$regionUrl?${params.joinToString("&")}")
-+//            .get()
-+//            .header("Authorization", "Bearer $apiKey")
-+//            .build()
-+//
-+//        val client = OkHttpClient()
-+//        client.newCall(request).enqueue(object : Callback {
-+//            override fun onFailure(call: Call, e: IOException) {
-+//                println(e.message)
-+//            }
-+//
-+//            override fun onResponse(call: Call, response: Response) {
-+//                val responseData = response.body?.string()
-+//                if (response.isSuccessful && responseData != null) {
-+//                    println("API 응답 데이터: $responseData")
-+//                    try {
-+//                        val superRegionList = parseXmlResponse(responseData)
-+//                        // superRegionList에 모든 근로청소재지 소재지(시/도)명 정보가 담김
- //                        // TODO: 원하는 작업 수행
-+//                        // UI 업데이트를 위해 사용할 경우, UI 스레드에서 처리
-+//                        requireActivity().runOnUiThread {
-+//                            updateUIWithRegionData(superRegionList)
-+//                        }
-+//                    } catch (e: XmlPullParserException) {
-+//                        println(e.message)
-+//                    }
-+//                } else {
-+//                    println("서버 응답 실패: ${response.code}")
-+//                }
-+//            }
-+//        })
-+//    }
-+//
-+//    private fun parseXmlResponse(xmlData: String): List<String> {
-+//        superRegionList = mutableListOf<String>()
-+//        try {
-+//            val parser = Xml.newPullParser()
-+//            parser.setInput(StringReader(xmlData))
-+//
-+//            var eventType = parser.eventType
-+//            var currentRegionName: String? = null
-+//
-+//            while (eventType != XmlPullParser.END_DOCUMENT) {
-+//                when (eventType) {
-+//                    XmlPullParser.START_TAG -> {
-+//                        val tagName = parser.name
-+//
-+//                        if (tagName == "regionNm") {
-+//                            currentRegionName = parser.nextText()
-+//                        }
- //                    }
--//                    is Result.Failure -> {
--//                        println("근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.")
-+//                    XmlPullParser.END_TAG -> {
-+//                        val tagName = parser.name
-+//
-+//                        if (tagName == "regionNm" && currentRegionName != null) {
-+//                            superRegionList.add(currentRegionName)
-+//                            currentRegionName = null
-+//                        }
- //                    }
- //                }
-+//
-+//                eventType = parser.next()
- //            }
-+//        } catch (e: XmlPullParserException) {
-+//            println("${e.message}")
-+//        } catch (e: IOException) {
-+//            println("${e.message}")
-+//        }
-+//
-+//        return superRegionList
- //    }
--
--
--}
-\ No newline at end of file
-+//
-+//
-+//    private fun updateUIWithRegionData(superRegionList: List<String>) {
-+//        val listView1: ListView = requireView().findViewById(R.id.lv_superRegion)
-+//        val adapter1 = ArrayAdapter(requireContext(), R.layout.filtering_list_item, superRegionList)
-+//        listView1.adapter = adapter1
-+//
-+//        // 시/도 버튼 클릭 시 이벤트 처리
-+//        listView1.setOnItemClickListener { _, _, position, _ ->
-+//            val item = superRegionList[position]
-+//            // TODO: 버튼 클릭 시 해당 지역 코드를 사용하여 채용공고 필터링 로직 추가
-+//        }
-+//    }
-+//
-+////    private fun fetchMRegionNames() {
-+////        val workplaceUrl = "http://openapi.work.go.kr/opi/opi/opia/dhsOpenEmpInfoAPI.do"
-+////        val params = listOf("returnType" to "JSON", "authKey" to apiKey, "callTp" to "L")
-+////
-+////        FuelManager.instance.get(workplaceUrl, params)
-+////            .authentication().bearer(apiKey)
-+////            .responseString { _, _, result ->
-+////                when (result) {
-+////                    is Result.Success -> {
-+////                        val responseData = result.get()
-+////                        val jsonObject = JSONObject(responseData)
-+////                        val workplaces = jsonObject.getJSONArray("dhsOpenEmpInfo")
-+////                        middleRegionList = mutableListOf<String>()
-+////
-+////                        for (i in 0 until workplaces.length()) {
-+////                            val workplace = workplaces.getJSONObject(i)
-+////                            //val workplaceName = workplace.getString("wkpl_nm")
-+////                            val jurisdictionLv2 = workplace.getString("wkpl_juris_lv2_nm")
-+////                            middleRegionList.add("$jurisdictionLv2")
-+////                        }
-+////
-+////                        // workplaceList에 모든 근로청소재지 소재지(시/군/구)명 정보가 담김
-+////                        // TODO: 원하는 작업 수행
-+////                    }
-+////                    is Result.Failure -> {
-+////                        println("근로청소재지 소재지(시/군/구)명 정보를 가져오는데 실패하였습니다.")
-+////                    }
-+////                }
-+////            }
-+////    }
-+//
-+//
-+//}
-\ No newline at end of file
-Index: app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport androidx.viewpager.widget.ViewPager\r\nimport com.google.android.material.tabs.TabLayout\r\nimport kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*\r\n\r\nclass WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {\r\n    private lateinit var filter: Button\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var viewPager: ViewPager\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_list, container, false)\r\n\r\n        val adapter = PagerAdapter(childFragmentManager)\r\n        adapter.addFragment(WantedRequestingFragment(), \"즉시지원\")\r\n        adapter.addFragment(WantedWorkNetFragment(), \"워크넷 채용공고\")\r\n\r\n        viewPager = view.findViewById<ViewPager>(R.id.viewpager01)\r\n        viewPager.adapter = adapter\r\n\r\n        tabLayout = view.findViewById<TabLayout>(R.id.tablayout01)\r\n        tabLayout.setupWithViewPager(viewPager)\r\n        tabLayout.addOnTabSelectedListener(this)\r\n\r\n        filter = view.findViewById<Button>(R.id.conditionButton)\r\n        filter.setOnClickListener() {\r\n            val fragment1 = WantedFilteringFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, fragment1)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        searchContent = view.findViewById<EditText>(R.id.searchContent)\r\n        searchContent.setOnTouchListener { _, _ ->\r\n            val currentTab = tabLayout.selectedTabPosition\r\n            if (currentTab == 1) {\r\n                val wantedWorkNetSearchFragment = WantedWorkNetSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedWorkNetSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"워크넷 채용공고 검색\"\r\n            } else if (currentTab == 0) {\r\n                val wantedRequestingSearchFragment = WantedRequestingSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedRequestingSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n            }\r\n            true\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    override fun onTabSelected(tab: TabLayout.Tab?) {\r\n        val currentTab = tab?.position\r\n        if (currentTab == 1) {\r\n            searchContent.hint = \"워크넷 채용공고 검색\"\r\n        } else if (currentTab == 0) {\r\n            searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n        }\r\n    }\r\n\r\n    override fun onTabUnselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n\r\n    override fun onTabReselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(date 1689769956000)
-@@ -12,7 +12,7 @@
- import android.widget.EditText
- import androidx.viewpager.widget.ViewPager
- import com.google.android.material.tabs.TabLayout
--import kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*
-+//import kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*
- 
- class WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {
-     private lateinit var filter: Button
-@@ -38,13 +38,13 @@
-         tabLayout.addOnTabSelectedListener(this)
- 
-         filter = view.findViewById<Button>(R.id.conditionButton)
--        filter.setOnClickListener() {
--            val fragment1 = WantedFilteringFragment()
--            requireActivity().supportFragmentManager.beginTransaction()
--                .replace(R.id.fl_container, fragment1)
--                .addToBackStack(null)
--                .commit()
--        }
-+//        filter.setOnClickListener() {
-+//            val fragment1 = WantedFilteringFragment()
-+//            requireActivity().supportFragmentManager.beginTransaction()
-+//                .replace(R.id.fl_container, fragment1)
-+//                .addToBackStack(null)
-+//                .commit()
-+//        }
- 
-         searchContent = view.findViewById<EditText>(R.id.searchContent)
-         searchContent.setOnTouchListener { _, _ ->
-Index: app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.KeyEvent\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.net.URLEncoder\r\n\r\nclass WantedWorkNetSearchFragment : Fragment() {\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var searchButton: Button\r\n    private lateinit var searchListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private var currentPage = 1\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        val rootView = inflater.inflate(R.layout.fragment_wanted_work_net_search, container, false)\r\n\r\n        searchContent = rootView.findViewById(R.id.searchContent)\r\n        searchListView = rootView.findViewById(R.id.searchListView)\r\n        prevButton = rootView.findViewById(R.id.prevButton)\r\n        nextButton = rootView.findViewById(R.id.nextButton)\r\n\r\n        searchContent.setOnKeyListener { _, keyCode, event ->\r\n            if (event.action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {\r\n                fetchJobDataWithSearch()\r\n                return@setOnKeyListener true\r\n            }\r\n            return@setOnKeyListener false\r\n        }\r\n\r\n        val closeButton = rootView.findViewById<ImageButton>(R.id.backButton)\r\n        closeButton.setOnClickListener {\r\n            requireActivity().onBackPressed()\r\n        }\r\n\r\n        prevButton.visibility = View.GONE\r\n        nextButton.visibility = View.GONE\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobDataWithSearch()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobDataWithSearch()\r\n        }\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchJobDataWithSearch() {\r\n        val searchKeyword = searchContent.text.toString().trim()\r\n\r\n        if (searchKeyword.isNotEmpty()) {\r\n            val encodedKeyword = URLEncoder.encode(searchKeyword, \"UTF-8\")\r\n            val url = \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10&keyword=$encodedKeyword\"\r\n            FetchJobData().execute(url)\r\n        } else {\r\n            // 검색어가 비어있을 때 처리할 내용\r\n        }\r\n    }\r\n\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            if (currentPage > 1 && result.isEmpty()) {\r\n                // nextButton을 누른 후에 빈 리스트가 반환된 경우, \"마지막 페이지입니다\" 토스트 메시지를 표시합니다.\r\n                Toast.makeText(requireContext(), \"마지막 페이지입니다\", Toast.LENGTH_SHORT).show()\r\n                currentPage -= 1 // 이전 페이지로 돌아갑니다.\r\n                nextButton.isEnabled = false // nextButton을 비활성화합니다.\r\n            } else {\r\n                jobList = result\r\n                showJobList()\r\n\r\n                if (searchContent.text.toString().trim().isEmpty()) {\r\n                    // EditText에 입력값이 없을 때\r\n                    prevButton.visibility = View.GONE\r\n                    nextButton.visibility = View.GONE\r\n                } else {\r\n                    // EditText에 입력값이 있을 때\r\n                    if (currentPage > 1 || jobList.size >= 10) {\r\n                        prevButton.visibility = View.VISIBLE\r\n                    } else {\r\n                        prevButton.visibility = View.GONE\r\n                    }\r\n                    nextButton.visibility = View.VISIBLE\r\n                }\r\n\r\n                nextButton.isEnabled = true // nextButton을 활성화합니다.\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter(this, jobList)\r\n        searchListView.adapter = adapter\r\n\r\n        searchListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(date 1689770542000)
-@@ -205,7 +205,7 @@
-     }
- 
-     private fun showJobList() {
--        val adapter = CustomAdapter(this, jobList)
-+        val adapter = CustomAdapter(this,jobList)
-         searchListView.adapter = adapter
- 
-         searchListView.setOnItemClickListener { _, _, position, _ ->
-Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\nimport kotlinx.android.synthetic.main.activity_job_detail.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689769772000)
-@@ -1,169 +1,169 @@
--package com.example.a23_hf069
--
--import android.content.Intent
--import android.os.Bundle
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.Button
--import androidx.appcompat.app.AppCompatActivity
--import androidx.fragment.app.Fragment
--import androidx.fragment.app.setFragmentResult
--import kotlinx.android.synthetic.main.activity_job_detail.*
--import kotlinx.android.synthetic.main.fragment_wanted_filtering.*
--import kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*
--
--
--class WantedFilteringFragment : Fragment()  {
--    lateinit var region_btn: Button
--
--    lateinit var edu_btn1 : Button
--    lateinit var edu_btn2 : Button
--    lateinit var edu_btn3 : Button
--    lateinit var edu_btn4 : Button
--    lateinit var edu_btn5 : Button
--    lateinit var edu_btn6 : Button
--
--    lateinit var career_btn1 : Button
--    lateinit var career_btn2 : Button
--    lateinit var career_btn3 : Button
--
--    lateinit var closeDt_btn1 : Button
--    lateinit var closeDt_btn2 : Button
--    lateinit var closeDt_btn3 : Button
--    lateinit var closeDt_btn4 : Button
--    lateinit var closeDt_btn5 : Button
--    lateinit var closeDt_btn6 : Button
--
--    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
--    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
--    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
--
--    private val selectedEducationList: MutableSet<Int> = mutableSetOf()
--    private val selectedCareerList: MutableSet<Int> = mutableSetOf()
--    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()
--
--    lateinit var complete_btn1 : Button //완료버튼
--
--    // 화면 띄우기
--    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
--        inflater: LayoutInflater,
--        container: ViewGroup?,
--        savedInstanceState: Bundle?
--
--    ): View? {
--        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--        //지역
--        region_btn = view.findViewById<Button>(R.id.region_btn)
--
--        //학력 체크
--        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체
--        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교
--        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교
--        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교
--        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)
--        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)
--
--        //경력 체크
--        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체
--        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입
--        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력
--
--        //마감일 체크
--        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)
--        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)
--        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)
--        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)
--        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)
--        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)
--
--
--       /* region_btn.setOnClickListener {
--            val regionFragment = RegionFragment()
--            requireActivity().supportFragmentManager.beginTransaction()
--                .replace(R.id.fl_container, regionFragment)
--                .addToBackStack(null)
--                .commit()
--        }
--*/
--        // 학력 버튼 클릭 리스너
--        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체
--        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교
--        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교
--        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교
--        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)
--        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)
--
--        // 경력 버튼 클릭 리스너
--        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체
--        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입
--        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력
--
--        // 마감일 버튼 클릭 리스너
--        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체
--        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내
--        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내
--        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내
--        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내
--        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내
--
--    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
--        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)
--        complete_btn1.setOnClickListener {
--            val wantedFilteredFragment = WantedFilteredFragment()
--            requireActivity().supportFragmentManager.beginTransaction()
--                .replace(R.id.fl_container, wantedFilteredFragment)
--                .addToBackStack(null)
--                .commit()
--        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
--    }
--
--    private fun SelectedEducation(selected: Int) {
--        if (selectedEducation == 0 || selected > selectedEducation) {
--            selectedEducation = selected
--            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
--            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
--                // 0번과 같은 결과
--
--
--            }
--        }
--        filterItems()
--    }
--
--    private fun SelectedCareer(selected: Int) {
--        if (selectedCareer == 0 || selected > selectedCareer) {
--            selectedCareer = selected
--        }
--        filterItems()
--    }
--
--    private fun SelectedCloseDate(selected: Int) {
--        if (selectedCloseDate == 0 || selected > selectedCloseDate) {
--            selectedCloseDate = selected
--        }
--        filterItems()
--    }
--
--    private fun filterItems() {
--        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)
--        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
--        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
--        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
--
--        // 세 리스트에서 중복되는 값들을 찾습니다.
--        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
--
--        for (item in intersectedItems) {
--            println(item)
--            // 필요한 처리를 수행합니다.
--        }
--    }
--
--
--
--    }
-\ No newline at end of file
-+//package com.example.a23_hf069
-+//
-+//import android.content.Intent
-+//import android.os.Bundle
-+//import android.view.LayoutInflater
-+//import android.view.View
-+//import android.view.ViewGroup
-+//import android.widget.Button
-+//import androidx.appcompat.app.AppCompatActivity
-+//import androidx.fragment.app.Fragment
-+//import androidx.fragment.app.setFragmentResult
-+//import kotlinx.android.synthetic.main.activity_job_detail.*
-+//import kotlinx.android.synthetic.main.fragment_wanted_filtering.*
-+//import kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*
-+//
-+//
-+//class WantedFilteringFragment : Fragment()  {
-+//    lateinit var region_btn: Button
-+//
-+//    lateinit var edu_btn1 : Button
-+//    lateinit var edu_btn2 : Button
-+//    lateinit var edu_btn3 : Button
-+//    lateinit var edu_btn4 : Button
-+//    lateinit var edu_btn5 : Button
-+//    lateinit var edu_btn6 : Button
-+//
-+//    lateinit var career_btn1 : Button
-+//    lateinit var career_btn2 : Button
-+//    lateinit var career_btn3 : Button
-+//
-+//    lateinit var closeDt_btn1 : Button
-+//    lateinit var closeDt_btn2 : Button
-+//    lateinit var closeDt_btn3 : Button
-+//    lateinit var closeDt_btn4 : Button
-+//    lateinit var closeDt_btn5 : Button
-+//    lateinit var closeDt_btn6 : Button
-+//
-+//    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
-+//    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
-+//    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
-+//
-+//    private val selectedEducationList: MutableSet<Int> = mutableSetOf()
-+//    private val selectedCareerList: MutableSet<Int> = mutableSetOf()
-+//    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()
-+//
-+//    lateinit var complete_btn1 : Button //완료버튼
-+//
-+//    // 화면 띄우기
-+//    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
-+//        inflater: LayoutInflater,
-+//        container: ViewGroup?,
-+//        savedInstanceState: Bundle?
-+//
-+//    ): View? {
-+//        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)
-+//    }
-+//
-+//    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-+//        super.onViewCreated(view, savedInstanceState)
-+//        //지역
-+//        region_btn = view.findViewById<Button>(R.id.region_btn)
-+//
-+//        //학력 체크
-+//        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체
-+//        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교
-+//        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교
-+//        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교
-+//        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)
-+//        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)
-+//
-+//        //경력 체크
-+//        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체
-+//        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입
-+//        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력
-+//
-+//        //마감일 체크
-+//        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)
-+//        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)
-+//        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)
-+//        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)
-+//        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)
-+//        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)
-+//
-+//
-+//       /* region_btn.setOnClickListener {
-+//            val regionFragment = RegionFragment()
-+//            requireActivity().supportFragmentManager.beginTransaction()
-+//                .replace(R.id.fl_container, regionFragment)
-+//                .addToBackStack(null)
-+//                .commit()
-+//        }
-+//*/
-+//        // 학력 버튼 클릭 리스너
-+//        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체
-+//        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교
-+//        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교
-+//        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교
-+//        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)
-+//        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)
-+//
-+//        // 경력 버튼 클릭 리스너
-+//        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체
-+//        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입
-+//        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력
-+//
-+//        // 마감일 버튼 클릭 리스너
-+//        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체
-+//        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내
-+//        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내
-+//        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내
-+//        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내
-+//        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내
-+//
-+//    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
-+//        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)
-+//        complete_btn1.setOnClickListener {
-+//            val wantedFilteredFragment = WantedFilteredFragment()
-+//            requireActivity().supportFragmentManager.beginTransaction()
-+//                .replace(R.id.fl_container, wantedFilteredFragment)
-+//                .addToBackStack(null)
-+//                .commit()
-+//        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
-+//    }
-+//
-+//    private fun SelectedEducation(selected: Int) {
-+//        if (selectedEducation == 0 || selected > selectedEducation) {
-+//            selectedEducation = selected
-+//            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
-+//            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
-+//                // 0번과 같은 결과
-+//
-+//
-+//            }
-+//        }
-+//        filterItems()
-+//    }
-+//
-+//    private fun SelectedCareer(selected: Int) {
-+//        if (selectedCareer == 0 || selected > selectedCareer) {
-+//            selectedCareer = selected
-+//        }
-+//        filterItems()
-+//    }
-+//
-+//    private fun SelectedCloseDate(selected: Int) {
-+//        if (selectedCloseDate == 0 || selected > selectedCloseDate) {
-+//            selectedCloseDate = selected
-+//        }
-+//        filterItems()
-+//    }
-+//
-+//    private fun filterItems() {
-+//        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)
-+//        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
-+//        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
-+//        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
-+//
-+//        // 세 리스트에서 중복되는 값들을 찾습니다.
-+//        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
-+//
-+//        for (item in intersectedItems) {
-+//            println(item)
-+//            // 필요한 처리를 수행합니다.
-+//        }
-+//    }
-+//
-+//
-+//
-+//    }
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,343 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\n\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 4acb2686690de835ef2c01370537fdfbb3963fa6)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689772807216)
-@@ -1,18 +1,33 @@
- package com.example.a23_hf069
- 
-+import android.content.Context
- import android.content.Intent
-+import android.os.AsyncTask
- import android.os.Bundle
- import android.view.LayoutInflater
- import android.view.View
- import android.view.ViewGroup
-+import android.widget.ArrayAdapter
- import android.widget.Button
-+import android.widget.ImageView
-+import android.widget.ListView
-+import android.widget.TextView
- import androidx.appcompat.app.AppCompatActivity
-+import androidx.core.content.ContentProviderCompat.requireContext
-+import androidx.core.content.ContextCompat.startActivity
- import androidx.fragment.app.Fragment
- import androidx.fragment.app.setFragmentResult
--
-+import org.xmlpull.v1.XmlPullParser
-+import org.xmlpull.v1.XmlPullParserFactory
-+import java.io.InputStream
-+import java.net.HttpURLConnection
-+import java.net.URL
- 
- 
- class WantedFilteringFragment : Fragment()  {
-+    private lateinit var jobList: List<Job>
-+    private lateinit var jobListView: ListView
-+
-     lateinit var region_btn: Button
- 
-     lateinit var edu_btn1 : Button
-@@ -34,7 +49,7 @@
-     lateinit var closeDt_btn6 : Button
- 
-     private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
--    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
-+    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력
-     private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
- 
-     private val selectedEducationList: MutableSet<Int> = mutableSetOf()
-@@ -44,7 +59,7 @@
-     lateinit var complete_btn1 : Button //완료버튼
- 
-     // 화면 띄우기
--    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
-+    override fun onCreateView( // onCreateView 함수 오버라이드
-         inflater: LayoutInflater,
-         container: ViewGroup?,
-         savedInstanceState: Bundle?
-@@ -126,8 +141,7 @@
-             // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
-             if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
-                 // 0번과 같은 결과
--
--
-+                selectedEducationList.add(0)
-             }
-         }
-         filterItems()
-@@ -153,15 +167,247 @@
-         val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
-         val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
- 
-+        //각각의 리스트에 담긴 Int형의 데이터들을 String 타입으로 변환
-+        val convertedEducationList = filteredEducationList.map { value ->
-+            when (value) {
-+                0 -> "00"
-+                1 -> "01"
-+                2 -> "02"
-+                3 -> "03"
-+                4 -> "04"
-+                5 -> "05"
-+                else -> {}
-+            }
-+        }
-+        val convertedCareerList = filteredCareerList.map { value ->
-+            when (value) {
-+                0 -> "N"
-+                1 -> "E"
-+                2 -> "Z"
-+
-+                else -> {}
-+                } // 나머지 값은 그대로 문자열로 변환
-+            }
-+        }
-+        val convertedCloseDateList = filteredCloseDateList.map { value ->
-+            when (value) {
-+                0 -> "00"
-+                1 -> "N"
-+                // 추가적인 변환 규칙이 필요한 경우에는 추가하면 됩니다.
-+                else -> value.toString() // 나머지 값은 그대로 문자열로 변환
-+            }
-+        }
-+
-+
-+        //각각의 리스트에서 추출된 값을 파싱된 xml파일과 대조 -> 리스트에 담기 -> 중복 건 찾기
-+
-+
-+
-         // 세 리스트에서 중복되는 값들을 찾습니다.
--        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
-+        //val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
- 
--        for (item in intersectedItems) {
-+        /*for (item in intersectedItems) {
-             println(item)
-             // 필요한 처리를 수행합니다.
-+        }*/
-+
-+
-+    //워크넷 api 채용목록 xml파일 parsing하는 코드
-+    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
-+        override fun doInBackground(vararg urls: String): List<Job> {
-+            val urlString = urls[0]
-+            var result: List<Job> = emptyList()
-+            var connection: HttpURLConnection? = null
-+
-+            try {
-+                val url = URL(urlString)
-+                connection = url.openConnection() as HttpURLConnection
-+                connection.requestMethod = "GET"
-+                connection.readTimeout = 15 * 1000
-+                connection.connectTimeout = 15 * 1000
-+
-+                val responseCode = connection.responseCode
-+                if (responseCode == HttpURLConnection.HTTP_OK) {
-+                    val inputStream = connection.inputStream
-+                    result = parseXml(inputStream)
-+                }
-+            } catch (e: Exception) {
-+                e.printStackTrace()
-+            } finally {
-+                connection?.disconnect()
-+            }
-+
-+            return result
-+        }
-+
-+        private fun parseXml(inputStream: InputStream): List<Job> {
-+            val jobList = mutableListOf<Job>()
-+            val factory = XmlPullParserFactory.newInstance()
-+            val xpp = factory.newPullParser()
-+            xpp.setInput(inputStream, null)
-+
-+            var eventType = xpp.eventType
-+            var company: String? = null // 회사명
-+            var title: String? = null // 채용제목
-+            var salTpNm: String? = null // 임금형태
-+            var sal: String? = null // 급여
-+            var region: String? = null // 근무지역
-+            var holidayTpNm: String? = null // 근무형태
-+            var minEdubg: String? = null // 최소학력
-+            var career: String? = null // 경력
-+            var closeDt: String? = null // 마감일자
-+            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
-+            var jobsCd: String? = null // 직종코드
-+
-+            while (eventType != XmlPullParser.END_DOCUMENT) {
-+                when (eventType) {
-+                    XmlPullParser.START_TAG -> {
-+                        when (xpp.name) {
-+                            "company" -> company = xpp.nextText()
-+                            "title" -> title = xpp.nextText()
-+                            "salTpNm" -> salTpNm = xpp.nextText()
-+                            "sal" -> sal = xpp.nextText()
-+                            "region" -> region = xpp.nextText()
-+                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
-+                            "minEdubg" -> minEdubg = xpp.nextText()
-+                            "career" -> career = xpp.nextText()
-+                            "closeDt" -> closeDt = xpp.nextText()
-+                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
-+                            "jobsCd" -> jobsCd = xpp.nextText()
-+                        }
-+                    }
-+                    XmlPullParser.END_TAG -> {
-+                        if (xpp.name == "wanted") {
-+                            company?.let { c ->
-+                                title?.let { t ->
-+                                    jobList.add(
-+                                        Job(
-+                                            c, t, salTpNm, sal, region, holidayTpNm,
-+                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
-+                                        )
-+                                    )
-+                                }
-+                            }
-+                            company = null
-+                            title = null
-+                            salTpNm = null
-+                            sal = null
-+                            region = null
-+                            holidayTpNm = null
-+                            minEdubg = null
-+                            career = null
-+                            closeDt = null
-+                            wantedMobileInfoUrl = null
-+                            jobsCd = null
-+                        }
-+                    }
-+                }
-+                eventType = xpp.next()
-+            }
-+
-+            return jobList
-+        }
-+
-+        override fun onPostExecute(result: List<Job>) {
-+            jobList = result
-+            showJobList()
-         }
-     }
- 
-+    private fun showJobList() {
-+        val adapter = CustomAdapter2(requireActivity(), jobList)
-+        jobListView.adapter = adapter
- 
-+        jobListView.setOnItemClickListener { _, _, position, _ ->
-+            val job = jobList[position]
-+            val intent = JobDetailActivity2.newIntent(requireContext(), job)
-+            startActivity(intent)
-+        }
-+    }
-+}
-+
-+class CustomAdapter3(private val context3: Context, private val jobList: List<Job>) :
-+    ArrayAdapter<Job>(context3, R.layout.job_item, jobList) {
-+
-+    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
-+        val view =
-+            convertView ?: LayoutInflater.from(context3).inflate(R.layout.job_item, parent, false)
-+
-+        val job = jobList[position]
-+
-+        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
-+        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
-+        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
-+
-+        titleTextView.text = job.title
-+        companyTextView.text = job.company
-+        regionContTextView.text = job.region
-+
-+        return view
-+    }
-+}
-+
-+class JobDetailActivity3 : AppCompatActivity() {
-+    private lateinit var backButton: ImageView
-+    private lateinit var company: TextView // 회사명
-+    private lateinit var title: TextView // 제목
-+    private lateinit var salTpNm: TextView // 임금형태
-+    private lateinit var sal: TextView // 급여
-+    private lateinit var region: TextView // 근무지역
-+    private lateinit var holidayTpNm: TextView // 근무형태
-+    private lateinit var minEdubg: TextView // 최소학력
-+    private lateinit var career: TextView // 경력
-+    private lateinit var closeDt: TextView // 마감일자
-+    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
-+    private lateinit var jobsCd: TextView // 직종코드
-+
-+    companion object {
-+        private const val JOB_EXTRA = "job"
-+
-+        fun newIntent(context2: Context, job: Job): Intent {
-+            return Intent(context2, JobDetailActivity2::class.java).apply {
-+                putExtra(JOB_EXTRA, job)
-+            }
-+        }
-+    }
-+
-+    override fun onCreate(savedInstanceState: Bundle?) {
-+        super.onCreate(savedInstanceState)
-+        setContentView(R.layout.activity_job_detail)
-+
-+        // 기본 툴바 숨기기
-+        supportActionBar?.hide()
-+
-+        backButton = findViewById(R.id.backButton)
-+        company = findViewById(R.id.company)
-+        title = findViewById(R.id.title)
-+        salTpNm = findViewById(R.id.salTpNm)
-+        sal = findViewById(R.id.sal)
-+        region = findViewById(R.id.region)
-+        holidayTpNm = findViewById(R.id.holidayTpNm)
-+        minEdubg = findViewById(R.id.minEdubg)
-+        career = findViewById(R.id.career)
-+        closeDt = findViewById(R.id.closeDt)
-+        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
-+        jobsCd = findViewById(R.id.jobsCd)
-+
-+        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
-+
-+        company.text = job?.company
-+        title.text = job?.title
-+        salTpNm.text = job?.salTpNm
-+        sal.text = job?.sal
-+        region.text = job?.region
-+        holidayTpNm.text = job?.holidayTpNm
-+        minEdubg.text = job?.minEdubg
-+        career.text = job?.career
-+        closeDt.text = job?.closeDt
-+        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
-+        jobsCd.text = job?.jobsCd
-+
-+        backButton.setOnClickListener {
-+            onBackPressed()
-+        }
-+    }
- 
-     }
-\ No newline at end of file
-Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 4acb2686690de835ef2c01370537fdfbb3963fa6)
-+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689770942657)
-@@ -19,7 +19,7 @@
- 
- 
- class P_loginFragment : Fragment() { //개인로그인
--    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
-+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
- 
-     private var TAG = "phptest" // phptest log 찍으려는 용도
-     private lateinit var id_text_input_edit_text: EditText // id
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__11_50__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__11_50__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__11_50__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__11_50__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]" date="1689778289343" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-19 오후 11:50 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__9_42__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__9_42__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__9_42__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__9_42__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]" date="1689770586086" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-19 오후 9:42 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20__12_02__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20__12_02__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20__12_02__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20__12_02__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]" date="1689778945766" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-20_오전_12_02_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-20 오전 12:02 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_12__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_12__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_12__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_12__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]" date="1689772441867" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_12_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-19 오후 10:12 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_24__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_24__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_24__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19__10_24__Changes_.xml	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]" date="1689773051970" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_10_24_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-07-19 오후 10:24 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_11_50_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,1031 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>//package com.example.a23_hf069\r\n//\r\n//import android.content.Context\r\n//import android.content.Intent\r\n//import android.os.AsyncTask\r\n//import android.os.Bundle\r\n//import android.view.LayoutInflater\r\n//import android.view.View\r\n//import android.view.ViewGroup\r\n//import android.widget.*\r\n//import androidx.appcompat.app.AppCompatActivity\r\n//import androidx.fragment.app.Fragment\r\n//import org.xmlpull.v1.XmlPullParser\r\n//import org.xmlpull.v1.XmlPullParserFactory\r\n//import java.io.InputStream\r\n//import java.net.HttpURLConnection\r\n//import java.net.URL\r\n//\r\n//class WantedFilteredFragment : Fragment() {\r\n//    private lateinit var jobListView: ListView\r\n//    private lateinit var jobList: List<Job>\r\n//    private lateinit var prevButton: Button\r\n//    private lateinit var nextButton: Button\r\n//    private var currentPage = 1\r\n//\r\n//    override fun onCreateView(\r\n//        inflater: LayoutInflater,\r\n//        container: ViewGroup?,\r\n//        savedInstanceState: Bundle?\r\n//    ): View? {\r\n//        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)\r\n//\r\n//        // UI 요소 초기화\r\n//        jobListView = view.findViewById(R.id.jobListView)\r\n//        prevButton = view.findViewById(R.id.prevButton)\r\n//        nextButton = view.findViewById(R.id.nextButton)\r\n//\r\n//        // 이전 페이지 버튼 클릭 이벤트 처리\r\n//        prevButton.setOnClickListener {\r\n//            if (currentPage > 1) {\r\n//                currentPage -= 1\r\n//                fetchJobData()\r\n//            }\r\n//        }\r\n//\r\n//        // 다음 페이지 버튼 클릭 이벤트 처리\r\n//        nextButton.setOnClickListener {\r\n//            currentPage += 1\r\n//            fetchJobData()\r\n//        }\r\n//\r\n//        // API 호출 후 필터링된 값 출력\r\n//        fetchJobData()\r\n//        //추가예정\r\n//\r\n//        return view\r\n//    }\r\n//\r\n//    private fun fetchJobData() {\r\n//        val url =\r\n//            \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10\"\r\n//        FetchJobData().execute(url)\r\n//    }\r\n//\r\n//    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n//        override fun doInBackground(vararg urls: String): List<Job> {\r\n//            val urlString = urls[0]\r\n//            var result: List<Job> = emptyList()\r\n//            var connection: HttpURLConnection? = null\r\n//\r\n//            try {\r\n//                val url = URL(urlString)\r\n//                connection = url.openConnection() as HttpURLConnection\r\n//                connection.requestMethod = \"GET\"\r\n//                connection.readTimeout = 15 * 1000\r\n//                connection.connectTimeout = 15 * 1000\r\n//\r\n//                val responseCode = connection.responseCode\r\n//                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n//                    val inputStream = connection.inputStream\r\n//                    result = parseXml(inputStream)\r\n//                }\r\n//            } catch (e: Exception) {\r\n//                e.printStackTrace()\r\n//            } finally {\r\n//                connection?.disconnect()\r\n//            }\r\n//\r\n//            return result\r\n//        }\r\n//\r\n//        private fun parseXml(inputStream: InputStream): List<Job> {\r\n//            val jobList = mutableListOf<Job>()\r\n//            val factory = XmlPullParserFactory.newInstance()\r\n//            val xpp = factory.newPullParser()\r\n//            xpp.setInput(inputStream, null)\r\n//\r\n//            var eventType = xpp.eventType\r\n//            var company: String? = null // 회사명\r\n//            var title: String? = null // 채용제목\r\n//            var salTpNm: String? = null // 임금형태\r\n//            var sal: String? = null // 급여\r\n//            var region: String? = null // 근무지역\r\n//            var holidayTpNm: String? = null // 근무형태\r\n//            var minEdubg: String? = null // 최소학력\r\n//            var career: String? = null // 경력\r\n//            var closeDt: String? = null // 마감일자\r\n//            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n//            var jobsCd: String? = null // 직종코드\r\n//\r\n//            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n//                when (eventType) {\r\n//                    XmlPullParser.START_TAG -> {\r\n//                        when (xpp.name) {\r\n//                            \"company\" -> company = xpp.nextText()\r\n//                            \"title\" -> title = xpp.nextText()\r\n//                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n//                            \"sal\" -> sal = xpp.nextText()\r\n//                            \"region\" -> region = xpp.nextText()\r\n//                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n//                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n//                            \"career\" -> career = xpp.nextText()\r\n//                            \"closeDt\" -> closeDt = xpp.nextText()\r\n//                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n//                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n//                        }\r\n//                    }\r\n//                    XmlPullParser.END_TAG -> {\r\n//                        if (xpp.name == \"wanted\") {\r\n//                            company?.let { c ->\r\n//                                title?.let { t ->\r\n//                                    jobList.add(\r\n//                                        Job(\r\n//                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n//                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n//                                        )\r\n//                                    )\r\n//                                }\r\n//                            }\r\n//                            company = null\r\n//                            title = null\r\n//                            salTpNm = null\r\n//                            sal = null\r\n//                            region = null\r\n//                            holidayTpNm = null\r\n//                            minEdubg = null\r\n//                            career = null\r\n//                            closeDt = null\r\n//                            wantedMobileInfoUrl = null\r\n//                            jobsCd = null\r\n//                        }\r\n//                    }\r\n//                }\r\n//                eventType = xpp.next()\r\n//            }\r\n//\r\n//            return jobList\r\n//        }\r\n//\r\n//        override fun onPostExecute(result: List<Job>) {\r\n//            jobList = result\r\n//            showJobList()\r\n//        }\r\n//    }\r\n//\r\n//    private fun showJobList() {\r\n//        val adapter = CustomAdapter2(requireActivity(), jobList)\r\n//        jobListView.adapter = adapter\r\n//\r\n//        jobListView.setOnItemClickListener { _, _, position, _ ->\r\n//            val job = jobList[position]\r\n//            val intent = JobDetailActivity2.newIntent(requireContext(), job)\r\n//            startActivity(intent)\r\n//        }\r\n//    }\r\n//}\r\n//\r\n//class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :\r\n//    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {\r\n//\r\n//    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n//        val view =\r\n//            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)\r\n//\r\n//        val job = jobList[position]\r\n//\r\n//        val titleTextView: TextView = view.findViewById(R.id.titleTextView)\r\n//        val companyTextView: TextView = view.findViewById(R.id.companyTextView)\r\n//        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)\r\n//\r\n//        titleTextView.text = job.title\r\n//        companyTextView.text = job.company\r\n//        regionContTextView.text = job.region\r\n//\r\n//        return view\r\n//    }\r\n//}\r\n//\r\n//class JobDetailActivity2 : AppCompatActivity() {\r\n//    private lateinit var backButton: ImageView\r\n//    private lateinit var company: TextView // 회사명\r\n//    private lateinit var title: TextView // 제목\r\n//    private lateinit var salTpNm: TextView // 임금형태\r\n//    private lateinit var sal: TextView // 급여\r\n//    private lateinit var region: TextView // 근무지역\r\n//    private lateinit var holidayTpNm: TextView // 근무형태\r\n//    private lateinit var minEdubg: TextView // 최소학력\r\n//    private lateinit var career: TextView // 경력\r\n//    private lateinit var closeDt: TextView // 마감일자\r\n//    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL\r\n//    private lateinit var jobsCd: TextView // 직종코드\r\n//\r\n//    companion object {\r\n//        private const val JOB_EXTRA = \"job\"\r\n//\r\n//        fun newIntent(context2: Context, job: Job): Intent {\r\n//            return Intent(context2, JobDetailActivity2::class.java).apply {\r\n//                putExtra(JOB_EXTRA, job)\r\n//            }\r\n//        }\r\n//    }\r\n//\r\n//    override fun onCreate(savedInstanceState: Bundle?) {\r\n//        super.onCreate(savedInstanceState)\r\n//        setContentView(R.layout.activity_job_detail)\r\n//\r\n//        // 기본 툴바 숨기기\r\n//        supportActionBar?.hide()\r\n//\r\n//        backButton = findViewById(R.id.backButton)\r\n//        company = findViewById(R.id.company)\r\n//        title = findViewById(R.id.title)\r\n//        salTpNm = findViewById(R.id.salTpNm)\r\n//        sal = findViewById(R.id.sal)\r\n//        region = findViewById(R.id.region)\r\n//        holidayTpNm = findViewById(R.id.holidayTpNm)\r\n//        minEdubg = findViewById(R.id.minEdubg)\r\n//        career = findViewById(R.id.career)\r\n//        closeDt = findViewById(R.id.closeDt)\r\n//        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)\r\n//        jobsCd = findViewById(R.id.jobsCd)\r\n//\r\n//        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)\r\n//\r\n//        company.text = job?.company\r\n//        title.text = job?.title\r\n//        salTpNm.text = job?.salTpNm\r\n//        sal.text = job?.sal\r\n//        region.text = job?.region\r\n//        holidayTpNm.text = job?.holidayTpNm\r\n//        minEdubg.text = job?.minEdubg\r\n//        career.text = job?.career\r\n//        closeDt.text = job?.closeDt\r\n//        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl\r\n//        jobsCd.text = job?.jobsCd\r\n//\r\n//        backButton.setOnClickListener {\r\n//            onBackPressed()\r\n//        }\r\n//    }\r\n//}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteredFragment.kt	(date 1689777975732)
-@@ -1,261 +1,260 @@
--//package com.example.a23_hf069
--//
--//import android.content.Context
--//import android.content.Intent
--//import android.os.AsyncTask
--//import android.os.Bundle
--//import android.view.LayoutInflater
--//import android.view.View
--//import android.view.ViewGroup
--//import android.widget.*
--//import androidx.appcompat.app.AppCompatActivity
--//import androidx.fragment.app.Fragment
--//import org.xmlpull.v1.XmlPullParser
--//import org.xmlpull.v1.XmlPullParserFactory
--//import java.io.InputStream
--//import java.net.HttpURLConnection
--//import java.net.URL
--//
--//class WantedFilteredFragment : Fragment() {
--//    private lateinit var jobListView: ListView
--//    private lateinit var jobList: List<Job>
--//    private lateinit var prevButton: Button
--//    private lateinit var nextButton: Button
--//    private var currentPage = 1
--//
--//    override fun onCreateView(
--//        inflater: LayoutInflater,
--//        container: ViewGroup?,
--//        savedInstanceState: Bundle?
--//    ): View? {
--//        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
--//
--//        // UI 요소 초기화
--//        jobListView = view.findViewById(R.id.jobListView)
--//        prevButton = view.findViewById(R.id.prevButton)
--//        nextButton = view.findViewById(R.id.nextButton)
--//
--//        // 이전 페이지 버튼 클릭 이벤트 처리
--//        prevButton.setOnClickListener {
--//            if (currentPage > 1) {
--//                currentPage -= 1
--//                fetchJobData()
--//            }
--//        }
--//
--//        // 다음 페이지 버튼 클릭 이벤트 처리
--//        nextButton.setOnClickListener {
--//            currentPage += 1
--//            fetchJobData()
--//        }
--//
--//        // API 호출 후 필터링된 값 출력
--//        fetchJobData()
--//        //추가예정
--//
--//        return view
--//    }
--//
--//    private fun fetchJobData() {
--//        val url =
--//            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
--//        FetchJobData().execute(url)
--//    }
--//
--//    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
--//        override fun doInBackground(vararg urls: String): List<Job> {
--//            val urlString = urls[0]
--//            var result: List<Job> = emptyList()
--//            var connection: HttpURLConnection? = null
--//
--//            try {
--//                val url = URL(urlString)
--//                connection = url.openConnection() as HttpURLConnection
--//                connection.requestMethod = "GET"
--//                connection.readTimeout = 15 * 1000
--//                connection.connectTimeout = 15 * 1000
--//
--//                val responseCode = connection.responseCode
--//                if (responseCode == HttpURLConnection.HTTP_OK) {
--//                    val inputStream = connection.inputStream
--//                    result = parseXml(inputStream)
--//                }
--//            } catch (e: Exception) {
--//                e.printStackTrace()
--//            } finally {
--//                connection?.disconnect()
--//            }
--//
--//            return result
--//        }
--//
--//        private fun parseXml(inputStream: InputStream): List<Job> {
--//            val jobList = mutableListOf<Job>()
--//            val factory = XmlPullParserFactory.newInstance()
--//            val xpp = factory.newPullParser()
--//            xpp.setInput(inputStream, null)
--//
--//            var eventType = xpp.eventType
--//            var company: String? = null // 회사명
--//            var title: String? = null // 채용제목
--//            var salTpNm: String? = null // 임금형태
--//            var sal: String? = null // 급여
--//            var region: String? = null // 근무지역
--//            var holidayTpNm: String? = null // 근무형태
--//            var minEdubg: String? = null // 최소학력
--//            var career: String? = null // 경력
--//            var closeDt: String? = null // 마감일자
--//            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
--//            var jobsCd: String? = null // 직종코드
--//
--//            while (eventType != XmlPullParser.END_DOCUMENT) {
--//                when (eventType) {
--//                    XmlPullParser.START_TAG -> {
--//                        when (xpp.name) {
--//                            "company" -> company = xpp.nextText()
--//                            "title" -> title = xpp.nextText()
--//                            "salTpNm" -> salTpNm = xpp.nextText()
--//                            "sal" -> sal = xpp.nextText()
--//                            "region" -> region = xpp.nextText()
--//                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
--//                            "minEdubg" -> minEdubg = xpp.nextText()
--//                            "career" -> career = xpp.nextText()
--//                            "closeDt" -> closeDt = xpp.nextText()
--//                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
--//                            "jobsCd" -> jobsCd = xpp.nextText()
--//                        }
--//                    }
--//                    XmlPullParser.END_TAG -> {
--//                        if (xpp.name == "wanted") {
--//                            company?.let { c ->
--//                                title?.let { t ->
--//                                    jobList.add(
--//                                        Job(
--//                                            c, t, salTpNm, sal, region, holidayTpNm,
--//                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
--//                                        )
--//                                    )
--//                                }
--//                            }
--//                            company = null
--//                            title = null
--//                            salTpNm = null
--//                            sal = null
--//                            region = null
--//                            holidayTpNm = null
--//                            minEdubg = null
--//                            career = null
--//                            closeDt = null
--//                            wantedMobileInfoUrl = null
--//                            jobsCd = null
--//                        }
--//                    }
--//                }
--//                eventType = xpp.next()
--//            }
--//
--//            return jobList
--//        }
--//
--//        override fun onPostExecute(result: List<Job>) {
--//            jobList = result
--//            showJobList()
--//        }
--//    }
--//
--//    private fun showJobList() {
--//        val adapter = CustomAdapter2(requireActivity(), jobList)
--//        jobListView.adapter = adapter
--//
--//        jobListView.setOnItemClickListener { _, _, position, _ ->
--//            val job = jobList[position]
--//            val intent = JobDetailActivity2.newIntent(requireContext(), job)
--//            startActivity(intent)
--//        }
--//    }
--//}
--//
--//class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
--//    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
--//
--//    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
--//        val view =
--//            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
--//
--//        val job = jobList[position]
--//
--//        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
--//        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
--//        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
--//
--//        titleTextView.text = job.title
--//        companyTextView.text = job.company
--//        regionContTextView.text = job.region
--//
--//        return view
--//    }
--//}
--//
--//class JobDetailActivity2 : AppCompatActivity() {
--//    private lateinit var backButton: ImageView
--//    private lateinit var company: TextView // 회사명
--//    private lateinit var title: TextView // 제목
--//    private lateinit var salTpNm: TextView // 임금형태
--//    private lateinit var sal: TextView // 급여
--//    private lateinit var region: TextView // 근무지역
--//    private lateinit var holidayTpNm: TextView // 근무형태
--//    private lateinit var minEdubg: TextView // 최소학력
--//    private lateinit var career: TextView // 경력
--//    private lateinit var closeDt: TextView // 마감일자
--//    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
--//    private lateinit var jobsCd: TextView // 직종코드
--//
--//    companion object {
--//        private const val JOB_EXTRA = "job"
--//
--//        fun newIntent(context2: Context, job: Job): Intent {
--//            return Intent(context2, JobDetailActivity2::class.java).apply {
--//                putExtra(JOB_EXTRA, job)
--//            }
--//        }
--//    }
--//
--//    override fun onCreate(savedInstanceState: Bundle?) {
--//        super.onCreate(savedInstanceState)
--//        setContentView(R.layout.activity_job_detail)
--//
--//        // 기본 툴바 숨기기
--//        supportActionBar?.hide()
--//
--//        backButton = findViewById(R.id.backButton)
--//        company = findViewById(R.id.company)
--//        title = findViewById(R.id.title)
--//        salTpNm = findViewById(R.id.salTpNm)
--//        sal = findViewById(R.id.sal)
--//        region = findViewById(R.id.region)
--//        holidayTpNm = findViewById(R.id.holidayTpNm)
--//        minEdubg = findViewById(R.id.minEdubg)
--//        career = findViewById(R.id.career)
--//        closeDt = findViewById(R.id.closeDt)
--//        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
--//        jobsCd = findViewById(R.id.jobsCd)
--//
--//        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
--//
--//        company.text = job?.company
--//        title.text = job?.title
--//        salTpNm.text = job?.salTpNm
--//        sal.text = job?.sal
--//        region.text = job?.region
--//        holidayTpNm.text = job?.holidayTpNm
--//        minEdubg.text = job?.minEdubg
--//        career.text = job?.career
--//        closeDt.text = job?.closeDt
--//        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
--//        jobsCd.text = job?.jobsCd
--//
--//        backButton.setOnClickListener {
--//            onBackPressed()
--//        }
--//    }
--//}
-\ No newline at end of file
-+package com.example.a23_hf069
-+
-+import android.content.Context
-+import android.content.Intent
-+import android.os.AsyncTask
-+import android.os.Bundle
-+import android.view.LayoutInflater
-+import android.view.View
-+import android.view.ViewGroup
-+import android.widget.*
-+import androidx.appcompat.app.AppCompatActivity
-+import androidx.fragment.app.Fragment
-+import org.xmlpull.v1.XmlPullParser
-+import org.xmlpull.v1.XmlPullParserFactory
-+import java.io.InputStream
-+import java.net.HttpURLConnection
-+import java.net.URL
-+
-+class WantedFilteredFragment : Fragment() {
-+    private lateinit var jobListView: ListView
-+    private lateinit var jobList: List<Job>
-+    private lateinit var prevButton: Button
-+    private lateinit var nextButton: Button
-+    private var currentPage = 1
-+
-+    override fun onCreateView(
-+        inflater: LayoutInflater,
-+        container: ViewGroup?,
-+        savedInstanceState: Bundle?
-+    ): View? {
-+        val view = inflater.inflate(R.layout.fragment_wanted_work_net, container, false)
-+
-+        // UI 요소 초기화
-+        jobListView = view.findViewById(R.id.jobListView)
-+        prevButton = view.findViewById(R.id.prevButton)
-+        nextButton = view.findViewById(R.id.nextButton)
-+
-+        // 이전 페이지 버튼 클릭 이벤트 처리
-+        prevButton.setOnClickListener {
-+            if (currentPage > 1) {
-+                currentPage -= 1
-+                fetchJobData()
-+            }
-+        }
-+
-+        // 다음 페이지 버튼 클릭 이벤트 처리
-+        nextButton.setOnClickListener {
-+            currentPage += 1
-+            fetchJobData()
-+        }
-+
-+        // WantedFilteringFragment.kt에서 argument를 넘겨받아 필터링된 데이터 출력
-+        //fetchJobData()
-+
-+        return view
-+    }
-+
-+    private fun fetchJobData() {
-+        val url =
-+            "http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10"
-+        FetchJobData().execute(url)
-+    }
-+
-+    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
-+        override fun doInBackground(vararg urls: String): List<Job> {
-+            val urlString = urls[0]
-+            var result: List<Job> = emptyList()
-+            var connection: HttpURLConnection? = null
-+
-+            try {
-+                val url = URL(urlString)
-+                connection = url.openConnection() as HttpURLConnection
-+                connection.requestMethod = "GET"
-+                connection.readTimeout = 15 * 1000
-+                connection.connectTimeout = 15 * 1000
-+
-+                val responseCode = connection.responseCode
-+                if (responseCode == HttpURLConnection.HTTP_OK) {
-+                    val inputStream = connection.inputStream
-+                    result = parseXml(inputStream)
-+                }
-+            } catch (e: Exception) {
-+                e.printStackTrace()
-+            } finally {
-+                connection?.disconnect()
-+            }
-+
-+            return result
-+        }
-+
-+        private fun parseXml(inputStream: InputStream): List<Job> {
-+            val jobList = mutableListOf<Job>()
-+            val factory = XmlPullParserFactory.newInstance()
-+            val xpp = factory.newPullParser()
-+            xpp.setInput(inputStream, null)
-+
-+            var eventType = xpp.eventType
-+            var company: String? = null // 회사명
-+            var title: String? = null // 채용제목
-+            var salTpNm: String? = null // 임금형태
-+            var sal: String? = null // 급여
-+            var region: String? = null // 근무지역
-+            var holidayTpNm: String? = null // 근무형태
-+            var minEdubg: String? = null // 최소학력
-+            var career: String? = null // 경력
-+            var closeDt: String? = null // 마감일자
-+            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
-+            var jobsCd: String? = null // 직종코드
-+
-+            while (eventType != XmlPullParser.END_DOCUMENT) {
-+                when (eventType) {
-+                    XmlPullParser.START_TAG -> {
-+                        when (xpp.name) {
-+                            "company" -> company = xpp.nextText()
-+                            "title" -> title = xpp.nextText()
-+                            "salTpNm" -> salTpNm = xpp.nextText()
-+                            "sal" -> sal = xpp.nextText()
-+                            "region" -> region = xpp.nextText()
-+                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
-+                            "minEdubg" -> minEdubg = xpp.nextText()
-+                            "career" -> career = xpp.nextText()
-+                            "closeDt" -> closeDt = xpp.nextText()
-+                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
-+                            "jobsCd" -> jobsCd = xpp.nextText()
-+                        }
-+                    }
-+                    XmlPullParser.END_TAG -> {
-+                        if (xpp.name == "wanted") {
-+                            company?.let { c ->
-+                                title?.let { t ->
-+                                    jobList.add(
-+                                        Job(
-+                                            c, t, salTpNm, sal, region, holidayTpNm,
-+                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
-+                                        )
-+                                    )
-+                                }
-+                            }
-+                            company = null
-+                            title = null
-+                            salTpNm = null
-+                            sal = null
-+                            region = null
-+                            holidayTpNm = null
-+                            minEdubg = null
-+                            career = null
-+                            closeDt = null
-+                            wantedMobileInfoUrl = null
-+                            jobsCd = null
-+                        }
-+                    }
-+                }
-+                eventType = xpp.next()
-+            }
-+
-+            return jobList
-+        }
-+
-+        override fun onPostExecute(result: List<Job>) {
-+            jobList = result
-+            showJobList()
-+        }
-+    }
-+
-+    private fun showJobList() {
-+        val adapter = CustomAdapter2(requireActivity(), jobList)
-+        jobListView.adapter = adapter
-+
-+        jobListView.setOnItemClickListener { _, _, position, _ ->
-+            val job = jobList[position]
-+            val intent = JobDetailActivity2.newIntent(requireContext(), job)
-+            startActivity(intent)
-+        }
-+    }
-+}
-+
-+class CustomAdapter2(private val context2: Context, private val jobList: List<Job>) :
-+    ArrayAdapter<Job>(context2, R.layout.job_item, jobList) {
-+
-+    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
-+        val view =
-+            convertView ?: LayoutInflater.from(context2).inflate(R.layout.job_item, parent, false)
-+
-+        val job = jobList[position]
-+
-+        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
-+        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
-+        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
-+
-+        titleTextView.text = job.title
-+        companyTextView.text = job.company
-+        regionContTextView.text = job.region
-+
-+        return view
-+    }
-+}
-+
-+class JobDetailActivity2 : AppCompatActivity() {
-+    private lateinit var backButton: ImageView
-+    private lateinit var company: TextView // 회사명
-+    private lateinit var title: TextView // 제목
-+    private lateinit var salTpNm: TextView // 임금형태
-+    private lateinit var sal: TextView // 급여
-+    private lateinit var region: TextView // 근무지역
-+    private lateinit var holidayTpNm: TextView // 근무형태
-+    private lateinit var minEdubg: TextView // 최소학력
-+    private lateinit var career: TextView // 경력
-+    private lateinit var closeDt: TextView // 마감일자
-+    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
-+    private lateinit var jobsCd: TextView // 직종코드
-+
-+    companion object {
-+        private const val JOB_EXTRA = "job"
-+
-+        fun newIntent(context2: Context, job: Job): Intent {
-+            return Intent(context2, JobDetailActivity2::class.java).apply {
-+                putExtra(JOB_EXTRA, job)
-+            }
-+        }
-+    }
-+
-+    override fun onCreate(savedInstanceState: Bundle?) {
-+        super.onCreate(savedInstanceState)
-+        setContentView(R.layout.activity_job_detail)
-+
-+        // 기본 툴바 숨기기
-+        supportActionBar?.hide()
-+
-+        backButton = findViewById(R.id.backButton)
-+        company = findViewById(R.id.company)
-+        title = findViewById(R.id.title)
-+        salTpNm = findViewById(R.id.salTpNm)
-+        sal = findViewById(R.id.sal)
-+        region = findViewById(R.id.region)
-+        holidayTpNm = findViewById(R.id.holidayTpNm)
-+        minEdubg = findViewById(R.id.minEdubg)
-+        career = findViewById(R.id.career)
-+        closeDt = findViewById(R.id.closeDt)
-+        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
-+        jobsCd = findViewById(R.id.jobsCd)
-+
-+        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
-+
-+        company.text = job?.company
-+        title.text = job?.title
-+        salTpNm.text = job?.salTpNm
-+        sal.text = job?.sal
-+        region.text = job?.region
-+        holidayTpNm.text = job?.holidayTpNm
-+        minEdubg.text = job?.minEdubg
-+        career.text = job?.career
-+        closeDt.text = job?.closeDt
-+        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
-+        jobsCd.text = job?.jobsCd
-+
-+        backButton.setOnClickListener {
-+            onBackPressed()
-+        }
-+    }
-+}
-\ No newline at end of file
-Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\n\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n//        complete_btn1.setOnClickListener {\r\n//            val wantedFilteredFragment = WantedFilteredFragment()\r\n//            requireActivity().supportFragmentManager.beginTransaction()\r\n//                .replace(R.id.fl_container, wantedFilteredFragment)\r\n//                .addToBackStack(null)\r\n//                .commit()\r\n//        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689777839166)
-@@ -1,50 +1,69 @@
- package com.example.a23_hf069
- 
-+import android.content.Context
- import android.content.Intent
-+import android.os.AsyncTask
-+import android.os.Build
- import android.os.Bundle
- import android.view.LayoutInflater
- import android.view.View
- import android.view.ViewGroup
-+import android.widget.ArrayAdapter
- import android.widget.Button
-+import android.widget.ImageView
-+import android.widget.ListView
-+import android.widget.TextView
-+import androidx.annotation.RequiresApi
- import androidx.appcompat.app.AppCompatActivity
-+import androidx.core.content.ContentProviderCompat.requireContext
-+import androidx.core.content.ContextCompat.startActivity
- import androidx.fragment.app.Fragment
- import androidx.fragment.app.setFragmentResult
--
-+import org.xmlpull.v1.XmlPullParser
-+import org.xmlpull.v1.XmlPullParserFactory
-+import java.io.InputStream
-+import java.net.HttpURLConnection
-+import java.net.URL
-+import java.net.URLEncoder
-+import java.time.LocalDate
- 
- 
--class WantedFilteringFragment : Fragment()  {
-+class WantedFilteringFragment : Fragment() {
-+    private lateinit var jobList: List<Job>
-+    private lateinit var jobListView: ListView
-+
-     lateinit var region_btn: Button
- 
--    lateinit var edu_btn1 : Button
--    lateinit var edu_btn2 : Button
--    lateinit var edu_btn3 : Button
--    lateinit var edu_btn4 : Button
--    lateinit var edu_btn5 : Button
--    lateinit var edu_btn6 : Button
-+    lateinit var edu_btn1: Button
-+    lateinit var edu_btn2: Button
-+    lateinit var edu_btn3: Button
-+    lateinit var edu_btn4: Button
-+    lateinit var edu_btn5: Button
-+    lateinit var edu_btn6: Button
- 
--    lateinit var career_btn1 : Button
--    lateinit var career_btn2 : Button
--    lateinit var career_btn3 : Button
-+    lateinit var career_btn1: Button
-+    lateinit var career_btn2: Button
-+    lateinit var career_btn3: Button
- 
--    lateinit var closeDt_btn1 : Button
--    lateinit var closeDt_btn2 : Button
--    lateinit var closeDt_btn3 : Button
--    lateinit var closeDt_btn4 : Button
--    lateinit var closeDt_btn5 : Button
--    lateinit var closeDt_btn6 : Button
-+    lateinit var closeDt_btn1: Button
-+    lateinit var closeDt_btn2: Button
-+    lateinit var closeDt_btn3: Button
-+    lateinit var closeDt_btn4: Button
-+    lateinit var closeDt_btn5: Button
-+    lateinit var closeDt_btn6: Button
- 
-     private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...
--    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...
-+    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력
-     private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...
- 
-     private val selectedEducationList: MutableSet<Int> = mutableSetOf()
-     private val selectedCareerList: MutableSet<Int> = mutableSetOf()
-     private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()
- 
--    lateinit var complete_btn1 : Button //완료버튼
-+    lateinit var complete_btn1: Button //완료버튼
- 
-     // 화면 띄우기
--    override fun onCreateView( // onCreateView 함수 오버라이드 해줌
-+    override fun onCreateView( // onCreateView 함수 오버라이드
-         inflater: LayoutInflater,
-         container: ViewGroup?,
-         savedInstanceState: Bundle?
-@@ -53,6 +72,7 @@
-         return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)
-     }
- 
-+    @RequiresApi(Build.VERSION_CODES.O)
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
-         //지역
-@@ -80,7 +100,7 @@
-         closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)
- 
- 
--       /* region_btn.setOnClickListener {
-+        /* region_btn.setOnClickListener {
-             val regionFragment = RegionFragment()
-             requireActivity().supportFragmentManager.beginTransaction()
-                 .replace(R.id.fl_container, regionFragment)
-@@ -103,36 +123,48 @@
- 
-         // 마감일 버튼 클릭 리스너
-         closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체
--        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내
--        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내
--        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내
--        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내
--        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내
-+        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 오늘
-+        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 내일
-+        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 1주이내
-+        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 30일 이내
-+        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이상
- 
--    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
-+        //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환
-         complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)
--//        complete_btn1.setOnClickListener {
--//            val wantedFilteredFragment = WantedFilteredFragment()
--//            requireActivity().supportFragmentManager.beginTransaction()
--//                .replace(R.id.fl_container, wantedFilteredFragment)
--//                .addToBackStack(null)
--//                .commit()
--//        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
-+        complete_btn1.setOnClickListener {
-+            val fetchJobData = FetchJobData()
-+            fetchJobData.execute("http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=1&display=10")
-+
-+        // 새로운 리스트를 생성하여 필터링된 항목을 저장
-+            val filteredJobList = fetchJobData.get().toMutableList()
-+
-+        // WantedFilteredFragment로 전달
-+            val wantedFilteredFragment = WantedFilteredFragment()
-+            val args = Bundle()
-+            args.putParcelableArrayList("filteredJobList", ArrayList(filteredJobList))
-+            wantedFilteredFragment.arguments = args
-+
-+            requireActivity().supportFragmentManager.beginTransaction()
-+                .replace(R.id.fl_container, wantedFilteredFragment)
-+                .addToBackStack(null)
-+                .commit()
-+        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->
-     }
- 
-+    @RequiresApi(Build.VERSION_CODES.O)
-     private fun SelectedEducation(selected: Int) {
-         if (selectedEducation == 0 || selected > selectedEducation) {
-             selectedEducation = selected
-             // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)
-             if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {
-                 // 0번과 같은 결과
--
--
-+                selectedEducationList.add(0)
-             }
-         }
-         filterItems()
-     }
- 
-+    @RequiresApi(Build.VERSION_CODES.O)
-     private fun SelectedCareer(selected: Int) {
-         if (selectedCareer == 0 || selected > selectedCareer) {
-             selectedCareer = selected
-@@ -140,6 +172,7 @@
-         filterItems()
-     }
- 
-+    @RequiresApi(Build.VERSION_CODES.O)
-     private fun SelectedCloseDate(selected: Int) {
-         if (selectedCloseDate == 0 || selected > selectedCloseDate) {
-             selectedCloseDate = selected
-@@ -147,21 +180,281 @@
-         filterItems()
-     }
- 
-+    @RequiresApi(Build.VERSION_CODES.O)
-     private fun filterItems() {
-         // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)
--        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
-+        val filteredEducationList =
-+            if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList
-         val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList
--        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
-+        val filteredCloseDateList =
-+            if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList
-+
-+        //각각의 리스트에 담긴 Int형의 데이터들을 String 타입으로 변환
-+        val convertedEducationList = filteredEducationList.map { value ->
-+            when (value) {
-+                0 -> "00"
-+                1 -> "01"
-+                2 -> "02"
-+                3 -> "03"
-+                4 -> "04"
-+                5 -> "05"
-+                else -> {}
-+            }
-+        }
-+        val convertedCareerList = filteredCareerList.map { value ->
-+            when (value) {
-+                0 -> "N"
-+                1 -> "E"
-+                2 -> "Z"
-+
-+                else -> {}
-+            }
-+        }
-+    val convertedCloseDateList = filteredCloseDateList.map { value ->
-+        val today = LocalDate.now()
-+        val deadlineDate = when (value) {
-+           // 0 ->
-+            1 -> today // 오늘
-+            2 -> today.plusDays(1) // 내일
-+            3 -> today.plusDays(7) // 1주 이내
-+            4 -> today.plusMonths(1) // 한달 이내
-+            else -> {today.plusMonths(1) // 한달 이상
-+             }
-+        }
-+        deadlineDate.toString() // 날짜를 문자열로 변환하여 반환
-+        //xml파일의 <closeDt>마감일날짜 정보에서 오늘 날짜를 뺀 값
-+    }
-+}
-+
-+        //각각의 리스트에서 추출된 값을 파싱된 xml파일과 대조 -> 리스트에 담기 -> 중복 건 찾기
-+
-+
- 
-         // 세 리스트에서 중복되는 값들을 찾습니다.
--        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
-+        //val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)
- 
--        for (item in intersectedItems) {
-+        /*for (item in intersectedItems) {
-             println(item)
-             // 필요한 처리를 수행합니다.
--        }
--    }
-+        }*/
-+
-+
-+    //워크넷 api 채용목록 xml파일 parsing하는 코드
-+    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {
-+        override fun doInBackground(vararg urls: String): List<Job> {
-+            val urlString = urls[0]
-+            var result: List<Job> = emptyList()
-+            var connection: HttpURLConnection? = null
-+
-+            try {
-+                val url = URL(urlString)
-+                connection = url.openConnection() as HttpURLConnection
-+                connection.requestMethod = "GET"
-+                connection.readTimeout = 15 * 1000
-+                connection.connectTimeout = 15 * 1000
-+
-+                val responseCode = connection.responseCode
-+                if (responseCode == HttpURLConnection.HTTP_OK) {
-+                    val inputStream = connection.inputStream
-+                    result = parseXml(inputStream)
-+                }
-+            } catch (e: Exception) {
-+                e.printStackTrace()
-+            } finally {
-+                connection?.disconnect()
-+            }
- 
-+            return result
-+        }
- 
-+        private fun parseXml(inputStream: InputStream): List<Job> {
-+            val jobList = mutableListOf<Job>()
-+            val factory = XmlPullParserFactory.newInstance()
-+            val xpp = factory.newPullParser()
-+            xpp.setInput(inputStream, null)
-+
-+            var eventType = xpp.eventType
-+            var company: String? = null // 회사명
-+            var title: String? = null // 채용제목
-+            var salTpNm: String? = null // 임금형태
-+            var sal: String? = null // 급여
-+            var region: String? = null // 근무지역
-+            var holidayTpNm: String? = null // 근무형태
-+            var minEdubg: String? = null // 최소학력
-+            var career: String? = null // 경력
-+            var closeDt: String? = null // 마감일자
-+            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL
-+            var jobsCd: String? = null // 직종코드
-+
-+            while (eventType != XmlPullParser.END_DOCUMENT) {
-+                when (eventType) {
-+                    XmlPullParser.START_TAG -> {
-+                        when (xpp.name) {
-+                            "company" -> company = xpp.nextText()
-+                            "title" -> title = xpp.nextText()
-+                            "salTpNm" -> salTpNm = xpp.nextText()
-+                            "sal" -> sal = xpp.nextText()
-+                            "region" -> region = xpp.nextText()
-+                            "holidayTpNm" -> holidayTpNm = xpp.nextText()
-+                            "minEdubg" -> minEdubg = xpp.nextText()
-+                            "career" -> career = xpp.nextText()
-+                            "closeDt" -> closeDt = xpp.nextText()
-+                            "wantedMobileInfoUrl" -> wantedMobileInfoUrl = xpp.nextText()
-+                            "jobsCd" -> jobsCd = xpp.nextText()
-+                        }
-+                    }
-+                    XmlPullParser.END_TAG -> {
-+                        if (xpp.name == "wanted") {
-+                            company?.let { c ->
-+                                title?.let { t ->
-+                                    jobList.add(
-+                                        Job(
-+                                            c, t, salTpNm, sal, region, holidayTpNm,
-+                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd
-+                                        )
-+                                    )
-+                                }
-+                            }
-+                            company = null
-+                            title = null
-+                            salTpNm = null
-+                            sal = null
-+                            region = null
-+                            holidayTpNm = null
-+                            minEdubg = null
-+                            career = null
-+                            closeDt = null
-+                            wantedMobileInfoUrl = null
-+                            jobsCd = null
-+                        }
-+                    }
-+                }
-+                eventType = xpp.next()
-+            }
-+
-+            return jobList
-+        }
-+
-+        @RequiresApi(Build.VERSION_CODES.O)
-+        private fun isJobMatched(job: Job): Boolean {
-+            val convertedEducationList = listOf(
-+                "00", "01", "02", "03", "04", "05"
-+            ) // 전체, 초등학교, 중학교, 고등학교, 대학(2년제), 대학(4년제)
-+            val convertedCareerList = listOf(
-+                "N", "E", "Z"
-+            ) // 전체, 신입, 경력
-+            val convertedCloseDateList = listOf(
-+                LocalDate.now().toString(), // 오늘
-+                LocalDate.now().plusDays(1).toString(), // 내일
-+                LocalDate.now().plusDays(7).toString(), // 1주 이내
-+                LocalDate.now().plusMonths(1).toString(), // 한달 이내
-+                LocalDate.now().plusMonths(1).toString() // 한달 이상
-+            )
-+
-+            return convertedEducationList.contains(job.minEdubg) &&
-+                    convertedCareerList.contains(job.career) &&
-+                    convertedCloseDateList.contains(job.closeDt)
-+        }
-+        override fun onPostExecute(result: List<Job>) {
-+            jobList = result
-+            showJobList()
-+        }
-+    }
-+
-+    private fun showJobList() {
-+        val adapter = CustomAdapter3(requireActivity(), jobList)
-+        jobListView.adapter = adapter
-+
-+        jobListView.setOnItemClickListener { _, _, position, _ ->
-+            val job = jobList[position]
-+            val intent = JobDetailActivity3.newIntent(requireContext(), job)
-+            startActivity(intent)
-+        }
-+    }
-+}
-+
-+class CustomAdapter3(private val context3: Context, private val jobList: List<Job>) :
-+    ArrayAdapter<Job>(context3, R.layout.job_item, jobList) {
-+
-+    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
-+        val view =
-+            convertView ?: LayoutInflater.from(context3).inflate(R.layout.job_item, parent, false)
-+
-+        val job = jobList[position]
-+
-+        val titleTextView: TextView = view.findViewById(R.id.titleTextView)
-+        val companyTextView: TextView = view.findViewById(R.id.companyTextView)
-+        val regionContTextView: TextView = view.findViewById(R.id.regionContTextView)
-+
-+        titleTextView.text = job.title
-+        companyTextView.text = job.company
-+        regionContTextView.text = job.region
-+
-+        return view
-+    }
-+}
-+
-+class JobDetailActivity3 : AppCompatActivity() {
-+    private lateinit var backButton: ImageView
-+    private lateinit var company: TextView // 회사명
-+    private lateinit var title: TextView // 제목
-+    private lateinit var salTpNm: TextView // 임금형태
-+    private lateinit var sal: TextView // 급여
-+    private lateinit var region: TextView // 근무지역
-+    private lateinit var holidayTpNm: TextView // 근무형태
-+    private lateinit var minEdubg: TextView // 최소학력
-+    private lateinit var career: TextView // 경력
-+    private lateinit var closeDt: TextView // 마감일자
-+    private lateinit var wantedMobileInfoUrl: TextView // 워크넷 모바일 채용정보 URL
-+    private lateinit var jobsCd: TextView // 직종코드
-+
-+    companion object {
-+        private const val JOB_EXTRA = "job"
-+
-+        fun newIntent(context2: Context, job: Job): Intent {
-+            return Intent(context2, JobDetailActivity3::class.java).apply {
-+                putExtra(JOB_EXTRA, job)
-+            }
-+        }
-+    }
-+
-+    override fun onCreate(savedInstanceState: Bundle?) {
-+        super.onCreate(savedInstanceState)
-+        setContentView(R.layout.activity_job_detail)
-+
-+        // 기본 툴바 숨기기
-+        supportActionBar?.hide()
-+
-+        backButton = findViewById(R.id.backButton)
-+        company = findViewById(R.id.company)
-+        title = findViewById(R.id.title)
-+        salTpNm = findViewById(R.id.salTpNm)
-+        sal = findViewById(R.id.sal)
-+        region = findViewById(R.id.region)
-+        holidayTpNm = findViewById(R.id.holidayTpNm)
-+        minEdubg = findViewById(R.id.minEdubg)
-+        career = findViewById(R.id.career)
-+        closeDt = findViewById(R.id.closeDt)
-+        wantedMobileInfoUrl = findViewById(R.id.wantedMobileInfoUrl)
-+        jobsCd = findViewById(R.id.jobsCd)
-+
-+        val job = intent.getParcelableExtra<Job>(JOB_EXTRA)
-+
-+        company.text = job?.company
-+        title.text = job?.title
-+        salTpNm.text = job?.salTpNm
-+        sal.text = job?.sal
-+        region.text = job?.region
-+        holidayTpNm.text = job?.holidayTpNm
-+        minEdubg.text = job?.minEdubg
-+        career.text = job?.career
-+        closeDt.text = job?.closeDt
-+        wantedMobileInfoUrl.text = job?.wantedMobileInfoUrl
-+        jobsCd.text = job?.jobsCd
-+
-+        backButton.setOnClickListener {
-+            onBackPressed()
-+        }
-+    }
- 
-     }
-\ No newline at end of file
-Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 215cc07a9645889b6a2d30b94692580c3f1ba795)
-+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689773051946)
-@@ -19,7 +19,7 @@
- 
- 
- class P_loginFragment : Fragment() { //개인로그인
--    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
-+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
- 
-     private var TAG = "phptest" // phptest log 찍으려는 용도
-     private lateinit var id_text_input_edit_text: EditText // id
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-07-19_오후_9_42_[Changes]/shelved.patch	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
+++ /dev/null	(revision 73f78477236a79c5b2995c482ff18265f36e5c49)
@@ -1,84 +0,0 @@
-Index: app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.text.method.ScrollingMovementMethod\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass P_loginFragment : Fragment() { //개인로그인\r\n    private var IP_ADDRESS = \"54.180.82.123\" // 본인 IP주소를 넣으세요.\r\n\r\n    private var TAG = \"phptest\" // phptest log 찍으려는 용도\r\n    private lateinit var id_text_input_edit_text: EditText // id\r\n    private lateinit var password_text_input_edit_text: EditText // password\r\n    private lateinit var id: String // 사용자 아이디\r\n    lateinit var login : Button\r\n    lateinit var signUp : Button\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View?\r\n    {\r\n        return inflater.inflate(R.layout.fragment_p_login, container, false)\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        login = view.findViewById<Button>(R.id.login_btn)\r\n        signUp = view.findViewById<Button>(R.id.signUp_btn)\r\n\r\n        id_text_input_edit_text = view.findViewById<EditText>(R.id.id_text)\r\n        password_text_input_edit_text = view.findViewById<EditText>(R.id.pw_text)\r\n\r\n        login.setOnClickListener() {\r\n\r\n            id = id_text_input_edit_text.text.toString().trim()\r\n            val password = password_text_input_edit_text.text.toString().trim()\r\n\r\n            if (id.isEmpty() || password.isEmpty()) {\r\n                Toast.makeText(requireContext(), \"정보를 입력해주세요.\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val task = SelectData()\r\n                task.execute(\"http://$IP_ADDRESS/android_login_php.php\", id, password)\r\n            }\r\n        }\r\n\r\n        signUp.setOnClickListener() {\r\n            // signUp버튼을 클릭하면 CorporateSignUpActivity로 전환\r\n            val intent = Intent(getActivity(), PersonalSignUpActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    inner class SelectData : AsyncTask<String, Void, String>() {\r\n        private var progressDialog: ProgressDialog? = null\r\n        override fun doInBackground(vararg params: String): String {\r\n            val serverURL = params[0]\r\n            val userid = params[1]\r\n            val userpw = params[2]\r\n\r\n            val postParameters = \"personal_id=$userid&personal_password=$userpw\"\r\n\r\n            try {\r\n                val url = URL(serverURL)\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n\r\n                httpURLConnection.readTimeout = 5000\r\n                httpURLConnection.connectTimeout = 5000\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.connect()\r\n\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(postParameters.toByteArray(charset(\"UTF-8\")))\r\n                outputStream.flush()\r\n                outputStream.close()\r\n\r\n                val responseStatusCode = httpURLConnection.responseCode\r\n                Log.d(TAG, \"POST response code - $responseStatusCode\")\r\n\r\n                val inputStream: InputStream\r\n                inputStream = if (responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n                    httpURLConnection.inputStream\r\n                } else {\r\n                    httpURLConnection.errorStream\r\n                }\r\n\r\n                val inputStreamReader = InputStreamReader(inputStream, \"UTF-8\")\r\n                val bufferedReader = BufferedReader(inputStreamReader)\r\n                val sb = StringBuilder()\r\n                var line: String? = null\r\n\r\n                while (bufferedReader.readLine().also { line = it } != null) {\r\n                    sb.append(line)\r\n                }\r\n\r\n                bufferedReader.close()\r\n                Log.d(\"php 값 :\", sb.toString())\r\n                return sb.toString()\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"SelectData: Error\", e)\r\n                return \"Error \" + e.message\r\n            }\r\n        }\r\n\r\n        override fun onPostExecute(result: String) {\r\n            super.onPostExecute(result)\r\n\r\n            if (result == \"success\") {\r\n                // 로그인 성공\r\n                Toast.makeText(view?.context, \"로그인 성공\", Toast.LENGTH_SHORT).show()\r\n                // 로그인 성공 시 homeactivity로 전환\r\n                val intent = Intent(getActivity(), HomeActivity::class.java)\r\n                intent.putExtra(\"userId\", id) // 아이디를 Intent에 추가 (사용자 아이디를 HomeActivity로 넘김)\r\n                startActivity(intent)\r\n            } else {\r\n                // 로그인 실패\r\n                Toast.makeText(view?.context, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/P_loginFragment.kt	(date 1689770315778)
-@@ -19,7 +19,7 @@
- 
- 
- class P_loginFragment : Fragment() { //개인로그인
--    private var IP_ADDRESS = "54.180.82.123" // 본인 IP주소를 넣으세요.
-+    private var IP_ADDRESS = "54.180.98.37" // 본인 IP주소를 넣으세요.
- 
-     private var TAG = "phptest" // phptest log 찍으려는 용도
-     private lateinit var id_text_input_edit_text: EditText // id
-Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\nimport kotlinx.android.synthetic.main.activity_job_detail.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.*\r\nimport kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*\r\n\r\n\r\nclass WantedFilteringFragment : Fragment()  {\r\n    lateinit var region_btn: Button\r\n\r\n    lateinit var edu_btn1 : Button\r\n    lateinit var edu_btn2 : Button\r\n    lateinit var edu_btn3 : Button\r\n    lateinit var edu_btn4 : Button\r\n    lateinit var edu_btn5 : Button\r\n    lateinit var edu_btn6 : Button\r\n\r\n    lateinit var career_btn1 : Button\r\n    lateinit var career_btn2 : Button\r\n    lateinit var career_btn3 : Button\r\n\r\n    lateinit var closeDt_btn1 : Button\r\n    lateinit var closeDt_btn2 : Button\r\n    lateinit var closeDt_btn3 : Button\r\n    lateinit var closeDt_btn4 : Button\r\n    lateinit var closeDt_btn5 : Button\r\n    lateinit var closeDt_btn6 : Button\r\n\r\n    private var selectedEducation: Int = 0  // 0: 전체, 1: 초등학교, 2: 중학교, ...\r\n    private var selectedCareer: Int = 0  // 0: 전체, 1: 신입, 2: 경력, ...\r\n    private var selectedCloseDate: Int = 0  // 0: 전체, 1: 1일 이내, 2: 3일 이내, ...\r\n\r\n    private val selectedEducationList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCareerList: MutableSet<Int> = mutableSetOf()\r\n    private val selectedCloseDateList: MutableSet<Int> = mutableSetOf()\r\n\r\n    lateinit var complete_btn1 : Button //완료버튼\r\n\r\n    // 화면 띄우기\r\n    override fun onCreateView( // onCreateView 함수 오버라이드 해줌\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //지역\r\n        region_btn = view.findViewById<Button>(R.id.region_btn)\r\n\r\n        //학력 체크\r\n        edu_btn1 = view.findViewById<Button>(R.id.cb_e_1) //전체\r\n        edu_btn2 = view.findViewById<Button>(R.id.cb_e_2) //초등학교\r\n        edu_btn3 = view.findViewById<Button>(R.id.cb_e_3)  //중학교\r\n        edu_btn4 = view.findViewById<Button>(R.id.cb_e_4)  //고등학교\r\n        edu_btn5 = view.findViewById<Button>(R.id.cb_e_5)  //대학(2년제)\r\n        edu_btn6 = view.findViewById<Button>(R.id.cb_e_6)  //대학(4년제)\r\n\r\n        //경력 체크\r\n        career_btn1 = view.findViewById<Button>(R.id.cb_c_1)  //전체\r\n        career_btn2 = view.findViewById<Button>(R.id.cb_c_2)  //신입\r\n        career_btn3 = view.findViewById<Button>(R.id.cb_c_3) //경력\r\n\r\n        //마감일 체크\r\n        closeDt_btn1 = view.findViewById<Button>(R.id.cb_d_1)\r\n        closeDt_btn2 = view.findViewById<Button>(R.id.cb_d_2)\r\n        closeDt_btn3 = view.findViewById<Button>(R.id.cb_d_3)\r\n        closeDt_btn4 = view.findViewById<Button>(R.id.cb_d_4)\r\n        closeDt_btn5 = view.findViewById<Button>(R.id.cb_d_5)\r\n        closeDt_btn6 = view.findViewById<Button>(R.id.cb_d_6)\r\n\r\n\r\n       /* region_btn.setOnClickListener {\r\n            val regionFragment = RegionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n*/\r\n        // 학력 버튼 클릭 리스너\r\n        edu_btn1.setOnClickListener { SelectedEducation(0) }  // 전체\r\n        edu_btn2.setOnClickListener { SelectedEducation(1) }  // 초등학교\r\n        edu_btn3.setOnClickListener { SelectedEducation(2) }  // 중학교\r\n        edu_btn4.setOnClickListener { SelectedEducation(3) }  // 고등학교\r\n        edu_btn5.setOnClickListener { SelectedEducation(4) }  // 대학(2년제)\r\n        edu_btn6.setOnClickListener { SelectedEducation(5) }  // 대학(4년제)\r\n\r\n        // 경력 버튼 클릭 리스너\r\n        career_btn1.setOnClickListener { SelectedCareer(0) }  // 전체\r\n        career_btn2.setOnClickListener { SelectedCareer(1) }  // 신입\r\n        career_btn3.setOnClickListener { SelectedCareer(2) }  // 경력\r\n\r\n        // 마감일 버튼 클릭 리스너\r\n        closeDt_btn1.setOnClickListener { SelectedCloseDate(0) }  // 전체\r\n        closeDt_btn2.setOnClickListener { SelectedCloseDate(1) }  // 1일 이내\r\n        closeDt_btn3.setOnClickListener { SelectedCloseDate(2) }  // 3일 이내\r\n        closeDt_btn4.setOnClickListener { SelectedCloseDate(3) }  // 7일 이내\r\n        closeDt_btn5.setOnClickListener { SelectedCloseDate(4) }  // 14일 이내\r\n        closeDt_btn6.setOnClickListener { SelectedCloseDate(5) }  // 30일 이내\r\n\r\n    //완료버튼 누르면 필터링된 공고를 WantedFilteredFragment로 전환\r\n        complete_btn1 = view.findViewById<Button>(R.id.complete_btn1)\r\n        complete_btn1.setOnClickListener {\r\n            val wantedFilteredFragment = WantedFilteredFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteredFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        } //만약 조건선택이 완료되지 않은 채 완료버튼을 눌렀다면? ->\r\n    }\r\n\r\n    private fun SelectedEducation(selected: Int) {\r\n        if (selectedEducation == 0 || selected > selectedEducation) {\r\n            selectedEducation = selected\r\n            // 1번이나 2번이 선택되었을 때(혹은 둘다), 0번과 같은 결과를 출력(초졸, 중졸은 학력무관과 마찬가지)\r\n            if ((selectedEducation == 1 || selectedEducation == 2) && selectedEducation != 0) {\r\n                // 0번과 같은 결과\r\n\r\n\r\n            }\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCareer(selected: Int) {\r\n        if (selectedCareer == 0 || selected > selectedCareer) {\r\n            selectedCareer = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun SelectedCloseDate(selected: Int) {\r\n        if (selectedCloseDate == 0 || selected > selectedCloseDate) {\r\n            selectedCloseDate = selected\r\n        }\r\n        filterItems()\r\n    }\r\n\r\n    private fun filterItems() {\r\n        // 선택한 조건에 따라 필터링된 항목을 리스트에 저장(중복값을 찾기위해)\r\n        val filteredEducationList = if (selectedEducationList.isEmpty()) listOf(0) else selectedEducationList\r\n        val filteredCareerList = if (selectedCareerList.isEmpty()) listOf(0) else selectedCareerList\r\n        val filteredCloseDateList = if (selectedCloseDateList.isEmpty()) listOf(0) else selectedCloseDateList\r\n\r\n        // 세 리스트에서 중복되는 값들을 찾습니다.\r\n        val intersectedItems = filteredEducationList.intersect(filteredCareerList).intersect(filteredCloseDateList)\r\n\r\n        for (item in intersectedItems) {\r\n            println(item)\r\n            // 필요한 처리를 수행합니다.\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1689768958340)
-@@ -6,12 +6,7 @@
- import android.view.View
- import android.view.ViewGroup
- import android.widget.Button
--import androidx.appcompat.app.AppCompatActivity
- import androidx.fragment.app.Fragment
--import androidx.fragment.app.setFragmentResult
--import kotlinx.android.synthetic.main.activity_job_detail.*
--import kotlinx.android.synthetic.main.fragment_wanted_filtering.*
--import kotlinx.android.synthetic.main.fragment_wanted_filtering.view.*
- 
- 
- class WantedFilteringFragment : Fragment()  {
-Index: app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.view.KeyEvent\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.net.URLEncoder\r\n\r\nclass WantedWorkNetSearchFragment : Fragment() {\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var searchButton: Button\r\n    private lateinit var searchListView: ListView\r\n    private lateinit var jobList: List<Job>\r\n    private var currentPage = 1\r\n    private lateinit var prevButton: Button\r\n    private lateinit var nextButton: Button\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        val rootView = inflater.inflate(R.layout.fragment_wanted_work_net_search, container, false)\r\n\r\n        searchContent = rootView.findViewById(R.id.searchContent)\r\n        searchListView = rootView.findViewById(R.id.searchListView)\r\n        prevButton = rootView.findViewById(R.id.prevButton)\r\n        nextButton = rootView.findViewById(R.id.nextButton)\r\n\r\n        searchContent.setOnKeyListener { _, keyCode, event ->\r\n            if (event.action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {\r\n                fetchJobDataWithSearch()\r\n                return@setOnKeyListener true\r\n            }\r\n            return@setOnKeyListener false\r\n        }\r\n\r\n        val closeButton = rootView.findViewById<ImageButton>(R.id.backButton)\r\n        closeButton.setOnClickListener {\r\n            requireActivity().onBackPressed()\r\n        }\r\n\r\n        prevButton.visibility = View.GONE\r\n        nextButton.visibility = View.GONE\r\n\r\n        // 이전 페이지 버튼 클릭 이벤트 처리\r\n        prevButton.setOnClickListener {\r\n            if (currentPage > 1) {\r\n                currentPage -= 1\r\n                fetchJobDataWithSearch()\r\n            }\r\n        }\r\n\r\n        // 다음 페이지 버튼 클릭 이벤트 처리\r\n        nextButton.setOnClickListener {\r\n            currentPage += 1\r\n            fetchJobDataWithSearch()\r\n        }\r\n\r\n\r\n        return rootView\r\n    }\r\n\r\n    private fun fetchJobDataWithSearch() {\r\n        val searchKeyword = searchContent.text.toString().trim()\r\n\r\n        if (searchKeyword.isNotEmpty()) {\r\n            val encodedKeyword = URLEncoder.encode(searchKeyword, \"UTF-8\")\r\n            val url = \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&startPage=$currentPage&display=10&keyword=$encodedKeyword\"\r\n            FetchJobData().execute(url)\r\n        } else {\r\n            // 검색어가 비어있을 때 처리할 내용\r\n        }\r\n    }\r\n\r\n\r\n    private inner class FetchJobData : AsyncTask<String, Void, List<Job>>() {\r\n        override fun doInBackground(vararg urls: String): List<Job> {\r\n            val urlString = urls[0]\r\n            var result: List<Job> = emptyList()\r\n            var connection: HttpURLConnection? = null\r\n\r\n            try {\r\n                val url = URL(urlString)\r\n                connection = url.openConnection() as HttpURLConnection\r\n                connection.requestMethod = \"GET\"\r\n                connection.readTimeout = 15 * 1000\r\n                connection.connectTimeout = 15 * 1000\r\n\r\n                val responseCode = connection.responseCode\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = connection.inputStream\r\n                    result = parseXml(inputStream)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            } finally {\r\n                connection?.disconnect()\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        private fun parseXml(inputStream: InputStream): List<Job> {\r\n            val jobList = mutableListOf<Job>()\r\n            val factory = XmlPullParserFactory.newInstance()\r\n            val xpp = factory.newPullParser()\r\n            xpp.setInput(inputStream, null)\r\n\r\n            var eventType = xpp.eventType\r\n            var company: String? = null // 회사명\r\n            var title: String? = null // 채용제목\r\n            var salTpNm: String? = null // 임금형태\r\n            var sal: String? = null // 급여\r\n            var region: String? = null // 근무지역\r\n            var holidayTpNm: String? = null // 근무형태\r\n            var minEdubg: String? = null // 최소학력\r\n            var career: String? = null // 경력\r\n            var closeDt: String? = null // 마감일자\r\n            var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n            var jobsCd: String? = null // 직종코드\r\n\r\n            while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                when (eventType) {\r\n                    XmlPullParser.START_TAG -> {\r\n                        when (xpp.name) {\r\n                            \"company\" -> company = xpp.nextText()\r\n                            \"title\" -> title = xpp.nextText()\r\n                            \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                            \"sal\" -> sal = xpp.nextText()\r\n                            \"region\" -> region = xpp.nextText()\r\n                            \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                            \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                            \"career\" -> career = xpp.nextText()\r\n                            \"closeDt\" -> closeDt = xpp.nextText()\r\n                            \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                            \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        }\r\n                    }\r\n                    XmlPullParser.END_TAG -> {\r\n                        if (xpp.name == \"wanted\") {\r\n                            company?.let { c ->\r\n                                title?.let { t ->\r\n                                    jobList.add(\r\n                                        Job(\r\n                                            c, t, salTpNm, sal, region, holidayTpNm,\r\n                                            minEdubg, career, closeDt, wantedMobileInfoUrl, jobsCd\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                            company = null\r\n                            title = null\r\n                            salTpNm = null\r\n                            sal = null\r\n                            region = null\r\n                            holidayTpNm = null\r\n                            minEdubg = null\r\n                            career = null\r\n                            closeDt = null\r\n                            wantedMobileInfoUrl = null\r\n                            jobsCd = null\r\n                        }\r\n                    }\r\n                }\r\n                eventType = xpp.next()\r\n            }\r\n\r\n            return jobList\r\n        }\r\n\r\n        override fun onPostExecute(result: List<Job>) {\r\n            if (currentPage > 1 && result.isEmpty()) {\r\n                // nextButton을 누른 후에 빈 리스트가 반환된 경우, \"마지막 페이지입니다\" 토스트 메시지를 표시합니다.\r\n                Toast.makeText(requireContext(), \"마지막 페이지입니다\", Toast.LENGTH_SHORT).show()\r\n                currentPage -= 1 // 이전 페이지로 돌아갑니다.\r\n                nextButton.isEnabled = false // nextButton을 비활성화합니다.\r\n            } else {\r\n                jobList = result\r\n                showJobList()\r\n\r\n                if (searchContent.text.toString().trim().isEmpty()) {\r\n                    // EditText에 입력값이 없을 때\r\n                    prevButton.visibility = View.GONE\r\n                    nextButton.visibility = View.GONE\r\n                } else {\r\n                    // EditText에 입력값이 있을 때\r\n                    if (currentPage > 1 || jobList.size >= 10) {\r\n                        prevButton.visibility = View.VISIBLE\r\n                    } else {\r\n                        prevButton.visibility = View.GONE\r\n                    }\r\n                    nextButton.visibility = View.VISIBLE\r\n                }\r\n\r\n                nextButton.isEnabled = true // nextButton을 활성화합니다.\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showJobList() {\r\n        val adapter = CustomAdapter(this, jobList)\r\n        searchListView.adapter = adapter\r\n\r\n        searchListView.setOnItemClickListener { _, _, position, _ ->\r\n            val job = jobList[position]\r\n            val intent = JobDetailActivity.newIntent(requireContext(), job)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedWorkNetSearchFragment.kt	(date 1689770133021)
-@@ -205,7 +205,7 @@
-     }
- 
-     private fun showJobList() {
--        val adapter = CustomAdapter(this, jobList)
-+        val adapter = CustomAdapter(jobList,requireContext())
-         searchListView.adapter = adapter
- 
-         searchListView.setOnItemClickListener { _, _, position, _ ->
-Index: app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.a23_hf069\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport androidx.viewpager.widget.ViewPager\r\nimport com.google.android.material.tabs.TabLayout\r\nimport kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*\r\n\r\nclass WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {\r\n    private lateinit var filter: Button\r\n    private lateinit var searchContent: EditText\r\n    private lateinit var viewPager: ViewPager\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_wanted_list, container, false)\r\n\r\n        val adapter = PagerAdapter(childFragmentManager)\r\n        adapter.addFragment(WantedRequestingFragment(), \"즉시지원\")\r\n        adapter.addFragment(WantedWorkNetFragment(), \"워크넷 채용공고\")\r\n\r\n        viewPager = view.findViewById<ViewPager>(R.id.viewpager01)\r\n        viewPager.adapter = adapter\r\n\r\n        tabLayout = view.findViewById<TabLayout>(R.id.tablayout01)\r\n        tabLayout.setupWithViewPager(viewPager)\r\n        tabLayout.addOnTabSelectedListener(this)\r\n\r\n        filter = view.findViewById<Button>(R.id.conditionButton)\r\n        filter.setOnClickListener() {\r\n            val fragment1 = WantedFilteringFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, fragment1)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        searchContent = view.findViewById<EditText>(R.id.searchContent)\r\n        searchContent.setOnTouchListener { _, _ ->\r\n            val currentTab = tabLayout.selectedTabPosition\r\n            if (currentTab == 1) {\r\n                val wantedWorkNetSearchFragment = WantedWorkNetSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedWorkNetSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"워크넷 채용공고 검색\"\r\n            } else if (currentTab == 0) {\r\n                val wantedRequestingSearchFragment = WantedRequestingSearchFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedRequestingSearchFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n                searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n            }\r\n            true\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    override fun onTabSelected(tab: TabLayout.Tab?) {\r\n        val currentTab = tab?.position\r\n        if (currentTab == 1) {\r\n            searchContent.hint = \"워크넷 채용공고 검색\"\r\n        } else if (currentTab == 0) {\r\n            searchContent.hint = \"즉시지원 가능한 일자리 검색\"\r\n        }\r\n    }\r\n\r\n    override fun onTabUnselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n\r\n    override fun onTabReselected(tab: TabLayout.Tab?) {\r\n        // Do nothing\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt
---- a/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(revision 44cc291ea9f9aea37a911c1c4b49ecf9325196b6)
-+++ b/app/src/main/java/com/example/a23_hf069/WantedListFragment.kt	(date 1689768964832)
-@@ -7,12 +7,10 @@
- import android.view.LayoutInflater
- import android.view.View
- import android.view.ViewGroup
--import android.view.inputmethod.InputMethodManager
- import android.widget.Button
- import android.widget.EditText
- import androidx.viewpager.widget.ViewPager
- import com.google.android.material.tabs.TabLayout
--import kotlinx.android.synthetic.main.fragment_wanted_work_net_search.*
- 
- class WantedListFragment : Fragment(), TabLayout.OnTabSelectedListener {
-     private lateinit var filter: Button
